package mapo

import (
	"fmt"
	"math/big"
	"testing"

	ecommon "github.com/ethereum/go-ethereum/common"
	"github.com/mapprotocol/compass-tss/mapclient/types"
	"github.com/stretchr/testify/assert"
)

func TestBridge_GetObservationsStdTx(t *testing.T) {
	b := getBridgeForTest(t)
	type args struct {
		txIn *types.TxIn
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr assert.ErrorAssertionFunc
	}{
		{
			name: "voteTxIn",
			args: args{
				txIn: &types.TxIn{
					Count: "1",
					Chain: "ETH",
					TxArray: []*types.TxInItem{
						{
							Tx:        "bc7492b7900c180ef6acd7913e7aca4fc5d42b014ae8ebf24ea722af515b64d4",
							Memo:      "",
							TxInType:  0,
							FromChain: big.NewInt(11155111),
							ToChain:   big.NewInt(0),
							Height:    big.NewInt(8817015),
							Amount:    big.NewInt(1000000000000000),
							OrderId:   ecommon.HexToHash("8e9d1a39a966715be186c733c1415bea0a9aa3674fa93a0588692f82f9dac630"),
							GasUsed:   nil,
							Token:     ecommon.Hex2Bytes("0000000000000000000000000000000000000000"),
							Vault:     ecommon.Hex2Bytes("32be87e4f4f0afc5af562eff95c508ef07484f06"),
							To:        ecommon.Hex2Bytes("0cdae5da23b64bfecd421d6487ffeabf6558828d"),
							Method:    "voteTxIn",
						},
					},
					Filtered:               false,
					MemPool:                false,
					ConfirmationRequired:   14,
					AllowFutureObservation: false,
				},
			},
			want:    ecommon.Hex2Bytes("7b2274797065223a22307832222c22636861696e4964223a2230786434222c226e6f6e6365223a22307863222c22746f223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c22676173223a22307836306434222c226761735072696365223a6e756c6c2c226d61785072696f72697479466565506572476173223a223078323534306265343030222c226d6178466565506572476173223a22307831373438373665383030222c2276616c7565223a22307830222c22696e707574223ac226163636573734c697374223a5b5d2c2276223a22307830222c2272223a22307834396333616161646337646266323434653766303037396533363537623363363134356261636665616637336336663665343262633063393839666432346666222c2273223a22307833353464353636363436393638346134643637383261386365343330396433383939396338343033633737373664636161306161353866633734633931373038222c2279506172697479223a22307830222c2268617368223a22307862393766343061666338353534393739306164343832613135613831343534393162613333613337393530343039363063626566356439333134306535323738227d"),
			wantErr: nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := b.GetObservationsStdTx(tt.args.txIn)
			if !assert.Nil(t, err) {
				return
			}
			fmt.Println("=====")
			fmt.Println(ecommon.Bytes2Hex(got))
			assert.Equalf(t, tt.want, got, "GetObservationsStdTx(%v)", tt.args.txIn)
		})
	}
}
