package mapo

import (
	"fmt"
	"math/big"
	"testing"

	ecommon "github.com/ethereum/go-ethereum/common"
	"github.com/mapprotocol/compass-tss/mapclient/types"
	"github.com/stretchr/testify/assert"
)

func TestBridge_GetObservationsStdTx(t *testing.T) {
	b := getBridgeForTest(t)
	type args struct {
		txIn *types.TxIn
	}
	amount, _ := big.NewInt(0).SetString("1000000000000000000000", 10)
	chainAndGasLimit, _ := big.NewInt(0).SetString("608878868332508034092071574051143642361928478113011347750912", 10)
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr assert.ErrorAssertionFunc
	}{
		{
			name: "voteTxIn",
			args: args{
				txIn: &types.TxIn{
					Count: "1",
					Chain: "BSC",
					TxArray: []*types.TxInItem{
						{
							FromChain:        big.NewInt(97),
							Height:           big.NewInt(68901869),
							OrderId:          ecommon.HexToHash("8e9d1a39a966715be186c733c1415bea0a9aa3674fa93a0588692f82f9dac630"),
							Method:           "voteTxIn",
							RefundAddr:       []byte{12, 218, 229, 218, 35, 182, 75, 254, 205, 66, 29, 100, 135, 255, 234, 191, 101, 88, 130, 141},
							ChainAndGasLimit: chainAndGasLimit,
							Vault:            []byte{176, 165, 179, 158, 173, 6, 255, 222, 104, 72, 130, 37, 50, 249, 163, 76, 74, 179, 80, 250, 36, 30, 9, 100, 97, 102, 171, 212, 227, 131, 107, 210, 200, 231, 168, 59, 244, 199, 207, 145, 249, 33, 224, 103, 25, 217, 73, 65, 253, 83, 171, 20, 134, 254, 47, 232, 211, 148, 131, 63, 236, 185, 213, 71},
							Amount:           amount,
							TxOutType:        0,
							Tx:               "0x9da07c42d0fee93ed0ee61a18b34cff1ad781c55a6c90f2a6e2a09652c70c6a7",
							Sequence:         big.NewInt(0),
							Token:            ecommon.Hex2Bytes("2bad3a39a4a793a8abc466850e103b524ff68eec"),
							From:             ecommon.Hex2Bytes("0cdae5da23b64bfecd421d6487ffeabf6558828d"),
							To:               ecommon.Hex2Bytes("0000000000000000000000000cdae5da23b64bfecd421d6487ffeabf6558828d"),
						},
					},
					Filtered:               false,
					MemPool:                false,
					ConfirmationRequired:   14,
					AllowFutureObservation: false,
					Method:                 "voteTxIn",
				},
			},
			want:    ecommon.Hex2Bytes("7b2274797065223a22307832222c22636861696e4964223a2230786434222c226e6f6e6365223a22307831343133222c22746f223a22307830303030303030303030303030303030303030303030303030303030303030303030303030303030222c22676173223a22307836613038222c226761735072696365223a6e756c6c2c226d61785072696f72697479466565506572476173223a223078323534306265343030222c226d6178466565506572476173223a22307831373438373665383030222c2276616c7565223a22307830222c22696e707574223ac226163636573734c697374223a5b5d2c2276223a22307831222c2272223a22307864326435373337383738376637353865353364626432393334363832643834303839613939313833613830383535316437613039616463386461373037386336222c2273223a22307834336435636661326666393362333666343035356136313039356530326662316537663738323333383338636439626261363162666538333734376630626366222c2279506172697479223a22307831222c2268617368223a22307839363732653262386663663961626131353636633365643336383464346138333039343561643439396461363638643432653063396364316339306133613634227d"),
			wantErr: nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := b.GetObservationsStdTx(tt.args.txIn)
			if !assert.Nil(t, err) {
				return
			}
			fmt.Println("=====")
			fmt.Println(ecommon.Bytes2Hex(got))
			assert.Equalf(t, tt.want, got, "GetObservationsStdTx(%v)", tt.args.txIn)
		})
	}
}
