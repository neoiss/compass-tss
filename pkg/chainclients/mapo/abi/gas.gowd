// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package relay

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// RelayMetaData contains all meta data concerning the Relay contract.
var RelayMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AccessManagedInvalidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"AccessManagedRequiredDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessManagedUnauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"no_access\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionSizeWithCall\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionRate\",\"type\":\"uint256\"}],\"name\":\"PostNetworkFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_periphery\",\"type\":\"address\"}],\"name\":\"SetPeriphery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"SetSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainNetworkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionSizeWithCall\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withCall\",\"type\":\"bool\"}],\"name\":\"getNetworkFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"}],\"name\":\"getNetworkFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionSizeWithCall\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withCall\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getNetworkFeeWithToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isConsumingScheduledOp\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periphery\",\"outputs\":[{\"internalType\":\"contractIPeriphery\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionSizeWithCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionRate\",\"type\":\"uint256\"}],\"name\":\"postNetworkFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_periphery\",\"type\":\"address\"}],\"name\":\"setPeriphery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"setSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"contractISwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
}

// RelayABI is the input ABI used to generate the binding from.
// Deprecated: Use RelayMetaData.ABI instead.
var RelayABI = RelayMetaData.ABI

// Relay is an auto generated Go binding around an Ethereum contract.
type Relay struct {
	RelayCaller     // Read-only binding to the contract
	RelayTransactor // Write-only binding to the contract
	RelayFilterer   // Log filterer for contract events
}

// RelayCaller is an auto generated read-only Go binding around an Ethereum contract.
type RelayCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RelayTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RelayTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RelayFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RelayFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RelaySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RelaySession struct {
	Contract     *Relay            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RelayCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RelayCallerSession struct {
	Contract *RelayCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// RelayTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RelayTransactorSession struct {
	Contract     *RelayTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RelayRaw is an auto generated low-level Go binding around an Ethereum contract.
type RelayRaw struct {
	Contract *Relay // Generic contract binding to access the raw methods on
}

// RelayCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RelayCallerRaw struct {
	Contract *RelayCaller // Generic read-only contract binding to access the raw methods on
}

// RelayTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RelayTransactorRaw struct {
	Contract *RelayTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRelay creates a new instance of Relay, bound to a specific deployed contract.
func NewRelay(address common.Address, backend bind.ContractBackend) (*Relay, error) {
	contract, err := bindRelay(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Relay{RelayCaller: RelayCaller{contract: contract}, RelayTransactor: RelayTransactor{contract: contract}, RelayFilterer: RelayFilterer{contract: contract}}, nil
}

// NewRelayCaller creates a new read-only instance of Relay, bound to a specific deployed contract.
func NewRelayCaller(address common.Address, caller bind.ContractCaller) (*RelayCaller, error) {
	contract, err := bindRelay(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RelayCaller{contract: contract}, nil
}

// NewRelayTransactor creates a new write-only instance of Relay, bound to a specific deployed contract.
func NewRelayTransactor(address common.Address, transactor bind.ContractTransactor) (*RelayTransactor, error) {
	contract, err := bindRelay(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RelayTransactor{contract: contract}, nil
}

// NewRelayFilterer creates a new log filterer instance of Relay, bound to a specific deployed contract.
func NewRelayFilterer(address common.Address, filterer bind.ContractFilterer) (*RelayFilterer, error) {
	contract, err := bindRelay(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RelayFilterer{contract: contract}, nil
}

// bindRelay binds a generic wrapper to an already deployed contract.
func bindRelay(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RelayMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Relay *RelayRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Relay.Contract.RelayCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Relay *RelayRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Relay.Contract.RelayTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Relay *RelayRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Relay.Contract.RelayTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Relay *RelayCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Relay.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Relay *RelayTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Relay.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Relay *RelayTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Relay.Contract.contract.Transact(opts, method, params...)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_Relay *RelayCaller) UPGRADEINTERFACEVERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "UPGRADE_INTERFACE_VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_Relay *RelaySession) UPGRADEINTERFACEVERSION() (string, error) {
	return _Relay.Contract.UPGRADEINTERFACEVERSION(&_Relay.CallOpts)
}

// UPGRADEINTERFACEVERSION is a free data retrieval call binding the contract method 0xad3cb1cc.
//
// Solidity: function UPGRADE_INTERFACE_VERSION() view returns(string)
func (_Relay *RelayCallerSession) UPGRADEINTERFACEVERSION() (string, error) {
	return _Relay.Contract.UPGRADEINTERFACEVERSION(&_Relay.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Relay *RelayCaller) Authority(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "authority")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Relay *RelaySession) Authority() (common.Address, error) {
	return _Relay.Contract.Authority(&_Relay.CallOpts)
}

// Authority is a free data retrieval call binding the contract method 0xbf7e214f.
//
// Solidity: function authority() view returns(address)
func (_Relay *RelayCallerSession) Authority() (common.Address, error) {
	return _Relay.Contract.Authority(&_Relay.CallOpts)
}

// ChainNetworkFee is a free data retrieval call binding the contract method 0x9471b5ac.
//
// Solidity: function chainNetworkFee(uint256 ) view returns(uint256 height, uint256 transactionRate, uint256 transactionSize, uint256 transactionSizeWithCall)
func (_Relay *RelayCaller) ChainNetworkFee(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Height                  *big.Int
	TransactionRate         *big.Int
	TransactionSize         *big.Int
	TransactionSizeWithCall *big.Int
}, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "chainNetworkFee", arg0)

	outstruct := new(struct {
		Height                  *big.Int
		TransactionRate         *big.Int
		TransactionSize         *big.Int
		TransactionSizeWithCall *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Height = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TransactionRate = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TransactionSize = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.TransactionSizeWithCall = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ChainNetworkFee is a free data retrieval call binding the contract method 0x9471b5ac.
//
// Solidity: function chainNetworkFee(uint256 ) view returns(uint256 height, uint256 transactionRate, uint256 transactionSize, uint256 transactionSizeWithCall)
func (_Relay *RelaySession) ChainNetworkFee(arg0 *big.Int) (struct {
	Height                  *big.Int
	TransactionRate         *big.Int
	TransactionSize         *big.Int
	TransactionSizeWithCall *big.Int
}, error) {
	return _Relay.Contract.ChainNetworkFee(&_Relay.CallOpts, arg0)
}

// ChainNetworkFee is a free data retrieval call binding the contract method 0x9471b5ac.
//
// Solidity: function chainNetworkFee(uint256 ) view returns(uint256 height, uint256 transactionRate, uint256 transactionSize, uint256 transactionSizeWithCall)
func (_Relay *RelayCallerSession) ChainNetworkFee(arg0 *big.Int) (struct {
	Height                  *big.Int
	TransactionRate         *big.Int
	TransactionSize         *big.Int
	TransactionSizeWithCall *big.Int
}, error) {
	return _Relay.Contract.ChainNetworkFee(&_Relay.CallOpts, arg0)
}

// GetImplementation is a free data retrieval call binding the contract method 0xaaf10f42.
//
// Solidity: function getImplementation() view returns(address)
func (_Relay *RelayCaller) GetImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "getImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetImplementation is a free data retrieval call binding the contract method 0xaaf10f42.
//
// Solidity: function getImplementation() view returns(address)
func (_Relay *RelaySession) GetImplementation() (common.Address, error) {
	return _Relay.Contract.GetImplementation(&_Relay.CallOpts)
}

// GetImplementation is a free data retrieval call binding the contract method 0xaaf10f42.
//
// Solidity: function getImplementation() view returns(address)
func (_Relay *RelayCallerSession) GetImplementation() (common.Address, error) {
	return _Relay.Contract.GetImplementation(&_Relay.CallOpts)
}

// GetNetworkFee is a free data retrieval call binding the contract method 0x1c442c1e.
//
// Solidity: function getNetworkFee(uint256 chain, bool withCall) view returns(uint256 networkFee)
func (_Relay *RelayCaller) GetNetworkFee(opts *bind.CallOpts, chain *big.Int, withCall bool) (*big.Int, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "getNetworkFee", chain, withCall)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNetworkFee is a free data retrieval call binding the contract method 0x1c442c1e.
//
// Solidity: function getNetworkFee(uint256 chain, bool withCall) view returns(uint256 networkFee)
func (_Relay *RelaySession) GetNetworkFee(chain *big.Int, withCall bool) (*big.Int, error) {
	return _Relay.Contract.GetNetworkFee(&_Relay.CallOpts, chain, withCall)
}

// GetNetworkFee is a free data retrieval call binding the contract method 0x1c442c1e.
//
// Solidity: function getNetworkFee(uint256 chain, bool withCall) view returns(uint256 networkFee)
func (_Relay *RelayCallerSession) GetNetworkFee(chain *big.Int, withCall bool) (*big.Int, error) {
	return _Relay.Contract.GetNetworkFee(&_Relay.CallOpts, chain, withCall)
}

// GetNetworkFeeInfo is a free data retrieval call binding the contract method 0xf95266e8.
//
// Solidity: function getNetworkFeeInfo(uint256 chain) view returns(uint256 transactionRate, uint256 transactionSize, uint256 transactionSizeWithCall)
func (_Relay *RelayCaller) GetNetworkFeeInfo(opts *bind.CallOpts, chain *big.Int) (struct {
	TransactionRate         *big.Int
	TransactionSize         *big.Int
	TransactionSizeWithCall *big.Int
}, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "getNetworkFeeInfo", chain)

	outstruct := new(struct {
		TransactionRate         *big.Int
		TransactionSize         *big.Int
		TransactionSizeWithCall *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TransactionRate = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TransactionSize = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TransactionSizeWithCall = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetNetworkFeeInfo is a free data retrieval call binding the contract method 0xf95266e8.
//
// Solidity: function getNetworkFeeInfo(uint256 chain) view returns(uint256 transactionRate, uint256 transactionSize, uint256 transactionSizeWithCall)
func (_Relay *RelaySession) GetNetworkFeeInfo(chain *big.Int) (struct {
	TransactionRate         *big.Int
	TransactionSize         *big.Int
	TransactionSizeWithCall *big.Int
}, error) {
	return _Relay.Contract.GetNetworkFeeInfo(&_Relay.CallOpts, chain)
}

// GetNetworkFeeInfo is a free data retrieval call binding the contract method 0xf95266e8.
//
// Solidity: function getNetworkFeeInfo(uint256 chain) view returns(uint256 transactionRate, uint256 transactionSize, uint256 transactionSizeWithCall)
func (_Relay *RelayCallerSession) GetNetworkFeeInfo(chain *big.Int) (struct {
	TransactionRate         *big.Int
	TransactionSize         *big.Int
	TransactionSizeWithCall *big.Int
}, error) {
	return _Relay.Contract.GetNetworkFeeInfo(&_Relay.CallOpts, chain)
}

// GetNetworkFeeWithToken is a free data retrieval call binding the contract method 0xe1d800f9.
//
// Solidity: function getNetworkFeeWithToken(uint256 chain, bool withCall, address token) view returns(uint256 networkFee)
func (_Relay *RelayCaller) GetNetworkFeeWithToken(opts *bind.CallOpts, chain *big.Int, withCall bool, token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "getNetworkFeeWithToken", chain, withCall, token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNetworkFeeWithToken is a free data retrieval call binding the contract method 0xe1d800f9.
//
// Solidity: function getNetworkFeeWithToken(uint256 chain, bool withCall, address token) view returns(uint256 networkFee)
func (_Relay *RelaySession) GetNetworkFeeWithToken(chain *big.Int, withCall bool, token common.Address) (*big.Int, error) {
	return _Relay.Contract.GetNetworkFeeWithToken(&_Relay.CallOpts, chain, withCall, token)
}

// GetNetworkFeeWithToken is a free data retrieval call binding the contract method 0xe1d800f9.
//
// Solidity: function getNetworkFeeWithToken(uint256 chain, bool withCall, address token) view returns(uint256 networkFee)
func (_Relay *RelayCallerSession) GetNetworkFeeWithToken(chain *big.Int, withCall bool, token common.Address) (*big.Int, error) {
	return _Relay.Contract.GetNetworkFeeWithToken(&_Relay.CallOpts, chain, withCall, token)
}

// IsConsumingScheduledOp is a free data retrieval call binding the contract method 0x8fb36037.
//
// Solidity: function isConsumingScheduledOp() view returns(bytes4)
func (_Relay *RelayCaller) IsConsumingScheduledOp(opts *bind.CallOpts) ([4]byte, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "isConsumingScheduledOp")

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// IsConsumingScheduledOp is a free data retrieval call binding the contract method 0x8fb36037.
//
// Solidity: function isConsumingScheduledOp() view returns(bytes4)
func (_Relay *RelaySession) IsConsumingScheduledOp() ([4]byte, error) {
	return _Relay.Contract.IsConsumingScheduledOp(&_Relay.CallOpts)
}

// IsConsumingScheduledOp is a free data retrieval call binding the contract method 0x8fb36037.
//
// Solidity: function isConsumingScheduledOp() view returns(bytes4)
func (_Relay *RelayCallerSession) IsConsumingScheduledOp() ([4]byte, error) {
	return _Relay.Contract.IsConsumingScheduledOp(&_Relay.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Relay *RelayCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Relay *RelaySession) Paused() (bool, error) {
	return _Relay.Contract.Paused(&_Relay.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Relay *RelayCallerSession) Paused() (bool, error) {
	return _Relay.Contract.Paused(&_Relay.CallOpts)
}

// Periphery is a free data retrieval call binding the contract method 0x77aace1a.
//
// Solidity: function periphery() view returns(address)
func (_Relay *RelayCaller) Periphery(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "periphery")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Periphery is a free data retrieval call binding the contract method 0x77aace1a.
//
// Solidity: function periphery() view returns(address)
func (_Relay *RelaySession) Periphery() (common.Address, error) {
	return _Relay.Contract.Periphery(&_Relay.CallOpts)
}

// Periphery is a free data retrieval call binding the contract method 0x77aace1a.
//
// Solidity: function periphery() view returns(address)
func (_Relay *RelayCallerSession) Periphery() (common.Address, error) {
	return _Relay.Contract.Periphery(&_Relay.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Relay *RelayCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Relay *RelaySession) ProxiableUUID() ([32]byte, error) {
	return _Relay.Contract.ProxiableUUID(&_Relay.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Relay *RelayCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Relay.Contract.ProxiableUUID(&_Relay.CallOpts)
}

// Swap is a free data retrieval call binding the contract method 0x8119c065.
//
// Solidity: function swap() view returns(address)
func (_Relay *RelayCaller) Swap(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Relay.contract.Call(opts, &out, "swap")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Swap is a free data retrieval call binding the contract method 0x8119c065.
//
// Solidity: function swap() view returns(address)
func (_Relay *RelaySession) Swap() (common.Address, error) {
	return _Relay.Contract.Swap(&_Relay.CallOpts)
}

// Swap is a free data retrieval call binding the contract method 0x8119c065.
//
// Solidity: function swap() view returns(address)
func (_Relay *RelayCallerSession) Swap() (common.Address, error) {
	return _Relay.Contract.Swap(&_Relay.CallOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _defaultAdmin) returns()
func (_Relay *RelayTransactor) Initialize(opts *bind.TransactOpts, _defaultAdmin common.Address) (*types.Transaction, error) {
	return _Relay.contract.Transact(opts, "initialize", _defaultAdmin)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _defaultAdmin) returns()
func (_Relay *RelaySession) Initialize(_defaultAdmin common.Address) (*types.Transaction, error) {
	return _Relay.Contract.Initialize(&_Relay.TransactOpts, _defaultAdmin)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _defaultAdmin) returns()
func (_Relay *RelayTransactorSession) Initialize(_defaultAdmin common.Address) (*types.Transaction, error) {
	return _Relay.Contract.Initialize(&_Relay.TransactOpts, _defaultAdmin)
}

// PostNetworkFee is a paid mutator transaction binding the contract method 0x3ccf9acf.
//
// Solidity: function postNetworkFee(uint256 chain, uint256 height, uint256 transactionSize, uint256 transactionSizeWithCall, uint256 transactionRate) returns()
func (_Relay *RelayTransactor) PostNetworkFee(opts *bind.TransactOpts, chain *big.Int, height *big.Int, transactionSize *big.Int, transactionSizeWithCall *big.Int, transactionRate *big.Int) (*types.Transaction, error) {
	return _Relay.contract.Transact(opts, "postNetworkFee", chain, height, transactionSize, transactionSizeWithCall, transactionRate)
}

// PostNetworkFee is a paid mutator transaction binding the contract method 0x3ccf9acf.
//
// Solidity: function postNetworkFee(uint256 chain, uint256 height, uint256 transactionSize, uint256 transactionSizeWithCall, uint256 transactionRate) returns()
func (_Relay *RelaySession) PostNetworkFee(chain *big.Int, height *big.Int, transactionSize *big.Int, transactionSizeWithCall *big.Int, transactionRate *big.Int) (*types.Transaction, error) {
	return _Relay.Contract.PostNetworkFee(&_Relay.TransactOpts, chain, height, transactionSize, transactionSizeWithCall, transactionRate)
}

// PostNetworkFee is a paid mutator transaction binding the contract method 0x3ccf9acf.
//
// Solidity: function postNetworkFee(uint256 chain, uint256 height, uint256 transactionSize, uint256 transactionSizeWithCall, uint256 transactionRate) returns()
func (_Relay *RelayTransactorSession) PostNetworkFee(chain *big.Int, height *big.Int, transactionSize *big.Int, transactionSizeWithCall *big.Int, transactionRate *big.Int) (*types.Transaction, error) {
	return _Relay.Contract.PostNetworkFee(&_Relay.TransactOpts, chain, height, transactionSize, transactionSizeWithCall, transactionRate)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address newAuthority) returns()
func (_Relay *RelayTransactor) SetAuthority(opts *bind.TransactOpts, newAuthority common.Address) (*types.Transaction, error) {
	return _Relay.contract.Transact(opts, "setAuthority", newAuthority)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address newAuthority) returns()
func (_Relay *RelaySession) SetAuthority(newAuthority common.Address) (*types.Transaction, error) {
	return _Relay.Contract.SetAuthority(&_Relay.TransactOpts, newAuthority)
}

// SetAuthority is a paid mutator transaction binding the contract method 0x7a9e5e4b.
//
// Solidity: function setAuthority(address newAuthority) returns()
func (_Relay *RelayTransactorSession) SetAuthority(newAuthority common.Address) (*types.Transaction, error) {
	return _Relay.Contract.SetAuthority(&_Relay.TransactOpts, newAuthority)
}

// SetPeriphery is a paid mutator transaction binding the contract method 0xaeb22934.
//
// Solidity: function setPeriphery(address _periphery) returns()
func (_Relay *RelayTransactor) SetPeriphery(opts *bind.TransactOpts, _periphery common.Address) (*types.Transaction, error) {
	return _Relay.contract.Transact(opts, "setPeriphery", _periphery)
}

// SetPeriphery is a paid mutator transaction binding the contract method 0xaeb22934.
//
// Solidity: function setPeriphery(address _periphery) returns()
func (_Relay *RelaySession) SetPeriphery(_periphery common.Address) (*types.Transaction, error) {
	return _Relay.Contract.SetPeriphery(&_Relay.TransactOpts, _periphery)
}

// SetPeriphery is a paid mutator transaction binding the contract method 0xaeb22934.
//
// Solidity: function setPeriphery(address _periphery) returns()
func (_Relay *RelayTransactorSession) SetPeriphery(_periphery common.Address) (*types.Transaction, error) {
	return _Relay.Contract.SetPeriphery(&_Relay.TransactOpts, _periphery)
}

// SetSwap is a paid mutator transaction binding the contract method 0xacb3c073.
//
// Solidity: function setSwap(address _swap) returns()
func (_Relay *RelayTransactor) SetSwap(opts *bind.TransactOpts, _swap common.Address) (*types.Transaction, error) {
	return _Relay.contract.Transact(opts, "setSwap", _swap)
}

// SetSwap is a paid mutator transaction binding the contract method 0xacb3c073.
//
// Solidity: function setSwap(address _swap) returns()
func (_Relay *RelaySession) SetSwap(_swap common.Address) (*types.Transaction, error) {
	return _Relay.Contract.SetSwap(&_Relay.TransactOpts, _swap)
}

// SetSwap is a paid mutator transaction binding the contract method 0xacb3c073.
//
// Solidity: function setSwap(address _swap) returns()
func (_Relay *RelayTransactorSession) SetSwap(_swap common.Address) (*types.Transaction, error) {
	return _Relay.Contract.SetSwap(&_Relay.TransactOpts, _swap)
}

// Trigger is a paid mutator transaction binding the contract method 0x7fec8d38.
//
// Solidity: function trigger() returns()
func (_Relay *RelayTransactor) Trigger(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Relay.contract.Transact(opts, "trigger")
}

// Trigger is a paid mutator transaction binding the contract method 0x7fec8d38.
//
// Solidity: function trigger() returns()
func (_Relay *RelaySession) Trigger() (*types.Transaction, error) {
	return _Relay.Contract.Trigger(&_Relay.TransactOpts)
}

// Trigger is a paid mutator transaction binding the contract method 0x7fec8d38.
//
// Solidity: function trigger() returns()
func (_Relay *RelayTransactorSession) Trigger() (*types.Transaction, error) {
	return _Relay.Contract.Trigger(&_Relay.TransactOpts)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Relay *RelayTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Relay.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Relay *RelaySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Relay.Contract.UpgradeToAndCall(&_Relay.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Relay *RelayTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Relay.Contract.UpgradeToAndCall(&_Relay.TransactOpts, newImplementation, data)
}

// RelayAuthorityUpdatedIterator is returned from FilterAuthorityUpdated and is used to iterate over the raw logs and unpacked data for AuthorityUpdated events raised by the Relay contract.
type RelayAuthorityUpdatedIterator struct {
	Event *RelayAuthorityUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RelayAuthorityUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RelayAuthorityUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RelayAuthorityUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RelayAuthorityUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RelayAuthorityUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RelayAuthorityUpdated represents a AuthorityUpdated event raised by the Relay contract.
type RelayAuthorityUpdated struct {
	Authority common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAuthorityUpdated is a free log retrieval operation binding the contract event 0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad.
//
// Solidity: event AuthorityUpdated(address authority)
func (_Relay *RelayFilterer) FilterAuthorityUpdated(opts *bind.FilterOpts) (*RelayAuthorityUpdatedIterator, error) {

	logs, sub, err := _Relay.contract.FilterLogs(opts, "AuthorityUpdated")
	if err != nil {
		return nil, err
	}
	return &RelayAuthorityUpdatedIterator{contract: _Relay.contract, event: "AuthorityUpdated", logs: logs, sub: sub}, nil
}

// WatchAuthorityUpdated is a free log subscription operation binding the contract event 0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad.
//
// Solidity: event AuthorityUpdated(address authority)
func (_Relay *RelayFilterer) WatchAuthorityUpdated(opts *bind.WatchOpts, sink chan<- *RelayAuthorityUpdated) (event.Subscription, error) {

	logs, sub, err := _Relay.contract.WatchLogs(opts, "AuthorityUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RelayAuthorityUpdated)
				if err := _Relay.contract.UnpackLog(event, "AuthorityUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorityUpdated is a log parse operation binding the contract event 0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad.
//
// Solidity: event AuthorityUpdated(address authority)
func (_Relay *RelayFilterer) ParseAuthorityUpdated(log types.Log) (*RelayAuthorityUpdated, error) {
	event := new(RelayAuthorityUpdated)
	if err := _Relay.contract.UnpackLog(event, "AuthorityUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RelayInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Relay contract.
type RelayInitializedIterator struct {
	Event *RelayInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RelayInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RelayInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RelayInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RelayInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RelayInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RelayInitialized represents a Initialized event raised by the Relay contract.
type RelayInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Relay *RelayFilterer) FilterInitialized(opts *bind.FilterOpts) (*RelayInitializedIterator, error) {

	logs, sub, err := _Relay.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RelayInitializedIterator{contract: _Relay.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Relay *RelayFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RelayInitialized) (event.Subscription, error) {

	logs, sub, err := _Relay.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RelayInitialized)
				if err := _Relay.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_Relay *RelayFilterer) ParseInitialized(log types.Log) (*RelayInitialized, error) {
	event := new(RelayInitialized)
	if err := _Relay.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RelayPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Relay contract.
type RelayPausedIterator struct {
	Event *RelayPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RelayPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RelayPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RelayPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RelayPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RelayPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RelayPaused represents a Paused event raised by the Relay contract.
type RelayPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Relay *RelayFilterer) FilterPaused(opts *bind.FilterOpts) (*RelayPausedIterator, error) {

	logs, sub, err := _Relay.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &RelayPausedIterator{contract: _Relay.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Relay *RelayFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *RelayPaused) (event.Subscription, error) {

	logs, sub, err := _Relay.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RelayPaused)
				if err := _Relay.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Relay *RelayFilterer) ParsePaused(log types.Log) (*RelayPaused, error) {
	event := new(RelayPaused)
	if err := _Relay.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RelayPostNetworkFeeIterator is returned from FilterPostNetworkFee and is used to iterate over the raw logs and unpacked data for PostNetworkFee events raised by the Relay contract.
type RelayPostNetworkFeeIterator struct {
	Event *RelayPostNetworkFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RelayPostNetworkFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RelayPostNetworkFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RelayPostNetworkFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RelayPostNetworkFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RelayPostNetworkFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RelayPostNetworkFee represents a PostNetworkFee event raised by the Relay contract.
type RelayPostNetworkFee struct {
	Chain                   *big.Int
	Height                  *big.Int
	TransactionSize         *big.Int
	TransactionSizeWithCall *big.Int
	TransactionRate         *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterPostNetworkFee is a free log retrieval operation binding the contract event 0x17478a9546510e5580839cc9bd6840a7d8eaa55317a3e7d55e1584afd75cb6b4.
//
// Solidity: event PostNetworkFee(uint256 chain, uint256 height, uint256 transactionSize, uint256 transactionSizeWithCall, uint256 transactionRate)
func (_Relay *RelayFilterer) FilterPostNetworkFee(opts *bind.FilterOpts) (*RelayPostNetworkFeeIterator, error) {

	logs, sub, err := _Relay.contract.FilterLogs(opts, "PostNetworkFee")
	if err != nil {
		return nil, err
	}
	return &RelayPostNetworkFeeIterator{contract: _Relay.contract, event: "PostNetworkFee", logs: logs, sub: sub}, nil
}

// WatchPostNetworkFee is a free log subscription operation binding the contract event 0x17478a9546510e5580839cc9bd6840a7d8eaa55317a3e7d55e1584afd75cb6b4.
//
// Solidity: event PostNetworkFee(uint256 chain, uint256 height, uint256 transactionSize, uint256 transactionSizeWithCall, uint256 transactionRate)
func (_Relay *RelayFilterer) WatchPostNetworkFee(opts *bind.WatchOpts, sink chan<- *RelayPostNetworkFee) (event.Subscription, error) {

	logs, sub, err := _Relay.contract.WatchLogs(opts, "PostNetworkFee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RelayPostNetworkFee)
				if err := _Relay.contract.UnpackLog(event, "PostNetworkFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePostNetworkFee is a log parse operation binding the contract event 0x17478a9546510e5580839cc9bd6840a7d8eaa55317a3e7d55e1584afd75cb6b4.
//
// Solidity: event PostNetworkFee(uint256 chain, uint256 height, uint256 transactionSize, uint256 transactionSizeWithCall, uint256 transactionRate)
func (_Relay *RelayFilterer) ParsePostNetworkFee(log types.Log) (*RelayPostNetworkFee, error) {
	event := new(RelayPostNetworkFee)
	if err := _Relay.contract.UnpackLog(event, "PostNetworkFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RelaySetPeripheryIterator is returned from FilterSetPeriphery and is used to iterate over the raw logs and unpacked data for SetPeriphery events raised by the Relay contract.
type RelaySetPeripheryIterator struct {
	Event *RelaySetPeriphery // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RelaySetPeripheryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RelaySetPeriphery)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RelaySetPeriphery)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RelaySetPeripheryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RelaySetPeripheryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RelaySetPeriphery represents a SetPeriphery event raised by the Relay contract.
type RelaySetPeriphery struct {
	Periphery common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSetPeriphery is a free log retrieval operation binding the contract event 0xb62d2ad211763879f4b426c82f30fda8ef562b3aedf50e09ae9aa33dbf4b82f3.
//
// Solidity: event SetPeriphery(address _periphery)
func (_Relay *RelayFilterer) FilterSetPeriphery(opts *bind.FilterOpts) (*RelaySetPeripheryIterator, error) {

	logs, sub, err := _Relay.contract.FilterLogs(opts, "SetPeriphery")
	if err != nil {
		return nil, err
	}
	return &RelaySetPeripheryIterator{contract: _Relay.contract, event: "SetPeriphery", logs: logs, sub: sub}, nil
}

// WatchSetPeriphery is a free log subscription operation binding the contract event 0xb62d2ad211763879f4b426c82f30fda8ef562b3aedf50e09ae9aa33dbf4b82f3.
//
// Solidity: event SetPeriphery(address _periphery)
func (_Relay *RelayFilterer) WatchSetPeriphery(opts *bind.WatchOpts, sink chan<- *RelaySetPeriphery) (event.Subscription, error) {

	logs, sub, err := _Relay.contract.WatchLogs(opts, "SetPeriphery")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RelaySetPeriphery)
				if err := _Relay.contract.UnpackLog(event, "SetPeriphery", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetPeriphery is a log parse operation binding the contract event 0xb62d2ad211763879f4b426c82f30fda8ef562b3aedf50e09ae9aa33dbf4b82f3.
//
// Solidity: event SetPeriphery(address _periphery)
func (_Relay *RelayFilterer) ParseSetPeriphery(log types.Log) (*RelaySetPeriphery, error) {
	event := new(RelaySetPeriphery)
	if err := _Relay.contract.UnpackLog(event, "SetPeriphery", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RelaySetSwapIterator is returned from FilterSetSwap and is used to iterate over the raw logs and unpacked data for SetSwap events raised by the Relay contract.
type RelaySetSwapIterator struct {
	Event *RelaySetSwap // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RelaySetSwapIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RelaySetSwap)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RelaySetSwap)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RelaySetSwapIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RelaySetSwapIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RelaySetSwap represents a SetSwap event raised by the Relay contract.
type RelaySetSwap struct {
	Swap common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterSetSwap is a free log retrieval operation binding the contract event 0x0640d773eb4eb9fe289b6fbb8bf82f5418820ce8a52592a70358dba1a9781655.
//
// Solidity: event SetSwap(address _swap)
func (_Relay *RelayFilterer) FilterSetSwap(opts *bind.FilterOpts) (*RelaySetSwapIterator, error) {

	logs, sub, err := _Relay.contract.FilterLogs(opts, "SetSwap")
	if err != nil {
		return nil, err
	}
	return &RelaySetSwapIterator{contract: _Relay.contract, event: "SetSwap", logs: logs, sub: sub}, nil
}

// WatchSetSwap is a free log subscription operation binding the contract event 0x0640d773eb4eb9fe289b6fbb8bf82f5418820ce8a52592a70358dba1a9781655.
//
// Solidity: event SetSwap(address _swap)
func (_Relay *RelayFilterer) WatchSetSwap(opts *bind.WatchOpts, sink chan<- *RelaySetSwap) (event.Subscription, error) {

	logs, sub, err := _Relay.contract.WatchLogs(opts, "SetSwap")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RelaySetSwap)
				if err := _Relay.contract.UnpackLog(event, "SetSwap", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetSwap is a log parse operation binding the contract event 0x0640d773eb4eb9fe289b6fbb8bf82f5418820ce8a52592a70358dba1a9781655.
//
// Solidity: event SetSwap(address _swap)
func (_Relay *RelayFilterer) ParseSetSwap(log types.Log) (*RelaySetSwap, error) {
	event := new(RelaySetSwap)
	if err := _Relay.contract.UnpackLog(event, "SetSwap", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RelayUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Relay contract.
type RelayUnpausedIterator struct {
	Event *RelayUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RelayUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RelayUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RelayUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RelayUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RelayUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RelayUnpaused represents a Unpaused event raised by the Relay contract.
type RelayUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Relay *RelayFilterer) FilterUnpaused(opts *bind.FilterOpts) (*RelayUnpausedIterator, error) {

	logs, sub, err := _Relay.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &RelayUnpausedIterator{contract: _Relay.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Relay *RelayFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *RelayUnpaused) (event.Subscription, error) {

	logs, sub, err := _Relay.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RelayUnpaused)
				if err := _Relay.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Relay *RelayFilterer) ParseUnpaused(log types.Log) (*RelayUnpaused, error) {
	event := new(RelayUnpaused)
	if err := _Relay.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RelayUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Relay contract.
type RelayUpgradedIterator struct {
	Event *RelayUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RelayUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RelayUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RelayUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RelayUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RelayUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RelayUpgraded represents a Upgraded event raised by the Relay contract.
type RelayUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Relay *RelayFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RelayUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Relay.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RelayUpgradedIterator{contract: _Relay.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Relay *RelayFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RelayUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Relay.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RelayUpgraded)
				if err := _Relay.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Relay *RelayFilterer) ParseUpgraded(log types.Log) (*RelayUpgraded, error) {
	event := new(RelayUpgraded)
	if err := _Relay.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
