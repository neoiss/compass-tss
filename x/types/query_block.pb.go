// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_block.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryBlockRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryBlockRequest) Reset()         { *m = QueryBlockRequest{} }
func (m *QueryBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBlockRequest) ProtoMessage()    {}
func (*QueryBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e70b18e52ebaa4c, []int{0}
}
func (m *QueryBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockRequest.Merge(m, src)
}
func (m *QueryBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockRequest proto.InternalMessageInfo

func (m *QueryBlockRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryBlockResponse struct {
	Id               *BlockResponseId     `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Header           *BlockResponseHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header"`
	BeginBlockEvents []*BlockEvent        `protobuf:"bytes,3,rep,name=begin_block_events,json=beginBlockEvents,proto3" json:"begin_block_events"`
	EndBlockEvents   []*BlockEvent        `protobuf:"bytes,4,rep,name=end_block_events,json=endBlockEvents,proto3" json:"end_block_events"`
	Txs              []*QueryBlockTx      `protobuf:"bytes,5,rep,name=txs,proto3" json:"txs"`
}

func (m *QueryBlockResponse) Reset()         { *m = QueryBlockResponse{} }
func (m *QueryBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBlockResponse) ProtoMessage()    {}
func (*QueryBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e70b18e52ebaa4c, []int{1}
}
func (m *QueryBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockResponse.Merge(m, src)
}
func (m *QueryBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockResponse proto.InternalMessageInfo

func (m *QueryBlockResponse) GetId() *BlockResponseId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *QueryBlockResponse) GetHeader() *BlockResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *QueryBlockResponse) GetBeginBlockEvents() []*BlockEvent {
	if m != nil {
		return m.BeginBlockEvents
	}
	return nil
}

func (m *QueryBlockResponse) GetEndBlockEvents() []*BlockEvent {
	if m != nil {
		return m.EndBlockEvents
	}
	return nil
}

func (m *QueryBlockResponse) GetTxs() []*QueryBlockTx {
	if m != nil {
		return m.Txs
	}
	return nil
}

type BlockResponseId struct {
	Hash  string                `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash"`
	Parts *BlockResponseIdParts `protobuf:"bytes,2,opt,name=parts,proto3" json:"parts"`
}

func (m *BlockResponseId) Reset()         { *m = BlockResponseId{} }
func (m *BlockResponseId) String() string { return proto.CompactTextString(m) }
func (*BlockResponseId) ProtoMessage()    {}
func (*BlockResponseId) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e70b18e52ebaa4c, []int{2}
}
func (m *BlockResponseId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResponseId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockResponseId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockResponseId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponseId.Merge(m, src)
}
func (m *BlockResponseId) XXX_Size() int {
	return m.Size()
}
func (m *BlockResponseId) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponseId.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponseId proto.InternalMessageInfo

func (m *BlockResponseId) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockResponseId) GetParts() *BlockResponseIdParts {
	if m != nil {
		return m.Parts
	}
	return nil
}

type BlockResponseIdParts struct {
	Total int64  `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Hash  string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash"`
}

func (m *BlockResponseIdParts) Reset()         { *m = BlockResponseIdParts{} }
func (m *BlockResponseIdParts) String() string { return proto.CompactTextString(m) }
func (*BlockResponseIdParts) ProtoMessage()    {}
func (*BlockResponseIdParts) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e70b18e52ebaa4c, []int{3}
}
func (m *BlockResponseIdParts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResponseIdParts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockResponseIdParts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockResponseIdParts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponseIdParts.Merge(m, src)
}
func (m *BlockResponseIdParts) XXX_Size() int {
	return m.Size()
}
func (m *BlockResponseIdParts) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponseIdParts.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponseIdParts proto.InternalMessageInfo

func (m *BlockResponseIdParts) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *BlockResponseIdParts) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type BlockResponseHeader struct {
	Version            *BlockResponseHeaderVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version"`
	ChainId            string                      `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id"`
	Height             int64                       `protobuf:"varint,3,opt,name=height,proto3" json:"height"`
	Time               string                      `protobuf:"bytes,4,opt,name=time,proto3" json:"time"`
	LastBlockId        *BlockResponseId            `protobuf:"bytes,5,opt,name=last_block_id,json=lastBlockId,proto3" json:"last_block_id"`
	LastCommitHash     string                      `protobuf:"bytes,6,opt,name=last_commit_hash,json=lastCommitHash,proto3" json:"last_commit_hash"`
	DataHash           string                      `protobuf:"bytes,7,opt,name=data_hash,json=dataHash,proto3" json:"data_hash"`
	ValidatorsHash     string                      `protobuf:"bytes,8,opt,name=validators_hash,json=validatorsHash,proto3" json:"validators_hash"`
	NextValidatorsHash string                      `protobuf:"bytes,9,opt,name=next_validators_hash,json=nextValidatorsHash,proto3" json:"next_validators_hash"`
	ConsensusHash      string                      `protobuf:"bytes,10,opt,name=consensus_hash,json=consensusHash,proto3" json:"consensus_hash"`
	AppHash            string                      `protobuf:"bytes,11,opt,name=app_hash,json=appHash,proto3" json:"app_hash"`
	LastResultsHash    string                      `protobuf:"bytes,12,opt,name=last_results_hash,json=lastResultsHash,proto3" json:"last_results_hash"`
	EvidenceHash       string                      `protobuf:"bytes,13,opt,name=evidence_hash,json=evidenceHash,proto3" json:"evidence_hash"`
	ProposerAddress    string                      `protobuf:"bytes,14,opt,name=proposer_address,json=proposerAddress,proto3" json:"proposer_address"`
}

func (m *BlockResponseHeader) Reset()         { *m = BlockResponseHeader{} }
func (m *BlockResponseHeader) String() string { return proto.CompactTextString(m) }
func (*BlockResponseHeader) ProtoMessage()    {}
func (*BlockResponseHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e70b18e52ebaa4c, []int{4}
}
func (m *BlockResponseHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResponseHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockResponseHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockResponseHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponseHeader.Merge(m, src)
}
func (m *BlockResponseHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockResponseHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponseHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponseHeader proto.InternalMessageInfo

func (m *BlockResponseHeader) GetVersion() *BlockResponseHeaderVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *BlockResponseHeader) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *BlockResponseHeader) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockResponseHeader) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *BlockResponseHeader) GetLastBlockId() *BlockResponseId {
	if m != nil {
		return m.LastBlockId
	}
	return nil
}

func (m *BlockResponseHeader) GetLastCommitHash() string {
	if m != nil {
		return m.LastCommitHash
	}
	return ""
}

func (m *BlockResponseHeader) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *BlockResponseHeader) GetValidatorsHash() string {
	if m != nil {
		return m.ValidatorsHash
	}
	return ""
}

func (m *BlockResponseHeader) GetNextValidatorsHash() string {
	if m != nil {
		return m.NextValidatorsHash
	}
	return ""
}

func (m *BlockResponseHeader) GetConsensusHash() string {
	if m != nil {
		return m.ConsensusHash
	}
	return ""
}

func (m *BlockResponseHeader) GetAppHash() string {
	if m != nil {
		return m.AppHash
	}
	return ""
}

func (m *BlockResponseHeader) GetLastResultsHash() string {
	if m != nil {
		return m.LastResultsHash
	}
	return ""
}

func (m *BlockResponseHeader) GetEvidenceHash() string {
	if m != nil {
		return m.EvidenceHash
	}
	return ""
}

func (m *BlockResponseHeader) GetProposerAddress() string {
	if m != nil {
		return m.ProposerAddress
	}
	return ""
}

type BlockResponseHeaderVersion struct {
	Block string `protobuf:"bytes,1,opt,name=block,proto3" json:"block"`
	App   string `protobuf:"bytes,2,opt,name=app,proto3" json:"app"`
}

func (m *BlockResponseHeaderVersion) Reset()         { *m = BlockResponseHeaderVersion{} }
func (m *BlockResponseHeaderVersion) String() string { return proto.CompactTextString(m) }
func (*BlockResponseHeaderVersion) ProtoMessage()    {}
func (*BlockResponseHeaderVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e70b18e52ebaa4c, []int{5}
}
func (m *BlockResponseHeaderVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResponseHeaderVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockResponseHeaderVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockResponseHeaderVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponseHeaderVersion.Merge(m, src)
}
func (m *BlockResponseHeaderVersion) XXX_Size() int {
	return m.Size()
}
func (m *BlockResponseHeaderVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponseHeaderVersion.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponseHeaderVersion proto.InternalMessageInfo

func (m *BlockResponseHeaderVersion) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

func (m *BlockResponseHeaderVersion) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

type BlockEvent struct {
	EventKvPair []*EventKeyValuePair `protobuf:"bytes,1,rep,name=event_kv_pair,json=eventKvPair,proto3" json:"event_kv_pair,omitempty"`
}

func (m *BlockEvent) Reset()         { *m = BlockEvent{} }
func (m *BlockEvent) String() string { return proto.CompactTextString(m) }
func (*BlockEvent) ProtoMessage()    {}
func (*BlockEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e70b18e52ebaa4c, []int{6}
}
func (m *BlockEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockEvent.Merge(m, src)
}
func (m *BlockEvent) XXX_Size() int {
	return m.Size()
}
func (m *BlockEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BlockEvent proto.InternalMessageInfo

func (m *BlockEvent) GetEventKvPair() []*EventKeyValuePair {
	if m != nil {
		return m.EventKvPair
	}
	return nil
}

type EventKeyValuePair struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *EventKeyValuePair) Reset()         { *m = EventKeyValuePair{} }
func (m *EventKeyValuePair) String() string { return proto.CompactTextString(m) }
func (*EventKeyValuePair) ProtoMessage()    {}
func (*EventKeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e70b18e52ebaa4c, []int{7}
}
func (m *EventKeyValuePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventKeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventKeyValuePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventKeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventKeyValuePair.Merge(m, src)
}
func (m *EventKeyValuePair) XXX_Size() int {
	return m.Size()
}
func (m *EventKeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_EventKeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_EventKeyValuePair proto.InternalMessageInfo

func (m *EventKeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *EventKeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryBlockTx struct {
	Hash   string         `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash"`
	Tx     []byte         `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Result *BlockTxResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result"`
}

func (m *QueryBlockTx) Reset()         { *m = QueryBlockTx{} }
func (m *QueryBlockTx) String() string { return proto.CompactTextString(m) }
func (*QueryBlockTx) ProtoMessage()    {}
func (*QueryBlockTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e70b18e52ebaa4c, []int{8}
}
func (m *QueryBlockTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBlockTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBlockTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBlockTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBlockTx.Merge(m, src)
}
func (m *QueryBlockTx) XXX_Size() int {
	return m.Size()
}
func (m *QueryBlockTx) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBlockTx.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBlockTx proto.InternalMessageInfo

func (m *QueryBlockTx) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *QueryBlockTx) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *QueryBlockTx) GetResult() *BlockTxResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type BlockTxResult struct {
	Code      int64         `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	Data      string        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Log       string        `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`
	Info      string        `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	GasWanted string        `protobuf:"bytes,5,opt,name=gas_wanted,json=gasWanted,proto3" json:"gas_wanted,omitempty"`
	GasUsed   string        `protobuf:"bytes,6,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Events    []*BlockEvent `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	Codespace string        `protobuf:"bytes,8,opt,name=codespace,proto3" json:"codespace,omitempty"`
}

func (m *BlockTxResult) Reset()         { *m = BlockTxResult{} }
func (m *BlockTxResult) String() string { return proto.CompactTextString(m) }
func (*BlockTxResult) ProtoMessage()    {}
func (*BlockTxResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e70b18e52ebaa4c, []int{9}
}
func (m *BlockTxResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockTxResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockTxResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockTxResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockTxResult.Merge(m, src)
}
func (m *BlockTxResult) XXX_Size() int {
	return m.Size()
}
func (m *BlockTxResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockTxResult.DiscardUnknown(m)
}

var xxx_messageInfo_BlockTxResult proto.InternalMessageInfo

func (m *BlockTxResult) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BlockTxResult) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *BlockTxResult) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *BlockTxResult) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *BlockTxResult) GetGasWanted() string {
	if m != nil {
		return m.GasWanted
	}
	return ""
}

func (m *BlockTxResult) GetGasUsed() string {
	if m != nil {
		return m.GasUsed
	}
	return ""
}

func (m *BlockTxResult) GetEvents() []*BlockEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *BlockTxResult) GetCodespace() string {
	if m != nil {
		return m.Codespace
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryBlockRequest)(nil), "types.QueryBlockRequest")
	proto.RegisterType((*QueryBlockResponse)(nil), "types.QueryBlockResponse")
	proto.RegisterType((*BlockResponseId)(nil), "types.BlockResponseId")
	proto.RegisterType((*BlockResponseIdParts)(nil), "types.BlockResponseIdParts")
	proto.RegisterType((*BlockResponseHeader)(nil), "types.BlockResponseHeader")
	proto.RegisterType((*BlockResponseHeaderVersion)(nil), "types.BlockResponseHeaderVersion")
	proto.RegisterType((*BlockEvent)(nil), "types.BlockEvent")
	proto.RegisterType((*EventKeyValuePair)(nil), "types.EventKeyValuePair")
	proto.RegisterType((*QueryBlockTx)(nil), "types.QueryBlockTx")
	proto.RegisterType((*BlockTxResult)(nil), "types.BlockTxResult")
}

func init() { proto.RegisterFile("types/query_block.proto", fileDescriptor_9e70b18e52ebaa4c) }

var fileDescriptor_9e70b18e52ebaa4c = []byte{
	// 978 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xcb, 0x6e, 0x1b, 0x37,
	0x17, 0xb6, 0x24, 0xeb, 0x76, 0x74, 0xb1, 0x44, 0xeb, 0xf7, 0x3f, 0x71, 0x53, 0x4d, 0x3a, 0x9b,
	0xa4, 0x2d, 0x20, 0x01, 0x0e, 0x50, 0xb4, 0x68, 0xd0, 0x22, 0x2a, 0x0a, 0xd8, 0x49, 0x0b, 0x24,
	0x44, 0xe2, 0x14, 0xdd, 0x08, 0xb4, 0xc8, 0x4a, 0x03, 0x4b, 0x33, 0x93, 0x21, 0xa5, 0xca, 0x6f,
	0xd1, 0x37, 0xe9, 0x6b, 0x74, 0x99, 0x65, 0x57, 0x83, 0xc0, 0xde, 0xcd, 0x53, 0x14, 0x3c, 0xa4,
	0x3c, 0x92, 0x2c, 0xb7, 0x9b, 0x21, 0xf9, 0x9d, 0xef, 0x3b, 0xbc, 0x9c, 0x8b, 0x04, 0xff, 0x57,
	0x57, 0x91, 0x90, 0xfd, 0xf7, 0x73, 0x11, 0x5f, 0x0d, 0x2f, 0xa6, 0xe1, 0xe8, 0xb2, 0x17, 0xc5,
	0xa1, 0x0a, 0x49, 0x11, 0x0d, 0xc7, 0x9d, 0x71, 0x38, 0x0e, 0x11, 0xe9, 0xeb, 0x99, 0x31, 0x7a,
	0x5f, 0x42, 0xfb, 0xb5, 0x56, 0x0c, 0xb4, 0x80, 0x8a, 0xf7, 0x73, 0x21, 0x15, 0x39, 0x82, 0xd2,
	0x44, 0xf8, 0xe3, 0x89, 0x72, 0x72, 0x8f, 0x72, 0x4f, 0xaa, 0xd4, 0xae, 0xbc, 0x8f, 0x79, 0x20,
	0xeb, 0x6c, 0x19, 0x85, 0x81, 0x14, 0xa4, 0x07, 0x79, 0x9f, 0x23, 0xb5, 0x76, 0x72, 0xd4, 0xc3,
	0xdd, 0x7a, 0x1b, 0x8c, 0x33, 0x3e, 0x28, 0xa5, 0x89, 0x9b, 0xf7, 0x39, 0xcd, 0xfb, 0x9c, 0x7c,
	0xa7, 0xdd, 0x33, 0x2e, 0x62, 0x27, 0x8f, 0x9a, 0xe3, 0x5d, 0x9a, 0x53, 0x64, 0x0c, 0x20, 0x4d,
	0x5c, 0xcb, 0xa6, 0x76, 0x24, 0xef, 0x80, 0x5c, 0x88, 0xb1, 0x1f, 0x98, 0x5b, 0x0e, 0xc5, 0x42,
	0x04, 0x4a, 0x3a, 0x85, 0x47, 0x85, 0x27, 0xb5, 0x93, 0xf6, 0xba, 0xaf, 0x1f, 0xb5, 0x65, 0x70,
	0x94, 0x26, 0xee, 0x0e, 0x01, 0x6d, 0x21, 0x96, 0x11, 0x25, 0x79, 0x0d, 0x2d, 0x11, 0xf0, 0x4d,
	0xb7, 0xfb, 0xf7, 0xb9, 0xed, 0xa4, 0x89, 0x7b, 0x87, 0x4e, 0x9b, 0x22, 0xe0, 0xeb, 0x2e, 0x7b,
	0x50, 0x50, 0x4b, 0xe9, 0x14, 0xd1, 0xcb, 0xa1, 0xf5, 0x92, 0xbd, 0xe1, 0x9b, 0xe5, 0xa0, 0x9c,
	0x26, 0xae, 0xe6, 0x50, 0xfd, 0xf1, 0x66, 0x70, 0xb0, 0xf5, 0x74, 0xe4, 0x21, 0xec, 0x4f, 0x98,
	0x9c, 0x98, 0x58, 0x0c, 0x2a, 0x69, 0xe2, 0xe2, 0x9a, 0xe2, 0x97, 0x3c, 0x83, 0x62, 0xc4, 0x62,
	0x25, 0xed, 0x5b, 0x7e, 0xb2, 0xfb, 0xfd, 0x5f, 0x69, 0xca, 0xa0, 0x9a, 0x26, 0xae, 0x61, 0x53,
	0x33, 0x78, 0x6f, 0xa1, 0xb3, 0x8b, 0x49, 0x5c, 0x28, 0xaa, 0x50, 0xb1, 0x29, 0x6e, 0x5a, 0x30,
	0x42, 0x04, 0xa8, 0x19, 0x6e, 0x0f, 0x95, 0xdf, 0x75, 0x28, 0xef, 0xcf, 0x12, 0x1c, 0xee, 0x88,
	0x26, 0x39, 0x85, 0xf2, 0x42, 0xc4, 0xd2, 0x0f, 0x03, 0x9b, 0x2e, 0x9f, 0xdd, 0x1f, 0xfa, 0x73,
	0x43, 0x1c, 0xd4, 0xd2, 0xc4, 0x5d, 0xa9, 0xe8, 0x6a, 0x42, 0x1e, 0x43, 0x65, 0x34, 0x61, 0x7e,
	0x30, 0xf4, 0xb9, 0x3d, 0x43, 0x3d, 0x4d, 0xdc, 0x5b, 0x8c, 0x96, 0x71, 0x76, 0xc6, 0x89, 0x77,
	0x9b, 0xcb, 0x05, 0xbc, 0x8a, 0x4d, 0x28, 0x8d, 0xac, 0xf2, 0x5a, 0x5f, 0x46, 0xf9, 0x33, 0xe1,
	0xec, 0x67, 0x97, 0xd1, 0x6b, 0x8a, 0x5f, 0xf2, 0x33, 0x34, 0xa6, 0x4c, 0x2a, 0x1b, 0x67, 0x9f,
	0x3b, 0xc5, 0x7f, 0xcd, 0xf4, 0x76, 0x9a, 0xb8, 0x9b, 0x02, 0x5a, 0xd3, 0x4b, 0xe4, 0x9d, 0xe9,
	0xec, 0x6f, 0xa1, 0x75, 0x14, 0xce, 0x66, 0xbe, 0x1a, 0xe2, 0x2b, 0x96, 0x70, 0x63, 0xcc, 0xa8,
	0x6d, 0x1b, 0x6d, 0x6a, 0xe4, 0x07, 0x04, 0x4e, 0x75, 0xc0, 0xbf, 0x80, 0x2a, 0x67, 0x8a, 0x19,
	0x61, 0x19, 0x85, 0x8d, 0x34, 0x71, 0x33, 0x90, 0x56, 0xf4, 0xf4, 0xd4, 0x24, 0xc7, 0xc1, 0x82,
	0x4d, 0x7d, 0xce, 0x54, 0x18, 0x4b, 0xa3, 0xa8, 0xa0, 0xe2, 0x30, 0x4d, 0xdc, 0x6d, 0x13, 0x6d,
	0x66, 0x00, 0xaa, 0x5f, 0x40, 0x27, 0x10, 0x4b, 0x35, 0xdc, 0x76, 0x51, 0x45, 0x17, 0x4e, 0x9a,
	0xb8, 0x3b, 0xed, 0x94, 0x68, 0xf4, 0x7c, 0xd3, 0xd7, 0x37, 0xd0, 0x1c, 0xe9, 0x07, 0x0a, 0xe4,
	0xdc, 0x7a, 0x01, 0xf4, 0x42, 0xd2, 0xc4, 0xdd, 0xb2, 0xd0, 0xc6, 0xed, 0x1a, 0xa5, 0x8f, 0xa1,
	0xc2, 0xa2, 0xc8, 0x88, 0x6a, 0x59, 0xa8, 0x57, 0x18, 0x2d, 0xb3, 0x28, 0x42, 0xe2, 0x73, 0x68,
	0xe3, 0xeb, 0xc5, 0x42, 0xce, 0xa7, 0xca, 0x6e, 0x53, 0x47, 0xc5, 0xff, 0xd2, 0xc4, 0xbd, 0x6b,
	0xa4, 0x07, 0x1a, 0xa2, 0x06, 0x41, 0x17, 0x5f, 0x41, 0x43, 0x2c, 0x7c, 0x2e, 0x82, 0x91, 0x30,
	0xf2, 0x06, 0xca, 0x31, 0xa6, 0x1b, 0x06, 0x5a, 0x5f, 0x2d, 0x51, 0xf7, 0x3d, 0xb4, 0xa2, 0x38,
	0x8c, 0x42, 0x29, 0xe2, 0x21, 0xe3, 0x3c, 0x16, 0x52, 0x3a, 0xcd, 0x2c, 0xa8, 0xdb, 0x36, 0x7a,
	0xb0, 0x42, 0x9e, 0x1b, 0xc0, 0xfb, 0x05, 0x8e, 0xef, 0xaf, 0x01, 0x5d, 0x8e, 0x98, 0x4c, 0xb6,
	0x07, 0x60, 0x39, 0x22, 0x40, 0xcd, 0x40, 0x1e, 0x40, 0x81, 0x45, 0x91, 0xad, 0x04, 0xec, 0x28,
	0x2c, 0x8a, 0xa8, 0xfe, 0x78, 0x2f, 0x00, 0xb2, 0x86, 0x44, 0x9e, 0xe9, 0x0b, 0x8a, 0x40, 0x0d,
	0x2f, 0x17, 0xc3, 0x88, 0xf9, 0xb1, 0x93, 0xc3, 0xce, 0xe4, 0xd8, 0x64, 0x46, 0xd2, 0x4b, 0x71,
	0x75, 0xce, 0xa6, 0x73, 0xf1, 0x8a, 0xf9, 0x31, 0xad, 0x21, 0xfd, 0xe5, 0x42, 0x2f, 0xbc, 0x6f,
	0xa1, 0x7d, 0x87, 0x41, 0x5a, 0x50, 0xb8, 0x14, 0x57, 0xf6, 0xa7, 0x42, 0x4f, 0x49, 0x07, 0x8a,
	0x0b, 0x6d, 0x36, 0xe7, 0xa1, 0x66, 0xe1, 0x2d, 0xa0, 0xbe, 0xde, 0xf8, 0xfe, 0xa3, 0xaf, 0x35,
	0x21, 0xaf, 0x96, 0xe8, 0xa0, 0x4e, 0xf3, 0x6a, 0x49, 0xbe, 0x86, 0x92, 0x09, 0x1d, 0xd6, 0x71,
	0xed, 0xa4, 0xb3, 0x5e, 0x7e, 0x6f, 0x96, 0x26, 0x88, 0xa6, 0xba, 0x0d, 0x8f, 0xda, 0xd1, 0x4b,
	0x73, 0xd0, 0xd8, 0x60, 0xe9, 0x9d, 0x47, 0x21, 0x17, 0xb6, 0xb9, 0xe1, 0xce, 0x7a, 0x4d, 0xf1,
	0x4b, 0x08, 0xec, 0xeb, 0x02, 0xb2, 0x87, 0xc7, 0xb9, 0xbe, 0xe3, 0x34, 0x1c, 0xe3, 0xd6, 0x55,
	0xaa, 0xa7, 0x9a, 0xe5, 0x07, 0xbf, 0x85, 0xa6, 0x67, 0x50, 0x9c, 0x93, 0x4f, 0x01, 0xc6, 0x4c,
	0x0e, 0x7f, 0x67, 0x81, 0x12, 0xa6, 0x4d, 0x54, 0x69, 0x75, 0xcc, 0xe4, 0x3b, 0x04, 0xc8, 0x03,
	0xa8, 0x68, 0xf3, 0x5c, 0x0a, 0x6e, 0x2a, 0x9e, 0x96, 0xc7, 0x4c, 0xbe, 0x95, 0x82, 0x93, 0xcf,
	0xa1, 0x64, 0x7f, 0x6f, 0xca, 0xf7, 0xfc, 0xde, 0x50, 0x4b, 0x20, 0x0f, 0xa1, 0xaa, 0x8f, 0x29,
	0x23, 0x36, 0x12, 0xa6, 0x9a, 0x69, 0x06, 0x0c, 0x7e, 0xfa, 0xeb, 0xba, 0x9b, 0xfb, 0x70, 0xdd,
	0xcd, 0x7d, 0xbc, 0xee, 0xe6, 0xfe, 0xb8, 0xe9, 0xee, 0x7d, 0xb8, 0xe9, 0xee, 0xfd, 0x7d, 0xd3,
	0xdd, 0xfb, 0xf5, 0x64, 0xec, 0xab, 0x29, 0xbb, 0xe8, 0x8d, 0xc2, 0x59, 0x5f, 0x4d, 0xc2, 0x18,
	0x1b, 0x24, 0xce, 0x82, 0x90, 0x8b, 0xfe, 0xe2, 0x69, 0x7f, 0xb9, 0x8e, 0xeb, 0xed, 0x2f, 0x4a,
	0xf8, 0x27, 0xe1, 0xe9, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x33, 0x9b, 0x4f, 0x5c, 0x08,
	0x00, 0x00,
}

func (m *QueryBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.EndBlockEvents) > 0 {
		for iNdEx := len(m.EndBlockEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EndBlockEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BeginBlockEvents) > 0 {
		for iNdEx := len(m.BeginBlockEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BeginBlockEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockResponseId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResponseId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResponseId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parts != nil {
		{
			size, err := m.Parts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockResponseIdParts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResponseIdParts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResponseIdParts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Total != 0 {
		i = encodeVarintQueryBlock(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResponseHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposerAddress) > 0 {
		i -= len(m.ProposerAddress)
		copy(dAtA[i:], m.ProposerAddress)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.ProposerAddress)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.EvidenceHash) > 0 {
		i -= len(m.EvidenceHash)
		copy(dAtA[i:], m.EvidenceHash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.EvidenceHash)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LastResultsHash) > 0 {
		i -= len(m.LastResultsHash)
		copy(dAtA[i:], m.LastResultsHash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.LastResultsHash)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AppHash) > 0 {
		i -= len(m.AppHash)
		copy(dAtA[i:], m.AppHash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.AppHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ConsensusHash) > 0 {
		i -= len(m.ConsensusHash)
		copy(dAtA[i:], m.ConsensusHash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.ConsensusHash)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.NextValidatorsHash) > 0 {
		i -= len(m.NextValidatorsHash)
		copy(dAtA[i:], m.NextValidatorsHash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.NextValidatorsHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ValidatorsHash) > 0 {
		i -= len(m.ValidatorsHash)
		copy(dAtA[i:], m.ValidatorsHash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.ValidatorsHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DataHash) > 0 {
		i -= len(m.DataHash)
		copy(dAtA[i:], m.DataHash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.DataHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LastCommitHash) > 0 {
		i -= len(m.LastCommitHash)
		copy(dAtA[i:], m.LastCommitHash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.LastCommitHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.LastBlockId != nil {
		{
			size, err := m.LastBlockId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintQueryBlock(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockResponseHeaderVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResponseHeaderVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResponseHeaderVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.App) > 0 {
		i -= len(m.App)
		copy(dAtA[i:], m.App)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.App)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventKvPair) > 0 {
		for iNdEx := len(m.EventKvPair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EventKvPair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventKeyValuePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventKeyValuePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventKeyValuePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBlockTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBlockTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBlockTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tx) > 0 {
		i -= len(m.Tx)
		copy(dAtA[i:], m.Tx)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Tx)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockTxResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockTxResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockTxResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Codespace) > 0 {
		i -= len(m.Codespace)
		copy(dAtA[i:], m.Codespace)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Codespace)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.GasUsed) > 0 {
		i -= len(m.GasUsed)
		copy(dAtA[i:], m.GasUsed)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.GasUsed)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GasWanted) > 0 {
		i -= len(m.GasWanted)
		copy(dAtA[i:], m.GasWanted)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.GasWanted)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQueryBlock(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintQueryBlock(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	return n
}

func (m *QueryBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	if len(m.BeginBlockEvents) > 0 {
		for _, e := range m.BeginBlockEvents {
			l = e.Size()
			n += 1 + l + sovQueryBlock(uint64(l))
		}
	}
	if len(m.EndBlockEvents) > 0 {
		for _, e := range m.EndBlockEvents {
			l = e.Size()
			n += 1 + l + sovQueryBlock(uint64(l))
		}
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovQueryBlock(uint64(l))
		}
	}
	return n
}

func (m *BlockResponseId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	if m.Parts != nil {
		l = m.Parts.Size()
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	return n
}

func (m *BlockResponseIdParts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovQueryBlock(uint64(m.Total))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	return n
}

func (m *BlockResponseHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQueryBlock(uint64(m.Height))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	if m.LastBlockId != nil {
		l = m.LastBlockId.Size()
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.LastCommitHash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.DataHash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.ValidatorsHash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.NextValidatorsHash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.ConsensusHash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.AppHash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.LastResultsHash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.EvidenceHash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.ProposerAddress)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	return n
}

func (m *BlockResponseHeaderVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	return n
}

func (m *BlockEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EventKvPair) > 0 {
		for _, e := range m.EventKvPair {
			l = e.Size()
			n += 1 + l + sovQueryBlock(uint64(l))
		}
	}
	return n
}

func (m *EventKeyValuePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	return n
}

func (m *QueryBlockTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	return n
}

func (m *BlockTxResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovQueryBlock(uint64(m.Code))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.GasWanted)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	l = len(m.GasUsed)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovQueryBlock(uint64(l))
		}
	}
	l = len(m.Codespace)
	if l > 0 {
		n += 1 + l + sovQueryBlock(uint64(l))
	}
	return n
}

func sovQueryBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryBlock(x uint64) (n int) {
	return sovQueryBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &BlockResponseId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BlockResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlockEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginBlockEvents = append(m.BeginBlockEvents, &BlockEvent{})
			if err := m.BeginBlockEvents[len(m.BeginBlockEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlockEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndBlockEvents = append(m.EndBlockEvents, &BlockEvent{})
			if err := m.EndBlockEvents[len(m.EndBlockEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, &QueryBlockTx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResponseId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResponseId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResponseId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parts == nil {
				m.Parts = &BlockResponseIdParts{}
			}
			if err := m.Parts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResponseIdParts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResponseIdParts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResponseIdParts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &BlockResponseHeaderVersion{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastBlockId == nil {
				m.LastBlockId = &BlockResponseId{}
			}
			if err := m.LastBlockId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommitHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastCommitHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextValidatorsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextValidatorsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsensusHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResultsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastResultsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvidenceHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvidenceHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResponseHeaderVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResponseHeaderVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResponseHeaderVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventKvPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventKvPair = append(m.EventKvPair, &EventKeyValuePair{})
			if err := m.EventKvPair[len(m.EventKvPair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventKeyValuePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventKeyValuePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventKeyValuePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBlockTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBlockTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBlockTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &BlockTxResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockTxResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockTxResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockTxResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasWanted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasWanted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasUsed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &BlockEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Codespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryBlock = fmt.Errorf("proto: unexpected end of group")
)
