// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_rune_pool.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/mapprotocol/compass-tss/common"
	github_com_mapprotocol_compass_v3_common "github.com/mapprotocol/compass-tss/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRunePoolDeposit struct {
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
	Tx     common.Tx                                     `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx"`
}

func (m *MsgRunePoolDeposit) Reset()         { *m = MsgRunePoolDeposit{} }
func (m *MsgRunePoolDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgRunePoolDeposit) ProtoMessage()    {}
func (*MsgRunePoolDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b87017821ad9c0a, []int{0}
}
func (m *MsgRunePoolDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRunePoolDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRunePoolDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRunePoolDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRunePoolDeposit.Merge(m, src)
}
func (m *MsgRunePoolDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgRunePoolDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRunePoolDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRunePoolDeposit proto.InternalMessageInfo

func (m *MsgRunePoolDeposit) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *MsgRunePoolDeposit) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

type MsgRunePoolWithdraw struct {
	Signer               github_com_cosmos_cosmos_sdk_types.AccAddress    `protobuf:"bytes,1,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
	Tx                   common.Tx                                        `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx"`
	BasisPoints          cosmossdk_io_math.Uint                           `protobuf:"bytes,3,opt,name=basis_points,json=basisPoints,proto3,customtype=cosmossdk.io/math.Uint" json:"basis_points"`
	AffiliateAddress     github_com_mapprotocol_compass_v3_common.Address `protobuf:"bytes,4,opt,name=affiliate_address,json=affiliateAddress,proto3,casttype=github.com/mapprotocol/compass-tss/common.Address" json:"affiliate_address,omitempty"`
	AffiliateBasisPoints cosmossdk_io_math.Uint                           `protobuf:"bytes,5,opt,name=affiliate_basis_points,json=affiliateBasisPoints,proto3,customtype=cosmossdk.io/math.Uint" json:"affiliate_basis_points"`
}

func (m *MsgRunePoolWithdraw) Reset()         { *m = MsgRunePoolWithdraw{} }
func (m *MsgRunePoolWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgRunePoolWithdraw) ProtoMessage()    {}
func (*MsgRunePoolWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b87017821ad9c0a, []int{1}
}
func (m *MsgRunePoolWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRunePoolWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRunePoolWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRunePoolWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRunePoolWithdraw.Merge(m, src)
}
func (m *MsgRunePoolWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgRunePoolWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRunePoolWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRunePoolWithdraw proto.InternalMessageInfo

func (m *MsgRunePoolWithdraw) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *MsgRunePoolWithdraw) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func (m *MsgRunePoolWithdraw) GetAffiliateAddress() github_com_mapprotocol_compass_v3_common.Address {
	if m != nil {
		return m.AffiliateAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgRunePoolDeposit)(nil), "types.MsgRunePoolDeposit")
	proto.RegisterType((*MsgRunePoolWithdraw)(nil), "types.MsgRunePoolWithdraw")
}

func init() { proto.RegisterFile("types/msg_rune_pool.proto", fileDescriptor_7b87017821ad9c0a) }

var fileDescriptor_7b87017821ad9c0a = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x33, 0x71, 0x77, 0xc1, 0xd9, 0x3d, 0x68, 0x76, 0x59, 0x62, 0x0f, 0x49, 0xe8, 0xa9,
	0x97, 0x66, 0xb0, 0xfd, 0x04, 0x0d, 0x5e, 0x04, 0x85, 0x12, 0x2a, 0x82, 0x97, 0x38, 0x4d, 0xa6,
	0xc9, 0xd0, 0x64, 0xde, 0x90, 0x99, 0x6a, 0x3c, 0xfa, 0x0d, 0xfc, 0x58, 0x3d, 0xf6, 0x28, 0x1e,
	0x82, 0xb4, 0xdf, 0xa2, 0x20, 0x48, 0x27, 0xe9, 0x1f, 0x4f, 0x7a, 0xf2, 0xf4, 0xbe, 0xbc, 0x0f,
	0xcf, 0xf3, 0xfc, 0x48, 0x06, 0xbf, 0x50, 0x5f, 0x4a, 0x26, 0x49, 0x21, 0xd3, 0xa8, 0x5a, 0x09,
	0x16, 0x95, 0x00, 0xb9, 0x5f, 0x56, 0xa0, 0xc0, 0xba, 0xd6, 0x52, 0xef, 0x3e, 0x86, 0xa2, 0x00,
	0x41, 0xda, 0xd1, 0x6a, 0xbd, 0x87, 0x14, 0x52, 0xd0, 0x2b, 0x39, 0x6c, 0xed, 0xb5, 0xff, 0x15,
	0x61, 0xeb, 0xad, 0x4c, 0xc3, 0x95, 0x60, 0x53, 0x80, 0xfc, 0x15, 0x2b, 0x41, 0x72, 0x65, 0xbd,
	0xc6, 0x37, 0x92, 0xa7, 0x82, 0x55, 0x36, 0xf2, 0xd0, 0xe0, 0x2e, 0x78, 0xb9, 0x6f, 0xdc, 0x61,
	0xca, 0x55, 0xb6, 0x9a, 0xfb, 0x31, 0x14, 0x24, 0x06, 0x59, 0x80, 0xec, 0xc6, 0x50, 0x26, 0x4b,
	0xa2, 0x9b, 0xfd, 0x49, 0x1c, 0x4f, 0x92, 0xa4, 0x62, 0x52, 0x86, 0x5d, 0x80, 0xe5, 0x61, 0x53,
	0xd5, 0xb6, 0xe9, 0xa1, 0xc1, 0xed, 0x08, 0xfb, 0x1d, 0xd2, 0xac, 0x0e, 0xae, 0xd6, 0x8d, 0x6b,
	0x84, 0xa6, 0xaa, 0xfb, 0xbf, 0x4c, 0x7c, 0x7f, 0xc1, 0xf0, 0x9e, 0xab, 0x2c, 0xa9, 0xe8, 0xe7,
	0xff, 0x0a, 0x61, 0x4d, 0xf0, 0xdd, 0x9c, 0x4a, 0x2e, 0xa3, 0x12, 0xb8, 0x50, 0xd2, 0x7e, 0xe2,
	0xa1, 0xc1, 0xd3, 0xc0, 0x39, 0xe8, 0x3f, 0x1a, 0xf7, 0xb1, 0x2d, 0x91, 0xc9, 0xd2, 0xe7, 0x40,
	0x0a, 0xaa, 0x32, 0xff, 0x1d, 0x17, 0x2a, 0xbc, 0xd5, 0x9e, 0xa9, 0xb6, 0x58, 0x1f, 0xf1, 0x73,
	0xba, 0x58, 0xf0, 0x9c, 0x53, 0xc5, 0x22, 0xda, 0x12, 0xd8, 0x57, 0x3a, 0x67, 0xbc, 0x6f, 0x5c,
	0x92, 0x72, 0x95, 0xd3, 0x16, 0x5d, 0x65, 0x50, 0xc5, 0x19, 0xe5, 0x42, 0x6f, 0x02, 0x12, 0x46,
	0x3e, 0x8d, 0x8f, 0xff, 0xeb, 0x08, 0xff, 0xec, 0x94, 0xd6, 0x5d, 0xac, 0x19, 0x7e, 0x3c, 0x37,
	0xfc, 0x81, 0x7b, 0xfd, 0x4f, 0xb8, 0x0f, 0x27, 0x77, 0x70, 0xe6, 0x0e, 0xde, 0xac, 0xb7, 0x0e,
	0xda, 0x6c, 0x1d, 0xf4, 0x73, 0xeb, 0xa0, 0x6f, 0x3b, 0xc7, 0xd8, 0xec, 0x1c, 0xe3, 0xfb, 0xce,
	0x31, 0x3e, 0x8c, 0xfe, 0x8a, 0x5c, 0x5f, 0xde, 0x0f, 0x5f, 0x7f, 0x7e, 0xa3, 0x1f, 0xd6, 0xf8,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0x98, 0x06, 0xfc, 0xa7, 0x02, 0x00, 0x00,
}

func (m *MsgRunePoolDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRunePoolDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRunePoolDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgRunePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgRunePool(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRunePoolWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRunePoolWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRunePoolWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AffiliateBasisPoints.Size()
		i -= size
		if _, err := m.AffiliateBasisPoints.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgRunePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.AffiliateAddress) > 0 {
		i -= len(m.AffiliateAddress)
		copy(dAtA[i:], m.AffiliateAddress)
		i = encodeVarintMsgRunePool(dAtA, i, uint64(len(m.AffiliateAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.BasisPoints.Size()
		i -= size
		if _, err := m.BasisPoints.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgRunePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgRunePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgRunePool(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgRunePool(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgRunePool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRunePoolDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgRunePool(uint64(l))
	}
	l = m.Tx.Size()
	n += 1 + l + sovMsgRunePool(uint64(l))
	return n
}

func (m *MsgRunePoolWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgRunePool(uint64(l))
	}
	l = m.Tx.Size()
	n += 1 + l + sovMsgRunePool(uint64(l))
	l = m.BasisPoints.Size()
	n += 1 + l + sovMsgRunePool(uint64(l))
	l = len(m.AffiliateAddress)
	if l > 0 {
		n += 1 + l + sovMsgRunePool(uint64(l))
	}
	l = m.AffiliateBasisPoints.Size()
	n += 1 + l + sovMsgRunePool(uint64(l))
	return n
}

func sovMsgRunePool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgRunePool(x uint64) (n int) {
	return sovMsgRunePool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRunePoolDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRunePool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRunePoolDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRunePoolDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRunePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRunePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRunePool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRunePoolWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgRunePool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRunePoolWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRunePoolWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRunePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRunePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasisPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRunePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BasisPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRunePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateAddress = github_com_mapprotocol_compass_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateBasisPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgRunePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AffiliateBasisPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgRunePool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgRunePool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgRunePool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgRunePool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgRunePool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgRunePool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgRunePool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgRunePool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgRunePool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgRunePool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgRunePool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgRunePool = fmt.Errorf("proto: unexpected end of group")
)
