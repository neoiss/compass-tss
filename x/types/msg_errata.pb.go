// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_errata.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/mapprotocol/compass-tss/common"
	gitlab_com_thorchain_thornode_v3_common "github.com/mapprotocol/compass-tss/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgErrataTx struct {
	TxID   gitlab_com_thorchain_thornode_v3_common.TxID  `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.TxID" json:"tx_id,omitempty"`
	Chain  gitlab_com_thorchain_thornode_v3_common.Chain `protobuf:"bytes,2,opt,name=chain,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.Chain" json:"chain,omitempty"`
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgErrataTx) Reset()         { *m = MsgErrataTx{} }
func (m *MsgErrataTx) String() string { return proto.CompactTextString(m) }
func (*MsgErrataTx) ProtoMessage()    {}
func (*MsgErrataTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_60d102f6bf330bad, []int{0}
}
func (m *MsgErrataTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgErrataTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgErrataTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgErrataTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgErrataTx.Merge(m, src)
}
func (m *MsgErrataTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgErrataTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgErrataTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgErrataTx proto.InternalMessageInfo

func (m *MsgErrataTx) GetTxID() gitlab_com_thorchain_thornode_v3_common.TxID {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *MsgErrataTx) GetChain() gitlab_com_thorchain_thornode_v3_common.Chain {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgErrataTx) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgErrataTxQuorum struct {
	QuoErrata *common.QuorumErrataTx                        `protobuf:"bytes,1,opt,name=quoErrata,proto3" json:"quoErrata,omitempty"`
	Signer    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgErrataTxQuorum) Reset()         { *m = MsgErrataTxQuorum{} }
func (m *MsgErrataTxQuorum) String() string { return proto.CompactTextString(m) }
func (*MsgErrataTxQuorum) ProtoMessage()    {}
func (*MsgErrataTxQuorum) Descriptor() ([]byte, []int) {
	return fileDescriptor_60d102f6bf330bad, []int{1}
}
func (m *MsgErrataTxQuorum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgErrataTxQuorum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgErrataTxQuorum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgErrataTxQuorum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgErrataTxQuorum.Merge(m, src)
}
func (m *MsgErrataTxQuorum) XXX_Size() int {
	return m.Size()
}
func (m *MsgErrataTxQuorum) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgErrataTxQuorum.DiscardUnknown(m)
}

var xxx_messageInfo_MsgErrataTxQuorum proto.InternalMessageInfo

func (m *MsgErrataTxQuorum) GetQuoErrata() *common.QuorumErrataTx {
	if m != nil {
		return m.QuoErrata
	}
	return nil
}

func (m *MsgErrataTxQuorum) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgErrataTx)(nil), "types.MsgErrataTx")
	proto.RegisterType((*MsgErrataTxQuorum)(nil), "types.MsgErrataTxQuorum")
}

func init() { proto.RegisterFile("types/msg_errata.proto", fileDescriptor_60d102f6bf330bad) }

var fileDescriptor_60d102f6bf330bad = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0xcf, 0x2d, 0x4e, 0x8f, 0x4f, 0x2d, 0x2a, 0x4a, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x05, 0x8b, 0x4b, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0x45, 0xf4, 0x41,
	0x2c, 0x88, 0xa4, 0x94, 0x70, 0x72, 0x7e, 0x6e, 0x6e, 0x7e, 0x9e, 0x3e, 0x84, 0x82, 0x0a, 0x0a,
	0x26, 0xe6, 0x66, 0xe6, 0xe5, 0xeb, 0x83, 0x49, 0x88, 0x90, 0xd2, 0x74, 0x26, 0x2e, 0x6e, 0xdf,
	0xe2, 0x74, 0x57, 0xb0, 0xc1, 0x21, 0x15, 0x42, 0xbe, 0x5c, 0xac, 0x25, 0x15, 0xf1, 0x99, 0x29,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x4e, 0x16, 0x8f, 0xee, 0xc9, 0xb3, 0x84, 0x54, 0x78, 0xba,
	0xfc, 0xba, 0x27, 0xaf, 0x93, 0x9e, 0x59, 0x92, 0x93, 0x98, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x5f,
	0x92, 0x91, 0x5f, 0x94, 0x9c, 0x91, 0x98, 0x99, 0x07, 0x66, 0xe5, 0xe5, 0xa7, 0xa4, 0xea, 0x97,
	0x19, 0xc3, 0x2c, 0x03, 0xa9, 0x0f, 0x62, 0x29, 0xa9, 0xf0, 0x4c, 0x11, 0x72, 0xe7, 0x62, 0x05,
	0x2b, 0x93, 0x60, 0x02, 0x1b, 0x67, 0xf8, 0xeb, 0x9e, 0xbc, 0x2e, 0xb1, 0xc6, 0x38, 0x83, 0x24,
	0x82, 0x20, 0xfa, 0x85, 0x42, 0xb8, 0xd8, 0x8a, 0x33, 0xd3, 0xf3, 0x52, 0x8b, 0x24, 0x98, 0x15,
	0x18, 0x35, 0x78, 0x9c, 0x6c, 0xa0, 0x26, 0x65, 0x94, 0x42, 0x4c, 0x4a, 0xce, 0x2f, 0xce, 0xcd,
	0x2f, 0x86, 0x52, 0xba, 0xc5, 0x29, 0xd9, 0xfa, 0xe0, 0xd0, 0xd1, 0x73, 0x4c, 0x4e, 0x76, 0x4c,
	0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x9e, 0xf5, 0x7c, 0x83, 0x16, 0x5b, 0x52, 0x6a, 0x72, 0x86, 0xb1,
	0x51, 0x10, 0xd4, 0x2c, 0x2b, 0xa9, 0xae, 0xe7, 0x1b, 0xb4, 0x44, 0x11, 0xae, 0x40, 0x0a, 0x09,
	0xa5, 0x83, 0x8c, 0x5c, 0x82, 0x48, 0xfc, 0xc0, 0xd2, 0xfc, 0xa2, 0xd2, 0x5c, 0x21, 0x13, 0x2e,
	0xce, 0xc2, 0xd2, 0x7c, 0x88, 0x20, 0x38, 0x8c, 0xb8, 0x8d, 0xc4, 0xf4, 0xa0, 0x0e, 0x86, 0x28,
	0x81, 0x69, 0x08, 0x42, 0x28, 0x44, 0x72, 0x3d, 0x13, 0x15, 0x5d, 0xaf, 0x00, 0x72, 0xbd, 0x34,
	0x56, 0xd7, 0x43, 0x9c, 0xe2, 0xe4, 0x73, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c,
	0x51, 0x46, 0x04, 0x63, 0xa1, 0x02, 0x59, 0x1c, 0xe4, 0x9a, 0x24, 0x36, 0x70, 0x92, 0x31, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x75, 0xa1, 0x8a, 0x91, 0x02, 0x00, 0x00,
}

func (m *MsgErrataTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgErrataTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgErrataTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgErrata(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintMsgErrata(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintMsgErrata(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgErrataTxQuorum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgErrataTxQuorum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgErrataTxQuorum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgErrata(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.QuoErrata != nil {
		{
			size, err := m.QuoErrata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgErrata(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgErrata(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgErrata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgErrataTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovMsgErrata(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovMsgErrata(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgErrata(uint64(l))
	}
	return n
}

func (m *MsgErrataTxQuorum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QuoErrata != nil {
		l = m.QuoErrata.Size()
		n += 1 + l + sovMsgErrata(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgErrata(uint64(l))
	}
	return n
}

func sovMsgErrata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgErrata(x uint64) (n int) {
	return sovMsgErrata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgErrataTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgErrata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgErrataTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgErrataTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgErrata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgErrata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgErrata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = gitlab_com_thorchain_thornode_v3_common.TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgErrata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgErrata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgErrata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = gitlab_com_thorchain_thornode_v3_common.Chain(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgErrata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgErrata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgErrata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgErrata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgErrata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgErrataTxQuorum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgErrata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgErrataTxQuorum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgErrataTxQuorum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoErrata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgErrata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgErrata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgErrata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoErrata == nil {
				m.QuoErrata = &common.QuorumErrataTx{}
			}
			if err := m.QuoErrata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgErrata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgErrata
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgErrata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgErrata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgErrata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgErrata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgErrata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgErrata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgErrata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgErrata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgErrata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgErrata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgErrata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgErrata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgErrata = fmt.Errorf("proto: unexpected end of group")
)
