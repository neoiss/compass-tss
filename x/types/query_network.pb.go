// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_network.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryNetworkRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryNetworkRequest) Reset()         { *m = QueryNetworkRequest{} }
func (m *QueryNetworkRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkRequest) ProtoMessage()    {}
func (*QueryNetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb9f8f442a8cc0ad, []int{0}
}
func (m *QueryNetworkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkRequest.Merge(m, src)
}
func (m *QueryNetworkRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkRequest proto.InternalMessageInfo

func (m *QueryNetworkRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryNetworkResponse struct {
	// total amount of RUNE awarded to node operators
	BondRewardRune string `protobuf:"bytes,1,opt,name=bond_reward_rune,json=bondRewardRune,proto3" json:"bond_reward_rune"`
	// total bonded RUNE
	TotalBondUnits string `protobuf:"bytes,2,opt,name=total_bond_units,json=totalBondUnits,proto3" json:"total_bond_units"`
	// RUNE in Available pools (equal in value to the Assets in those pools)
	AvailablePoolsRune string `protobuf:"bytes,15,opt,name=available_pools_rune,json=availablePoolsRune,proto3" json:"available_pools_rune"`
	// RUNE value of Layer 1 Assets in vaults
	VaultsLiquidityRune string `protobuf:"bytes,16,opt,name=vaults_liquidity_rune,json=vaultsLiquidityRune,proto3" json:"vaults_liquidity_rune"`
	// effective security bond used to determine maximum pooled RUNE
	EffectiveSecurityBond string `protobuf:"bytes,3,opt,name=effective_security_bond,json=effectiveSecurityBond,proto3" json:"effective_security_bond"`
	// total reserve RUNE
	TotalReserve string `protobuf:"bytes,4,opt,name=total_reserve,json=totalReserve,proto3" json:"total_reserve"`
	// Returns true if there exist RetiringVaults which have not finished migrating funds to new ActiveVaults
	VaultsMigrating bool `protobuf:"varint,5,opt,name=vaults_migrating,json=vaultsMigrating,proto3" json:"vaults_migrating"`
	// Sum of the gas the network has spent to send outbounds
	GasSpentRune string `protobuf:"bytes,6,opt,name=gas_spent_rune,json=gasSpentRune,proto3" json:"gas_spent_rune"`
	// Sum of the gas withheld from users to cover outbound gas
	GasWithheldRune string `protobuf:"bytes,7,opt,name=gas_withheld_rune,json=gasWithheldRune,proto3" json:"gas_withheld_rune"`
	// Current outbound fee multiplier, in basis points
	OutboundFeeMultiplier string `protobuf:"bytes,8,opt,name=outbound_fee_multiplier,json=outboundFeeMultiplier,proto3" json:"outbound_fee_multiplier,omitempty"`
	// the outbound transaction fee in rune, converted from the NativeOutboundFeeUSD mimir (after USD fees are enabled)
	NativeOutboundFeeRune string `protobuf:"bytes,9,opt,name=native_outbound_fee_rune,json=nativeOutboundFeeRune,proto3" json:"native_outbound_fee_rune"`
	// the native transaction fee in rune, converted from the NativeTransactionFeeUSD mimir (after USD fees are enabled)
	NativeTxFeeRune string `protobuf:"bytes,10,opt,name=native_tx_fee_rune,json=nativeTxFeeRune,proto3" json:"native_tx_fee_rune"`
	// the thorname register fee in rune, converted from the TNSRegisterFeeUSD mimir (after USD fees are enabled)
	TnsRegisterFeeRune string `protobuf:"bytes,11,opt,name=tns_register_fee_rune,json=tnsRegisterFeeRune,proto3" json:"tns_register_fee_rune"`
	// the thorname fee per block in rune, converted from the TNSFeePerBlockUSD mimir (after USD fees are enabled)
	TnsFeePerBlockRune string `protobuf:"bytes,12,opt,name=tns_fee_per_block_rune,json=tnsFeePerBlockRune,proto3" json:"tns_fee_per_block_rune"`
	// the rune price in tor
	RunePriceInTor string `protobuf:"bytes,13,opt,name=rune_price_in_tor,json=runePriceInTor,proto3" json:"rune_price_in_tor"`
	// the tor price in rune
	TorPriceInRune string `protobuf:"bytes,14,opt,name=tor_price_in_rune,json=torPriceInRune,proto3" json:"tor_price_in_rune"`
}

func (m *QueryNetworkResponse) Reset()         { *m = QueryNetworkResponse{} }
func (m *QueryNetworkResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNetworkResponse) ProtoMessage()    {}
func (*QueryNetworkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb9f8f442a8cc0ad, []int{1}
}
func (m *QueryNetworkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNetworkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNetworkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNetworkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNetworkResponse.Merge(m, src)
}
func (m *QueryNetworkResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNetworkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNetworkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNetworkResponse proto.InternalMessageInfo

func (m *QueryNetworkResponse) GetBondRewardRune() string {
	if m != nil {
		return m.BondRewardRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetTotalBondUnits() string {
	if m != nil {
		return m.TotalBondUnits
	}
	return ""
}

func (m *QueryNetworkResponse) GetAvailablePoolsRune() string {
	if m != nil {
		return m.AvailablePoolsRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetVaultsLiquidityRune() string {
	if m != nil {
		return m.VaultsLiquidityRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetEffectiveSecurityBond() string {
	if m != nil {
		return m.EffectiveSecurityBond
	}
	return ""
}

func (m *QueryNetworkResponse) GetTotalReserve() string {
	if m != nil {
		return m.TotalReserve
	}
	return ""
}

func (m *QueryNetworkResponse) GetVaultsMigrating() bool {
	if m != nil {
		return m.VaultsMigrating
	}
	return false
}

func (m *QueryNetworkResponse) GetGasSpentRune() string {
	if m != nil {
		return m.GasSpentRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetGasWithheldRune() string {
	if m != nil {
		return m.GasWithheldRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetOutboundFeeMultiplier() string {
	if m != nil {
		return m.OutboundFeeMultiplier
	}
	return ""
}

func (m *QueryNetworkResponse) GetNativeOutboundFeeRune() string {
	if m != nil {
		return m.NativeOutboundFeeRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetNativeTxFeeRune() string {
	if m != nil {
		return m.NativeTxFeeRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetTnsRegisterFeeRune() string {
	if m != nil {
		return m.TnsRegisterFeeRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetTnsFeePerBlockRune() string {
	if m != nil {
		return m.TnsFeePerBlockRune
	}
	return ""
}

func (m *QueryNetworkResponse) GetRunePriceInTor() string {
	if m != nil {
		return m.RunePriceInTor
	}
	return ""
}

func (m *QueryNetworkResponse) GetTorPriceInRune() string {
	if m != nil {
		return m.TorPriceInRune
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryNetworkRequest)(nil), "types.QueryNetworkRequest")
	proto.RegisterType((*QueryNetworkResponse)(nil), "types.QueryNetworkResponse")
}

func init() { proto.RegisterFile("types/query_network.proto", fileDescriptor_eb9f8f442a8cc0ad) }

var fileDescriptor_eb9f8f442a8cc0ad = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcf, 0x4e, 0xdb, 0x40,
	0x10, 0xc6, 0x49, 0x5b, 0x28, 0x6c, 0x21, 0x01, 0x93, 0x80, 0xa1, 0x55, 0x8c, 0x38, 0x71, 0x29,
	0x91, 0x8a, 0x84, 0x7a, 0xea, 0x9f, 0x54, 0x42, 0x6a, 0x05, 0x94, 0x2e, 0xa0, 0x4a, 0xbd, 0xac,
	0x9c, 0x64, 0x70, 0x56, 0x98, 0x5d, 0xb3, 0xbb, 0x0e, 0xf0, 0x16, 0x7d, 0xac, 0x1e, 0x39, 0xf6,
	0x64, 0x55, 0x70, 0xf3, 0xb1, 0x4f, 0x50, 0xed, 0xac, 0x83, 0x0b, 0x09, 0x37, 0xcf, 0xf7, 0x7d,
	0xf3, 0xcb, 0x78, 0xb2, 0x5e, 0xb2, 0x62, 0xae, 0x12, 0xd0, 0xad, 0xf3, 0x14, 0xd4, 0x15, 0x13,
	0x60, 0x2e, 0xa4, 0x3a, 0xdd, 0x4c, 0x94, 0x34, 0xd2, 0x9b, 0x44, 0x6b, 0xb5, 0x1e, 0xc9, 0x48,
	0xa2, 0xd2, 0xb2, 0x4f, 0xce, 0x5c, 0x7f, 0x4d, 0x16, 0xbf, 0xd9, 0x9e, 0x7d, 0xd7, 0x42, 0xe1,
	0x3c, 0x05, 0x6d, 0xbc, 0x25, 0x32, 0xd5, 0x07, 0x1e, 0xf5, 0x8d, 0x5f, 0x59, 0xab, 0x6c, 0xcc,
	0xd0, 0xa2, 0x5a, 0xff, 0x3b, 0x4d, 0xea, 0xf7, 0xf3, 0x3a, 0x91, 0x42, 0x83, 0xf7, 0x8e, 0xcc,
	0x77, 0xa4, 0xe8, 0x31, 0x05, 0x17, 0xa1, 0xea, 0x31, 0x95, 0x0a, 0x70, 0xad, 0xed, 0x7a, 0x9e,
	0x05, 0x23, 0x1e, 0xad, 0x5a, 0x85, 0xa2, 0x40, 0x53, 0x81, 0xfd, 0x46, 0x9a, 0x30, 0x66, 0x98,
	0x4c, 0x05, 0x37, 0xda, 0x7f, 0x52, 0xf6, 0x3f, 0xf4, 0x68, 0x15, 0x95, 0xb6, 0x14, 0xbd, 0x63,
	0x5b, 0x7b, 0x5f, 0x48, 0x3d, 0x1c, 0x84, 0x3c, 0x0e, 0x3b, 0x31, 0xb0, 0x44, 0xca, 0x58, 0xbb,
	0x19, 0x6a, 0xc8, 0xf0, 0xf3, 0x2c, 0x18, 0xeb, 0x53, 0xef, 0x4e, 0x3d, 0xb0, 0x22, 0xce, 0xb2,
	0x47, 0x1a, 0x83, 0x30, 0x8d, 0x8d, 0x66, 0x31, 0x3f, 0x4f, 0x79, 0x8f, 0x9b, 0x2b, 0x07, 0x9b,
	0x47, 0xd8, 0x4a, 0x9e, 0x05, 0xe3, 0x03, 0x74, 0xd1, 0xc9, 0xbb, 0x43, 0x15, 0x71, 0x87, 0x64,
	0x19, 0x4e, 0x4e, 0xa0, 0x6b, 0xf8, 0x00, 0x98, 0x86, 0x6e, 0xaa, 0x6c, 0xde, 0xbe, 0x8b, 0xff,
	0x14, 0x81, 0x2f, 0xf3, 0x2c, 0x78, 0x2c, 0x42, 0x1b, 0x77, 0xc6, 0x61, 0xa1, 0xdb, 0x97, 0xf6,
	0xb6, 0xc9, 0x9c, 0xdb, 0x89, 0x02, 0x0d, 0x6a, 0x00, 0xfe, 0x33, 0x44, 0x2d, 0xe4, 0x59, 0x70,
	0xdf, 0xa0, 0xb3, 0x58, 0x52, 0x57, 0x79, 0xef, 0xc9, 0x7c, 0x31, 0xfa, 0x19, 0x8f, 0x54, 0x68,
	0xb8, 0x88, 0xfc, 0xc9, 0xb5, 0xca, 0xc6, 0xb4, 0xdb, 0xf3, 0x43, 0x8f, 0xd6, 0x9c, 0xb2, 0x37,
	0x14, 0xbc, 0xb7, 0xa4, 0x1a, 0x85, 0x9a, 0xe9, 0x04, 0x84, 0x71, 0x5b, 0x99, 0xc2, 0x5f, 0xf6,
	0xf2, 0x2c, 0x78, 0xe0, 0xd0, 0xd9, 0x28, 0xd4, 0x87, 0xb6, 0xc4, 0x3d, 0x7c, 0x24, 0x0b, 0xd6,
	0xbf, 0xe0, 0xa6, 0xdf, 0x87, 0xb8, 0x38, 0x23, 0xcf, 0xb1, 0xb9, 0x91, 0x67, 0xc1, 0xa8, 0x49,
	0x6b, 0x51, 0xa8, 0xbf, 0x17, 0x0a, 0x22, 0xb6, 0xc9, 0xb2, 0x4c, 0x4d, 0x47, 0xa6, 0xa2, 0xc7,
	0x4e, 0x00, 0xd8, 0x59, 0x1a, 0x1b, 0x9e, 0xc4, 0x1c, 0x94, 0x3f, 0x8d, 0xe7, 0xb4, 0x31, 0xb4,
	0x77, 0x00, 0xf6, 0xee, 0x4c, 0xef, 0x98, 0xf8, 0x22, 0xc4, 0xe5, 0xde, 0x6b, 0xc7, 0x09, 0x66,
	0x70, 0x82, 0x57, 0x79, 0x16, 0x3c, 0x9a, 0xa1, 0x0d, 0xe7, 0x7c, 0x2d, 0xe1, 0x38, 0xce, 0x27,
	0xe2, 0x15, 0x2d, 0xe6, 0xb2, 0x04, 0x12, 0x04, 0x2e, 0xe5, 0x59, 0x30, 0xc6, 0xa5, 0x35, 0xa7,
	0x1d, 0x5d, 0x0e, 0x21, 0xbb, 0xa4, 0x61, 0x84, 0x66, 0x0a, 0x22, 0xae, 0x0d, 0xa8, 0x92, 0xf3,
	0xa2, 0x3c, 0x6d, 0x63, 0x03, 0xd4, 0x33, 0x42, 0xd3, 0x42, 0x1d, 0xd2, 0xf6, 0xc9, 0x92, 0x0d,
	0xdb, 0x4c, 0x02, 0x8a, 0x75, 0x62, 0xd9, 0x3d, 0x75, 0xb8, 0x59, 0xc4, 0xad, 0xe6, 0x59, 0xf0,
	0x48, 0x02, 0x79, 0x3b, 0x00, 0x07, 0xa0, 0xda, 0x56, 0x44, 0xde, 0x07, 0xb2, 0x60, 0x3d, 0x96,
	0x28, 0xde, 0x05, 0xc6, 0x05, 0x33, 0x52, 0xf9, 0x73, 0xe5, 0x9f, 0x36, 0x62, 0xd2, 0xaa, 0x95,
	0x0e, 0xac, 0xf2, 0x59, 0x1c, 0x49, 0x65, 0x09, 0x46, 0xaa, 0x32, 0x83, 0xc3, 0x54, 0x4b, 0xc2,
	0x88, 0x69, 0xbf, 0x6d, 0x55, 0x00, 0xec, 0x0c, 0xed, 0xdd, 0x5f, 0x37, 0xcd, 0xca, 0xf5, 0x4d,
	0xb3, 0xf2, 0xe7, 0xa6, 0x59, 0xf9, 0x79, 0xdb, 0x9c, 0xb8, 0xbe, 0x6d, 0x4e, 0xfc, 0xbe, 0x6d,
	0x4e, 0xfc, 0x78, 0x13, 0x71, 0x13, 0x87, 0x9d, 0xcd, 0xae, 0x3c, 0x6b, 0x99, 0xbe, 0x54, 0xdd,
	0x7e, 0xc8, 0x05, 0x3e, 0x09, 0xd9, 0x83, 0xd6, 0x60, 0xab, 0x75, 0xf9, 0xbf, 0x6e, 0xef, 0xc1,
	0xce, 0x14, 0x5e, 0x7c, 0x5b, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x58, 0x4d, 0x35, 0x32,
	0x05, 0x00, 0x00,
}

func (m *QueryNetworkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNetworkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNetworkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNetworkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultsLiquidityRune) > 0 {
		i -= len(m.VaultsLiquidityRune)
		copy(dAtA[i:], m.VaultsLiquidityRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.VaultsLiquidityRune)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.AvailablePoolsRune) > 0 {
		i -= len(m.AvailablePoolsRune)
		copy(dAtA[i:], m.AvailablePoolsRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.AvailablePoolsRune)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.TorPriceInRune) > 0 {
		i -= len(m.TorPriceInRune)
		copy(dAtA[i:], m.TorPriceInRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.TorPriceInRune)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.RunePriceInTor) > 0 {
		i -= len(m.RunePriceInTor)
		copy(dAtA[i:], m.RunePriceInTor)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.RunePriceInTor)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TnsFeePerBlockRune) > 0 {
		i -= len(m.TnsFeePerBlockRune)
		copy(dAtA[i:], m.TnsFeePerBlockRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.TnsFeePerBlockRune)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TnsRegisterFeeRune) > 0 {
		i -= len(m.TnsRegisterFeeRune)
		copy(dAtA[i:], m.TnsRegisterFeeRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.TnsRegisterFeeRune)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.NativeTxFeeRune) > 0 {
		i -= len(m.NativeTxFeeRune)
		copy(dAtA[i:], m.NativeTxFeeRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.NativeTxFeeRune)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.NativeOutboundFeeRune) > 0 {
		i -= len(m.NativeOutboundFeeRune)
		copy(dAtA[i:], m.NativeOutboundFeeRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.NativeOutboundFeeRune)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OutboundFeeMultiplier) > 0 {
		i -= len(m.OutboundFeeMultiplier)
		copy(dAtA[i:], m.OutboundFeeMultiplier)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.OutboundFeeMultiplier)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.GasWithheldRune) > 0 {
		i -= len(m.GasWithheldRune)
		copy(dAtA[i:], m.GasWithheldRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.GasWithheldRune)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GasSpentRune) > 0 {
		i -= len(m.GasSpentRune)
		copy(dAtA[i:], m.GasSpentRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.GasSpentRune)))
		i--
		dAtA[i] = 0x32
	}
	if m.VaultsMigrating {
		i--
		if m.VaultsMigrating {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TotalReserve) > 0 {
		i -= len(m.TotalReserve)
		copy(dAtA[i:], m.TotalReserve)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.TotalReserve)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EffectiveSecurityBond) > 0 {
		i -= len(m.EffectiveSecurityBond)
		copy(dAtA[i:], m.EffectiveSecurityBond)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.EffectiveSecurityBond)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalBondUnits) > 0 {
		i -= len(m.TotalBondUnits)
		copy(dAtA[i:], m.TotalBondUnits)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.TotalBondUnits)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BondRewardRune) > 0 {
		i -= len(m.BondRewardRune)
		copy(dAtA[i:], m.BondRewardRune)
		i = encodeVarintQueryNetwork(dAtA, i, uint64(len(m.BondRewardRune)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryNetworkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	return n
}

func (m *QueryNetworkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondRewardRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.TotalBondUnits)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.EffectiveSecurityBond)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.TotalReserve)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	if m.VaultsMigrating {
		n += 2
	}
	l = len(m.GasSpentRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.GasWithheldRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.OutboundFeeMultiplier)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.NativeOutboundFeeRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.NativeTxFeeRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.TnsRegisterFeeRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.TnsFeePerBlockRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.RunePriceInTor)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.TorPriceInRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.AvailablePoolsRune)
	if l > 0 {
		n += 1 + l + sovQueryNetwork(uint64(l))
	}
	l = len(m.VaultsLiquidityRune)
	if l > 0 {
		n += 2 + l + sovQueryNetwork(uint64(l))
	}
	return n
}

func sovQueryNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryNetwork(x uint64) (n int) {
	return sovQueryNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryNetworkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNetworkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNetworkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondRewardRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondRewardRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBondUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBondUnits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveSecurityBond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveSecurityBond = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalReserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultsMigrating", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VaultsMigrating = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasSpentRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasSpentRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasWithheldRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasWithheldRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundFeeMultiplier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeOutboundFeeRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeOutboundFeeRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeTxFeeRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeTxFeeRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TnsRegisterFeeRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TnsRegisterFeeRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TnsFeePerBlockRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TnsFeePerBlockRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunePriceInTor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunePriceInTor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TorPriceInRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TorPriceInRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailablePoolsRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailablePoolsRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultsLiquidityRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultsLiquidityRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryNetwork = fmt.Errorf("proto: unexpected end of group")
)
