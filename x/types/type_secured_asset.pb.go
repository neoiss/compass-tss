// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_secured_asset.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/mapprotocol/compass-tss/common"
	github_com_mapprotocol_compass_v3_common "github.com/mapprotocol/compass-tss/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SecuredAsset struct {
	Asset github_com_mapprotocol_compass_v3_common.Asset `protobuf:"bytes,1,opt,name=asset,proto3,customtype=github.com/mapprotocol/compass-tss/common.Asset" json:"asset"`
	Depth cosmossdk_io_math.Uint                         `protobuf:"bytes,2,opt,name=depth,proto3,customtype=cosmossdk.io/math.Uint" json:"depth"`
}

func (m *SecuredAsset) Reset()         { *m = SecuredAsset{} }
func (m *SecuredAsset) String() string { return proto.CompactTextString(m) }
func (*SecuredAsset) ProtoMessage()    {}
func (*SecuredAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ada6429fbf142470, []int{0}
}
func (m *SecuredAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecuredAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecuredAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecuredAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecuredAsset.Merge(m, src)
}
func (m *SecuredAsset) XXX_Size() int {
	return m.Size()
}
func (m *SecuredAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_SecuredAsset.DiscardUnknown(m)
}

var xxx_messageInfo_SecuredAsset proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SecuredAsset)(nil), "types.SecuredAsset")
}

func init() { proto.RegisterFile("types/type_secured_asset.proto", fileDescriptor_ada6429fbf142470) }

var fileDescriptor_ada6429fbf142470 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x07, 0x91, 0xf1, 0xc5, 0xa9, 0xc9, 0xa5, 0x45, 0xa9, 0x29, 0xf1, 0x89, 0xc5, 0xc5,
	0xa9, 0x25, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x79, 0x29, 0xe1, 0xe4, 0xfc,
	0xdc, 0xdc, 0xfc, 0x3c, 0x7d, 0x08, 0x05, 0x91, 0x93, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x33,
	0xf5, 0x41, 0x2c, 0x88, 0xa8, 0xd2, 0x02, 0x46, 0x2e, 0x9e, 0x60, 0x88, 0x49, 0x8e, 0x20, 0x83,
	0x84, 0xa2, 0xb8, 0x58, 0xc1, 0x26, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0xf1, 0xea, 0x41,
	0x0d, 0x01, 0xcb, 0x3a, 0x99, 0x9e, 0xb8, 0x27, 0xcf, 0x70, 0xeb, 0x9e, 0xbc, 0x6e, 0x7a, 0x66,
	0x49, 0x4e, 0x62, 0x12, 0x48, 0x52, 0xbf, 0x24, 0x23, 0xbf, 0x28, 0x39, 0x23, 0x31, 0x33, 0x0f,
	0xcc, 0xca, 0xcb, 0x4f, 0x49, 0xd5, 0x2f, 0x33, 0xd6, 0x47, 0xd6, 0x16, 0x04, 0x31, 0x52, 0xc8,
	0x84, 0x8b, 0x35, 0x25, 0xb5, 0xa0, 0x24, 0x43, 0x82, 0x49, 0x81, 0x51, 0x83, 0xd3, 0x49, 0x0e,
	0x6a, 0x98, 0x58, 0x72, 0x7e, 0x71, 0x6e, 0x7e, 0x71, 0x71, 0x4a, 0xb6, 0x5e, 0x66, 0xbe, 0x7e,
	0x6e, 0x62, 0x49, 0x86, 0x5e, 0x68, 0x66, 0x5e, 0x49, 0x10, 0x44, 0xb1, 0x93, 0xcf, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x19, 0x11, 0x74, 0x45, 0x05, 0xb2, 0x38, 0x28,
	0x6c, 0x92, 0xd8, 0xc0, 0xfe, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xf3, 0x98, 0x88,
	0x4b, 0x01, 0x00, 0x00,
}

func (m *SecuredAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecuredAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecuredAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Depth.Size()
		i -= size
		if _, err := m.Depth.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeSecuredAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Asset.Size()
		i -= size
		if _, err := m.Asset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeSecuredAsset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypeSecuredAsset(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeSecuredAsset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SecuredAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Asset.Size()
	n += 1 + l + sovTypeSecuredAsset(uint64(l))
	l = m.Depth.Size()
	n += 1 + l + sovTypeSecuredAsset(uint64(l))
	return n
}

func sovTypeSecuredAsset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeSecuredAsset(x uint64) (n int) {
	return sovTypeSecuredAsset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecuredAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeSecuredAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecuredAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecuredAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeSecuredAsset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeSecuredAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeSecuredAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeSecuredAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Depth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeSecuredAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeSecuredAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeSecuredAsset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeSecuredAsset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeSecuredAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeSecuredAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeSecuredAsset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeSecuredAsset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeSecuredAsset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeSecuredAsset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeSecuredAsset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeSecuredAsset = fmt.Errorf("proto: unexpected end of group")
)
