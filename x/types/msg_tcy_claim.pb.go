// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_tcy_claim.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/mapprotocol/compass-tss/common"
	gitlab_com_thorchain_thornode_v3_common "github.com/mapprotocol/compass-tss/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgTCYClaim struct {
	RuneAddress gitlab_com_thorchain_thornode_v3_common.Address `protobuf:"bytes,1,opt,name=rune_address,json=runeAddress,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.Address" json:"rune_address,omitempty"`
	L1Address   gitlab_com_thorchain_thornode_v3_common.Address `protobuf:"bytes,2,opt,name=l1_address,json=l1Address,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.Address" json:"l1_address,omitempty"`
	Signer      github_com_cosmos_cosmos_sdk_types.AccAddress   `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgTCYClaim) Reset()         { *m = MsgTCYClaim{} }
func (m *MsgTCYClaim) String() string { return proto.CompactTextString(m) }
func (*MsgTCYClaim) ProtoMessage()    {}
func (*MsgTCYClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_49e15c0965045e94, []int{0}
}
func (m *MsgTCYClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTCYClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTCYClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTCYClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTCYClaim.Merge(m, src)
}
func (m *MsgTCYClaim) XXX_Size() int {
	return m.Size()
}
func (m *MsgTCYClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTCYClaim.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTCYClaim proto.InternalMessageInfo

func (m *MsgTCYClaim) GetRuneAddress() gitlab_com_thorchain_thornode_v3_common.Address {
	if m != nil {
		return m.RuneAddress
	}
	return ""
}

func (m *MsgTCYClaim) GetL1Address() gitlab_com_thorchain_thornode_v3_common.Address {
	if m != nil {
		return m.L1Address
	}
	return ""
}

func (m *MsgTCYClaim) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgTCYClaim)(nil), "types.MsgTCYClaim")
}

func init() { proto.RegisterFile("types/msg_tcy_claim.proto", fileDescriptor_49e15c0965045e94) }

var fileDescriptor_49e15c0965045e94 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0xcf, 0x2d, 0x4e, 0x8f, 0x2f, 0x49, 0xae, 0x8c, 0x4f, 0xce, 0x49, 0xcc, 0xcc, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x4b, 0x49, 0x09, 0x27, 0xe7, 0xe7, 0xe6, 0xe6,
	0xe7, 0xe9, 0x43, 0x28, 0x88, 0x9c, 0x94, 0x48, 0x7a, 0x7e, 0x7a, 0x3e, 0x98, 0xa9, 0x0f, 0x62,
	0x41, 0x45, 0x05, 0x13, 0x73, 0x33, 0xf3, 0xf2, 0xf5, 0xc1, 0x24, 0x44, 0x48, 0xa9, 0x9f, 0x89,
	0x8b, 0xdb, 0xb7, 0x38, 0x3d, 0xc4, 0x39, 0xd2, 0x19, 0x64, 0xb4, 0x50, 0x18, 0x17, 0x4f, 0x51,
	0x69, 0x5e, 0x6a, 0x7c, 0x62, 0x4a, 0x4a, 0x51, 0x6a, 0x71, 0xb1, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0xa7, 0x93, 0xf1, 0xaf, 0x7b, 0xf2, 0xfa, 0xe9, 0x99, 0x25, 0x39, 0x89, 0x49, 0x7a, 0xc9, 0xf9,
	0xb9, 0xfa, 0x25, 0x19, 0xf9, 0x45, 0xc9, 0x19, 0x89, 0x99, 0x79, 0x60, 0x56, 0x5e, 0x7e, 0x4a,
	0xaa, 0x7e, 0x99, 0x31, 0xcc, 0x05, 0x8e, 0x10, 0xad, 0x41, 0xdc, 0x20, 0x83, 0xa0, 0x1c, 0xa1,
	0x20, 0x2e, 0xae, 0x1c, 0x43, 0xb8, 0xa9, 0x4c, 0xe4, 0x9b, 0xca, 0x99, 0x63, 0x08, 0x33, 0x33,
	0x84, 0x8b, 0xad, 0x38, 0x33, 0x3d, 0x2f, 0xb5, 0x48, 0x82, 0x59, 0x81, 0x51, 0x83, 0xc7, 0xc9,
	0xe6, 0xd7, 0x3d, 0x79, 0xdd, 0xf4, 0xcc, 0x92, 0x8c, 0x52, 0x88, 0x79, 0xc9, 0xf9, 0xc5, 0xb9,
	0xf9, 0xc5, 0x50, 0x4a, 0xb7, 0x38, 0x25, 0x5b, 0x1f, 0x1c, 0x62, 0x7a, 0x8e, 0xc9, 0xc9, 0x50,
	0x23, 0x66, 0x3d, 0xdf, 0xa0, 0xc5, 0x96, 0x94, 0x9a, 0x9c, 0x61, 0x6c, 0x14, 0x04, 0x35, 0xcb,
	0xc9, 0xe7, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0,
	0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x8c, 0x08, 0xba, 0xb5,
	0x02, 0x59, 0x1c, 0x64, 0x57, 0x12, 0x1b, 0x38, 0x98, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x6a, 0x24, 0x4c, 0x43, 0xc8, 0x01, 0x00, 0x00,
}

func (m *MsgTCYClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTCYClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTCYClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgTcyClaim(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.L1Address) > 0 {
		i -= len(m.L1Address)
		copy(dAtA[i:], m.L1Address)
		i = encodeVarintMsgTcyClaim(dAtA, i, uint64(len(m.L1Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RuneAddress) > 0 {
		i -= len(m.RuneAddress)
		copy(dAtA[i:], m.RuneAddress)
		i = encodeVarintMsgTcyClaim(dAtA, i, uint64(len(m.RuneAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgTcyClaim(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgTcyClaim(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgTCYClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuneAddress)
	if l > 0 {
		n += 1 + l + sovMsgTcyClaim(uint64(l))
	}
	l = len(m.L1Address)
	if l > 0 {
		n += 1 + l + sovMsgTcyClaim(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgTcyClaim(uint64(l))
	}
	return n
}

func sovMsgTcyClaim(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgTcyClaim(x uint64) (n int) {
	return sovMsgTcyClaim(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgTCYClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgTcyClaim
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTCYClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTCYClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTcyClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgTcyClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTcyClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneAddress = gitlab_com_thorchain_thornode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTcyClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgTcyClaim
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTcyClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1Address = gitlab_com_thorchain_thornode_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTcyClaim
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgTcyClaim
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTcyClaim
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgTcyClaim(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgTcyClaim
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgTcyClaim(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgTcyClaim
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgTcyClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgTcyClaim
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgTcyClaim
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgTcyClaim
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgTcyClaim
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgTcyClaim        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgTcyClaim          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgTcyClaim = fmt.Errorf("proto: unexpected end of group")
)
