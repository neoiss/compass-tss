// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_tcy_unstake.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/mapprotocol/compass-tss/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgTCYUnstake struct {
	Signer      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
	Tx          common.Tx                                     `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx"`
	BasisPoints cosmossdk_io_math.Uint                        `protobuf:"bytes,3,opt,name=basis_points,json=basisPoints,proto3,customtype=cosmossdk.io/math.Uint" json:"basis_points"`
}

func (m *MsgTCYUnstake) Reset()         { *m = MsgTCYUnstake{} }
func (m *MsgTCYUnstake) String() string { return proto.CompactTextString(m) }
func (*MsgTCYUnstake) ProtoMessage()    {}
func (*MsgTCYUnstake) Descriptor() ([]byte, []int) {
	return fileDescriptor_80bf0d4762e2e0bb, []int{0}
}
func (m *MsgTCYUnstake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTCYUnstake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTCYUnstake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTCYUnstake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTCYUnstake.Merge(m, src)
}
func (m *MsgTCYUnstake) XXX_Size() int {
	return m.Size()
}
func (m *MsgTCYUnstake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTCYUnstake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTCYUnstake proto.InternalMessageInfo

func (m *MsgTCYUnstake) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *MsgTCYUnstake) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func init() {
	proto.RegisterType((*MsgTCYUnstake)(nil), "types.MsgTCYUnstake")
}

func init() { proto.RegisterFile("types/msg_tcy_unstake.proto", fileDescriptor_80bf0d4762e2e0bb) }

var fileDescriptor_80bf0d4762e2e0bb = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0xb1, 0x4e, 0xf3, 0x30,
	0x18, 0x8c, 0xfb, 0xff, 0x54, 0x22, 0x2d, 0x03, 0x01, 0xa1, 0xaa, 0x48, 0x6e, 0xc4, 0xd4, 0xa5,
	0xb1, 0x68, 0x9f, 0xa0, 0x61, 0x42, 0x02, 0x09, 0x55, 0xed, 0x00, 0x4b, 0x95, 0x3a, 0x91, 0x63,
	0x15, 0xfb, 0xab, 0xf2, 0xb9, 0x28, 0x7d, 0x0b, 0xde, 0x88, 0xb5, 0x63, 0x47, 0xc4, 0x50, 0xa1,
	0xf6, 0x2d, 0x98, 0x50, 0xec, 0x0c, 0x2c, 0xbe, 0xd3, 0x9d, 0xee, 0x7c, 0xb6, 0x7f, 0x6d, 0x36,
	0xab, 0x0c, 0x99, 0x42, 0x31, 0x37, 0x7c, 0x33, 0x5f, 0x6b, 0x34, 0xc9, 0x32, 0x8b, 0x56, 0x05,
	0x18, 0x08, 0x4e, 0xac, 0xd9, 0xbd, 0xe0, 0xa0, 0x14, 0x68, 0xe6, 0xc0, 0x79, 0xdd, 0x4b, 0x01,
	0x02, 0x2c, 0x65, 0x15, 0xab, 0xd5, 0xf3, 0x44, 0x49, 0x0d, 0xcc, 0x9e, 0x4e, 0xba, 0xf9, 0x20,
	0xfe, 0xd9, 0x23, 0x8a, 0xe9, 0xdd, 0xf3, 0xcc, 0x95, 0x07, 0xf7, 0x7e, 0x13, 0xa5, 0xd0, 0x59,
	0xd1, 0x21, 0x21, 0xe9, 0xb7, 0xe3, 0xdb, 0x9f, 0x7d, 0x6f, 0x20, 0xa4, 0xc9, 0xd7, 0x8b, 0x88,
	0x83, 0x62, 0x1c, 0x50, 0x01, 0xd6, 0x30, 0xc0, 0x74, 0xc9, 0xec, 0x8e, 0x68, 0xcc, 0xf9, 0x38,
	0x4d, 0x8b, 0x0c, 0x71, 0x52, 0x17, 0x04, 0xa1, 0xdf, 0x30, 0x65, 0xa7, 0x11, 0x92, 0x7e, 0x6b,
	0xe8, 0x47, 0xf5, 0xc0, 0x69, 0x19, 0xff, 0xdf, 0xee, 0x7b, 0xde, 0xa4, 0x61, 0xca, 0x60, 0xec,
	0xb7, 0x17, 0x09, 0x4a, 0x9c, 0xaf, 0x40, 0x6a, 0x83, 0x9d, 0x7f, 0x21, 0xe9, 0x9f, 0xc6, 0xb4,
	0xf2, 0xbf, 0xf6, 0xbd, 0x2b, 0x77, 0x09, 0xa6, 0xcb, 0x48, 0x02, 0x53, 0x89, 0xc9, 0xa3, 0x99,
	0xd4, 0x66, 0xd2, 0xb2, 0x99, 0x27, 0x1b, 0x89, 0x1f, 0xb6, 0x07, 0x4a, 0x76, 0x07, 0x4a, 0xbe,
	0x0f, 0x94, 0xbc, 0x1f, 0xa9, 0xb7, 0x3b, 0x52, 0xef, 0xf3, 0x48, 0xbd, 0x97, 0xa1, 0x90, 0xe6,
	0x35, 0x71, 0xab, 0x4d, 0x0e, 0x05, 0xcf, 0x13, 0xa9, 0x2d, 0xd3, 0x90, 0x66, 0xec, 0x6d, 0xc4,
	0xca, 0xbf, 0x7a, 0xf5, 0x8a, 0x45, 0xd3, 0x7e, 0xcb, 0xe8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x62,
	0x02, 0x96, 0x96, 0x7a, 0x01, 0x00, 0x00,
}

func (m *MsgTCYUnstake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTCYUnstake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTCYUnstake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BasisPoints.Size()
		i -= size
		if _, err := m.BasisPoints.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgTcyUnstake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgTcyUnstake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgTcyUnstake(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgTcyUnstake(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgTcyUnstake(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgTCYUnstake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgTcyUnstake(uint64(l))
	}
	l = m.Tx.Size()
	n += 1 + l + sovMsgTcyUnstake(uint64(l))
	l = m.BasisPoints.Size()
	n += 1 + l + sovMsgTcyUnstake(uint64(l))
	return n
}

func sovMsgTcyUnstake(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgTcyUnstake(x uint64) (n int) {
	return sovMsgTcyUnstake(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgTCYUnstake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgTcyUnstake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTCYUnstake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTCYUnstake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTcyUnstake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgTcyUnstake
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTcyUnstake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTcyUnstake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgTcyUnstake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTcyUnstake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasisPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgTcyUnstake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgTcyUnstake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgTcyUnstake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BasisPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgTcyUnstake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgTcyUnstake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgTcyUnstake(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgTcyUnstake
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgTcyUnstake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgTcyUnstake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgTcyUnstake
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgTcyUnstake
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgTcyUnstake
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgTcyUnstake        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgTcyUnstake          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgTcyUnstake = fmt.Errorf("proto: unexpected end of group")
)
