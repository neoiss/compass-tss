// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_liquidity_provider.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryLiquidityProviderRequest struct {
	Asset   string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Height  string `protobuf:"bytes,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryLiquidityProviderRequest) Reset()         { *m = QueryLiquidityProviderRequest{} }
func (m *QueryLiquidityProviderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityProviderRequest) ProtoMessage()    {}
func (*QueryLiquidityProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f17d11fe4edb1f7, []int{0}
}
func (m *QueryLiquidityProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityProviderRequest.Merge(m, src)
}
func (m *QueryLiquidityProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityProviderRequest proto.InternalMessageInfo

func (m *QueryLiquidityProviderRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryLiquidityProviderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryLiquidityProviderRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

// Can we replace this with LiquidityProvider proto? Check json fields...
type QueryLiquidityProviderResponse struct {
	Asset              string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	RuneAddress        string `protobuf:"bytes,2,opt,name=rune_address,json=runeAddress,proto3" json:"rune_address,omitempty"`
	AssetAddress       string `protobuf:"bytes,3,opt,name=asset_address,json=assetAddress,proto3" json:"asset_address,omitempty"`
	LastAddHeight      int64  `protobuf:"varint,4,opt,name=last_add_height,json=lastAddHeight,proto3" json:"last_add_height,omitempty"`
	LastWithdrawHeight int64  `protobuf:"varint,5,opt,name=last_withdraw_height,json=lastWithdrawHeight,proto3" json:"last_withdraw_height,omitempty"`
	Units              string `protobuf:"bytes,6,opt,name=units,proto3" json:"units"`
	PendingRune        string `protobuf:"bytes,7,opt,name=pending_rune,json=pendingRune,proto3" json:"pending_rune"`
	PendingAsset       string `protobuf:"bytes,8,opt,name=pending_asset,json=pendingAsset,proto3" json:"pending_asset"`
	PendingTxId        string `protobuf:"bytes,9,opt,name=pending_tx_id,json=pendingTxId,proto3" json:"pending_tx_id,omitempty"`
	RuneDepositValue   string `protobuf:"bytes,10,opt,name=rune_deposit_value,json=runeDepositValue,proto3" json:"rune_deposit_value"`
	AssetDepositValue  string `protobuf:"bytes,11,opt,name=asset_deposit_value,json=assetDepositValue,proto3" json:"asset_deposit_value"`
	RuneRedeemValue    string `protobuf:"bytes,12,opt,name=rune_redeem_value,json=runeRedeemValue,proto3" json:"rune_redeem_value,omitempty"`
	AssetRedeemValue   string `protobuf:"bytes,13,opt,name=asset_redeem_value,json=assetRedeemValue,proto3" json:"asset_redeem_value,omitempty"`
	LuviDepositValue   string `protobuf:"bytes,14,opt,name=luvi_deposit_value,json=luviDepositValue,proto3" json:"luvi_deposit_value,omitempty"`
	LuviRedeemValue    string `protobuf:"bytes,15,opt,name=luvi_redeem_value,json=luviRedeemValue,proto3" json:"luvi_redeem_value,omitempty"`
	LuviGrowthPct      string `protobuf:"bytes,16,opt,name=luvi_growth_pct,json=luviGrowthPct,proto3" json:"luvi_growth_pct,omitempty"`
}

func (m *QueryLiquidityProviderResponse) Reset()         { *m = QueryLiquidityProviderResponse{} }
func (m *QueryLiquidityProviderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityProviderResponse) ProtoMessage()    {}
func (*QueryLiquidityProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f17d11fe4edb1f7, []int{1}
}
func (m *QueryLiquidityProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityProviderResponse.Merge(m, src)
}
func (m *QueryLiquidityProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityProviderResponse proto.InternalMessageInfo

func (m *QueryLiquidityProviderResponse) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetRuneAddress() string {
	if m != nil {
		return m.RuneAddress
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetAssetAddress() string {
	if m != nil {
		return m.AssetAddress
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetLastAddHeight() int64 {
	if m != nil {
		return m.LastAddHeight
	}
	return 0
}

func (m *QueryLiquidityProviderResponse) GetLastWithdrawHeight() int64 {
	if m != nil {
		return m.LastWithdrawHeight
	}
	return 0
}

func (m *QueryLiquidityProviderResponse) GetUnits() string {
	if m != nil {
		return m.Units
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetPendingRune() string {
	if m != nil {
		return m.PendingRune
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetPendingAsset() string {
	if m != nil {
		return m.PendingAsset
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetPendingTxId() string {
	if m != nil {
		return m.PendingTxId
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetRuneDepositValue() string {
	if m != nil {
		return m.RuneDepositValue
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetAssetDepositValue() string {
	if m != nil {
		return m.AssetDepositValue
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetRuneRedeemValue() string {
	if m != nil {
		return m.RuneRedeemValue
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetAssetRedeemValue() string {
	if m != nil {
		return m.AssetRedeemValue
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetLuviDepositValue() string {
	if m != nil {
		return m.LuviDepositValue
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetLuviRedeemValue() string {
	if m != nil {
		return m.LuviRedeemValue
	}
	return ""
}

func (m *QueryLiquidityProviderResponse) GetLuviGrowthPct() string {
	if m != nil {
		return m.LuviGrowthPct
	}
	return ""
}

type QueryLiquidityProvidersRequest struct {
	Asset  string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryLiquidityProvidersRequest) Reset()         { *m = QueryLiquidityProvidersRequest{} }
func (m *QueryLiquidityProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityProvidersRequest) ProtoMessage()    {}
func (*QueryLiquidityProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f17d11fe4edb1f7, []int{2}
}
func (m *QueryLiquidityProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityProvidersRequest.Merge(m, src)
}
func (m *QueryLiquidityProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityProvidersRequest proto.InternalMessageInfo

func (m *QueryLiquidityProvidersRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryLiquidityProvidersRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryLiquidityProvidersResponse struct {
	LiquidityProviders []*QueryLiquidityProviderResponse `protobuf:"bytes,1,rep,name=liquidity_providers,json=liquidityProviders,proto3" json:"liquidity_providers,omitempty"`
}

func (m *QueryLiquidityProvidersResponse) Reset()         { *m = QueryLiquidityProvidersResponse{} }
func (m *QueryLiquidityProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityProvidersResponse) ProtoMessage()    {}
func (*QueryLiquidityProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f17d11fe4edb1f7, []int{3}
}
func (m *QueryLiquidityProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityProvidersResponse.Merge(m, src)
}
func (m *QueryLiquidityProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityProvidersResponse proto.InternalMessageInfo

func (m *QueryLiquidityProvidersResponse) GetLiquidityProviders() []*QueryLiquidityProviderResponse {
	if m != nil {
		return m.LiquidityProviders
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryLiquidityProviderRequest)(nil), "types.QueryLiquidityProviderRequest")
	proto.RegisterType((*QueryLiquidityProviderResponse)(nil), "types.QueryLiquidityProviderResponse")
	proto.RegisterType((*QueryLiquidityProvidersRequest)(nil), "types.QueryLiquidityProvidersRequest")
	proto.RegisterType((*QueryLiquidityProvidersResponse)(nil), "types.QueryLiquidityProvidersResponse")
}

func init() {
	proto.RegisterFile("types/query_liquidity_provider.proto", fileDescriptor_9f17d11fe4edb1f7)
}

var fileDescriptor_9f17d11fe4edb1f7 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0xc7, 0x71, 0x28, 0xa4, 0x2c, 0x50, 0x60, 0x83, 0x52, 0xab, 0x52, 0x6d, 0x4a, 0x3f, 0x84,
	0xaa, 0x0a, 0xaa, 0x20, 0xf5, 0x4e, 0x14, 0x29, 0xad, 0x14, 0x55, 0xa9, 0x55, 0xa5, 0x52, 0x2f,
	0x96, 0xc3, 0xae, 0xec, 0x95, 0x1c, 0xdb, 0x78, 0xd7, 0x7c, 0xdc, 0xfa, 0x08, 0x7d, 0xac, 0x1e,
	0x73, 0xec, 0x09, 0x55, 0x70, 0xe3, 0x29, 0xaa, 0x9d, 0xb5, 0x43, 0x9c, 0x84, 0x9c, 0xd8, 0xfd,
	0xcd, 0x7f, 0xfe, 0x33, 0x8c, 0x3c, 0x8b, 0xde, 0x88, 0x45, 0x44, 0xf9, 0x60, 0x92, 0xd0, 0x78,
	0x61, 0xfb, 0x6c, 0x92, 0x30, 0xc2, 0xc4, 0xc2, 0x8e, 0xe2, 0x70, 0xca, 0x08, 0x8d, 0xfb, 0x51,
	0x1c, 0x8a, 0x10, 0x97, 0x40, 0xf5, 0xa2, 0xed, 0x86, 0x6e, 0x08, 0x64, 0x20, 0x4f, 0x2a, 0xd8,
	0x75, 0xd1, 0xcb, 0x6f, 0x32, 0xfd, 0x2c, 0xcb, 0x3e, 0x4f, 0x93, 0x2d, 0x3a, 0x49, 0x28, 0x17,
	0xb8, 0x8d, 0x4a, 0x0e, 0xe7, 0x54, 0xe8, 0x5a, 0x47, 0xeb, 0x55, 0x2c, 0x75, 0xc1, 0x3a, 0xda,
	0x77, 0x08, 0x89, 0x29, 0xe7, 0xfa, 0x1e, 0xf0, 0xec, 0x8a, 0x0f, 0x51, 0xd9, 0xa3, 0xcc, 0xf5,
	0x84, 0x5e, 0x84, 0x40, 0x7a, 0xeb, 0xfe, 0x2a, 0x23, 0x63, 0x57, 0x25, 0x1e, 0x85, 0x01, 0xa7,
	0xd8, 0xcc, 0x95, 0x3a, 0xae, 0x6c, 0x96, 0xa6, 0x02, 0x59, 0xd5, 0x57, 0xa8, 0x16, 0x27, 0x01,
	0xb5, 0xf3, 0xa5, 0xab, 0x92, 0x8d, 0xd2, 0xf2, 0xaf, 0x51, 0x1d, 0xb4, 0x37, 0x1a, 0xd5, 0x45,
	0x0d, 0x60, 0x26, 0x7a, 0x87, 0x1a, 0xbe, 0xc3, 0x41, 0x63, 0xa7, 0xcd, 0x3e, 0xe9, 0x68, 0xbd,
	0xa2, 0x55, 0x97, 0x78, 0x44, 0xc8, 0x67, 0x80, 0xf8, 0x23, 0x6a, 0x83, 0x6e, 0xc6, 0x84, 0x47,
	0x62, 0x67, 0x96, 0x89, 0x4b, 0x20, 0xc6, 0x32, 0xf6, 0x23, 0x0d, 0xa5, 0x19, 0x26, 0x2a, 0x25,
	0x01, 0x13, 0x5c, 0x2f, 0x6f, 0xff, 0x02, 0x00, 0x4b, 0xfd, 0xe0, 0x21, 0xaa, 0x45, 0x34, 0x20,
	0x2c, 0x70, 0x6d, 0xd9, 0xb6, 0xbe, 0x0f, 0xba, 0xe6, 0x66, 0x69, 0xe6, 0xb8, 0x55, 0x4d, 0x6f,
	0x56, 0x12, 0x50, 0xfc, 0x09, 0xd5, 0xb3, 0xa0, 0x1a, 0xd0, 0x53, 0xc8, 0x6a, 0x6d, 0x96, 0x66,
	0x3e, 0x60, 0x65, 0x26, 0x23, 0x98, 0x57, 0x77, 0x9b, 0x27, 0xe6, 0x36, 0x23, 0x7a, 0x45, 0x0d,
	0x2c, 0x85, 0xdf, 0xe7, 0x5f, 0x08, 0x3e, 0x41, 0x18, 0x66, 0x4a, 0x68, 0x14, 0x72, 0x26, 0xec,
	0xa9, 0xe3, 0x27, 0x54, 0x47, 0x50, 0xe0, 0x70, 0xb3, 0x34, 0x1f, 0x88, 0x5a, 0x4d, 0xc9, 0x4e,
	0x14, 0xba, 0x90, 0x04, 0x9f, 0xa2, 0x03, 0x35, 0xf6, 0xbc, 0x4d, 0x15, 0x6c, 0x9e, 0x6f, 0x96,
	0xe6, 0x43, 0x61, 0xab, 0x05, 0x30, 0x67, 0xf4, 0x1e, 0xb5, 0xa0, 0x60, 0x4c, 0x09, 0xa5, 0x57,
	0xa9, 0x4d, 0x0d, 0xda, 0x6e, 0xc0, 0x60, 0x80, 0x2b, 0xed, 0x07, 0x84, 0x95, 0x6b, 0x4e, 0x5c,
	0x07, 0x71, 0x53, 0xcd, 0x23, 0xaf, 0xf6, 0x93, 0x29, 0xbb, 0xd3, 0xe1, 0x33, 0xa5, 0x96, 0x91,
	0xbb, 0x7d, 0x80, 0x3a, 0x67, 0xdd, 0x50, 0x7d, 0xc8, 0xc0, 0x6d, 0x67, 0xf9, 0x39, 0x49, 0xad,
	0x1b, 0x87, 0x33, 0xe1, 0xd9, 0xd1, 0x58, 0xe8, 0x4d, 0x50, 0xd6, 0x25, 0x3e, 0x05, 0x7a, 0x3e,
	0x16, 0xdd, 0xaf, 0xbb, 0x36, 0x80, 0x3f, 0xbe, 0x6c, 0xdb, 0x95, 0xda, 0xcb, 0xad, 0xd4, 0x02,
	0x99, 0x3b, 0xfd, 0xd2, 0x95, 0xba, 0x40, 0x07, 0xf7, 0xdf, 0x05, 0xae, 0x6b, 0x9d, 0x62, 0xaf,
	0x7a, 0xf4, 0xb6, 0x0f, 0x2f, 0x43, 0xff, 0xf1, 0xb5, 0xb4, 0xb0, 0x7f, 0xcf, 0xff, 0xf8, 0xec,
	0xcf, 0xca, 0xd0, 0xae, 0x57, 0x86, 0xf6, 0x6f, 0x65, 0x68, 0xbf, 0xd7, 0x46, 0xe1, 0x7a, 0x6d,
	0x14, 0xfe, 0xae, 0x8d, 0xc2, 0xcf, 0x23, 0x97, 0x09, 0xdf, 0xb9, 0xec, 0x8f, 0xc3, 0xab, 0x81,
	0xf0, 0xc2, 0x78, 0xec, 0x39, 0x2c, 0x80, 0x53, 0x10, 0x12, 0x3a, 0x98, 0x0e, 0x07, 0xf3, 0xdb,
	0x5c, 0x36, 0x70, 0x59, 0x86, 0xb7, 0x68, 0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x93, 0xe5,
	0xbc, 0xd0, 0x04, 0x00, 0x00,
}

func (m *QueryLiquidityProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LuviGrowthPct) > 0 {
		i -= len(m.LuviGrowthPct)
		copy(dAtA[i:], m.LuviGrowthPct)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.LuviGrowthPct)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.LuviRedeemValue) > 0 {
		i -= len(m.LuviRedeemValue)
		copy(dAtA[i:], m.LuviRedeemValue)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.LuviRedeemValue)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.LuviDepositValue) > 0 {
		i -= len(m.LuviDepositValue)
		copy(dAtA[i:], m.LuviDepositValue)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.LuviDepositValue)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.AssetRedeemValue) > 0 {
		i -= len(m.AssetRedeemValue)
		copy(dAtA[i:], m.AssetRedeemValue)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.AssetRedeemValue)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RuneRedeemValue) > 0 {
		i -= len(m.RuneRedeemValue)
		copy(dAtA[i:], m.RuneRedeemValue)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.RuneRedeemValue)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.AssetDepositValue) > 0 {
		i -= len(m.AssetDepositValue)
		copy(dAtA[i:], m.AssetDepositValue)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.AssetDepositValue)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RuneDepositValue) > 0 {
		i -= len(m.RuneDepositValue)
		copy(dAtA[i:], m.RuneDepositValue)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.RuneDepositValue)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PendingTxId) > 0 {
		i -= len(m.PendingTxId)
		copy(dAtA[i:], m.PendingTxId)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.PendingTxId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PendingAsset) > 0 {
		i -= len(m.PendingAsset)
		copy(dAtA[i:], m.PendingAsset)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.PendingAsset)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PendingRune) > 0 {
		i -= len(m.PendingRune)
		copy(dAtA[i:], m.PendingRune)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.PendingRune)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Units) > 0 {
		i -= len(m.Units)
		copy(dAtA[i:], m.Units)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.Units)))
		i--
		dAtA[i] = 0x32
	}
	if m.LastWithdrawHeight != 0 {
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(m.LastWithdrawHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.LastAddHeight != 0 {
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(m.LastAddHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AssetAddress) > 0 {
		i -= len(m.AssetAddress)
		copy(dAtA[i:], m.AssetAddress)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.AssetAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RuneAddress) > 0 {
		i -= len(m.RuneAddress)
		copy(dAtA[i:], m.RuneAddress)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.RuneAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidityProviders) > 0 {
		for iNdEx := len(m.LiquidityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryLiquidityProvider(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryLiquidityProvider(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryLiquidityProvider(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLiquidityProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	return n
}

func (m *QueryLiquidityProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.RuneAddress)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.AssetAddress)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	if m.LastAddHeight != 0 {
		n += 1 + sovQueryLiquidityProvider(uint64(m.LastAddHeight))
	}
	if m.LastWithdrawHeight != 0 {
		n += 1 + sovQueryLiquidityProvider(uint64(m.LastWithdrawHeight))
	}
	l = len(m.Units)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.PendingRune)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.PendingAsset)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.PendingTxId)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.RuneDepositValue)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.AssetDepositValue)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.RuneRedeemValue)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.AssetRedeemValue)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.LuviDepositValue)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.LuviRedeemValue)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.LuviGrowthPct)
	if l > 0 {
		n += 2 + l + sovQueryLiquidityProvider(uint64(l))
	}
	return n
}

func (m *QueryLiquidityProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryLiquidityProvider(uint64(l))
	}
	return n
}

func (m *QueryLiquidityProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidityProviders) > 0 {
		for _, e := range m.LiquidityProviders {
			l = e.Size()
			n += 1 + l + sovQueryLiquidityProvider(uint64(l))
		}
	}
	return n
}

func sovQueryLiquidityProvider(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryLiquidityProvider(x uint64) (n int) {
	return sovQueryLiquidityProvider(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLiquidityProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryLiquidityProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryLiquidityProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryLiquidityProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastAddHeight", wireType)
			}
			m.LastAddHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastAddHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWithdrawHeight", wireType)
			}
			m.LastWithdrawHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWithdrawHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Units", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Units = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneDepositValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneDepositValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDepositValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetDepositValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuneRedeemValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuneRedeemValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetRedeemValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetRedeemValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuviDepositValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LuviDepositValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuviRedeemValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LuviRedeemValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuviGrowthPct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LuviGrowthPct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryLiquidityProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryLiquidityProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryLiquidityProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryLiquidityProvider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProviders = append(m.LiquidityProviders, &QueryLiquidityProviderResponse{})
			if err := m.LiquidityProviders[len(m.LiquidityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryLiquidityProvider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryLiquidityProvider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryLiquidityProvider(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryLiquidityProvider
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryLiquidityProvider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryLiquidityProvider
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryLiquidityProvider
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryLiquidityProvider
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryLiquidityProvider        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryLiquidityProvider          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryLiquidityProvider = fmt.Errorf("proto: unexpected end of group")
)
