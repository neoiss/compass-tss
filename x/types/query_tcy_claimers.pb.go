// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_tcy_claimers.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryTCYClaimerRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Height  string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryTCYClaimerRequest) Reset()         { *m = QueryTCYClaimerRequest{} }
func (m *QueryTCYClaimerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTCYClaimerRequest) ProtoMessage()    {}
func (*QueryTCYClaimerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb01ae4977d5eb1, []int{0}
}
func (m *QueryTCYClaimerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTCYClaimerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTCYClaimerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTCYClaimerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTCYClaimerRequest.Merge(m, src)
}
func (m *QueryTCYClaimerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTCYClaimerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTCYClaimerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTCYClaimerRequest proto.InternalMessageInfo

func (m *QueryTCYClaimerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryTCYClaimerRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

// Can we replace this with TCYClaimer proto? Check json fields...
type QueryTCYClaimerResponse struct {
	TcyClaimer []*QueryTCYClaimer `protobuf:"bytes,1,rep,name=tcy_claimer,json=tcyClaimer,proto3" json:"tcy_claimer,omitempty"`
}

func (m *QueryTCYClaimerResponse) Reset()         { *m = QueryTCYClaimerResponse{} }
func (m *QueryTCYClaimerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTCYClaimerResponse) ProtoMessage()    {}
func (*QueryTCYClaimerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb01ae4977d5eb1, []int{1}
}
func (m *QueryTCYClaimerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTCYClaimerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTCYClaimerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTCYClaimerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTCYClaimerResponse.Merge(m, src)
}
func (m *QueryTCYClaimerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTCYClaimerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTCYClaimerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTCYClaimerResponse proto.InternalMessageInfo

func (m *QueryTCYClaimerResponse) GetTcyClaimer() []*QueryTCYClaimer {
	if m != nil {
		return m.TcyClaimer
	}
	return nil
}

type QueryTCYClaimer struct {
	Asset     string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	L1Address string `protobuf:"bytes,2,opt,name=l1_address,json=l1Address,proto3" json:"l1_address,omitempty"`
	Amount    string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryTCYClaimer) Reset()         { *m = QueryTCYClaimer{} }
func (m *QueryTCYClaimer) String() string { return proto.CompactTextString(m) }
func (*QueryTCYClaimer) ProtoMessage()    {}
func (*QueryTCYClaimer) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb01ae4977d5eb1, []int{2}
}
func (m *QueryTCYClaimer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTCYClaimer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTCYClaimer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTCYClaimer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTCYClaimer.Merge(m, src)
}
func (m *QueryTCYClaimer) XXX_Size() int {
	return m.Size()
}
func (m *QueryTCYClaimer) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTCYClaimer.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTCYClaimer proto.InternalMessageInfo

func (m *QueryTCYClaimer) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryTCYClaimer) GetL1Address() string {
	if m != nil {
		return m.L1Address
	}
	return ""
}

func (m *QueryTCYClaimer) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type QueryTCYClaimersRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryTCYClaimersRequest) Reset()         { *m = QueryTCYClaimersRequest{} }
func (m *QueryTCYClaimersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTCYClaimersRequest) ProtoMessage()    {}
func (*QueryTCYClaimersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb01ae4977d5eb1, []int{3}
}
func (m *QueryTCYClaimersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTCYClaimersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTCYClaimersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTCYClaimersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTCYClaimersRequest.Merge(m, src)
}
func (m *QueryTCYClaimersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTCYClaimersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTCYClaimersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTCYClaimersRequest proto.InternalMessageInfo

func (m *QueryTCYClaimersRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryTCYClaimersResponse struct {
	TcyClaimers []*QueryTCYClaimer `protobuf:"bytes,1,rep,name=tcy_claimers,json=tcyClaimers,proto3" json:"tcy_claimers,omitempty"`
}

func (m *QueryTCYClaimersResponse) Reset()         { *m = QueryTCYClaimersResponse{} }
func (m *QueryTCYClaimersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTCYClaimersResponse) ProtoMessage()    {}
func (*QueryTCYClaimersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcb01ae4977d5eb1, []int{4}
}
func (m *QueryTCYClaimersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTCYClaimersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTCYClaimersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTCYClaimersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTCYClaimersResponse.Merge(m, src)
}
func (m *QueryTCYClaimersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTCYClaimersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTCYClaimersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTCYClaimersResponse proto.InternalMessageInfo

func (m *QueryTCYClaimersResponse) GetTcyClaimers() []*QueryTCYClaimer {
	if m != nil {
		return m.TcyClaimers
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTCYClaimerRequest)(nil), "types.QueryTCYClaimerRequest")
	proto.RegisterType((*QueryTCYClaimerResponse)(nil), "types.QueryTCYClaimerResponse")
	proto.RegisterType((*QueryTCYClaimer)(nil), "types.QueryTCYClaimer")
	proto.RegisterType((*QueryTCYClaimersRequest)(nil), "types.QueryTCYClaimersRequest")
	proto.RegisterType((*QueryTCYClaimersResponse)(nil), "types.QueryTCYClaimersResponse")
}

func init() { proto.RegisterFile("types/query_tcy_claimers.proto", fileDescriptor_bcb01ae4977d5eb1) }

var fileDescriptor_bcb01ae4977d5eb1 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x31, 0x6f, 0xf2, 0x30,
	0x10, 0xc5, 0x1f, 0x82, 0x4f, 0x1c, 0x95, 0x2a, 0x59, 0x15, 0xb5, 0x2a, 0xd5, 0xa0, 0x4c, 0x4c,
	0x89, 0x80, 0xa1, 0xea, 0x58, 0xd8, 0xaa, 0x2e, 0x8d, 0xda, 0xa1, 0x5d, 0x90, 0x09, 0x56, 0x12,
	0x29, 0xc4, 0x10, 0x3b, 0x55, 0xf3, 0x2f, 0xfa, 0xb3, 0x3a, 0x32, 0x76, 0x42, 0x15, 0x6c, 0xfc,
	0x8a, 0x0a, 0xdb, 0x08, 0x4a, 0x86, 0x4e, 0x77, 0xf7, 0x9e, 0xde, 0xf9, 0x3d, 0x1f, 0x50, 0x55,
	0xcc, 0xb9, 0xf4, 0x16, 0x39, 0xcf, 0x8a, 0xb1, 0x0a, 0x8a, 0x71, 0x90, 0xb0, 0x78, 0xc6, 0x33,
	0xe9, 0xce, 0x33, 0xa1, 0x04, 0xae, 0x69, 0xfe, 0xea, 0x22, 0x14, 0xa1, 0xd0, 0x88, 0xb7, 0xeb,
	0x0c, 0xe9, 0xdc, 0x43, 0xeb, 0x71, 0x27, 0x7c, 0x1a, 0xbd, 0x8c, 0x8c, 0xcc, 0xe7, 0x8b, 0x9c,
	0x4b, 0x85, 0x09, 0xfc, 0x67, 0xd3, 0x69, 0xc6, 0xa5, 0x24, 0xa8, 0x83, 0xba, 0x0d, 0x7f, 0x3f,
	0xe2, 0x16, 0xd4, 0x23, 0x1e, 0x87, 0x91, 0x22, 0xff, 0x34, 0x61, 0x27, 0xc7, 0x87, 0xcb, 0xd2,
	0x2e, 0x39, 0x17, 0xa9, 0xe4, 0xf8, 0x06, 0x9a, 0x47, 0xce, 0x08, 0xea, 0x54, 0xbb, 0xcd, 0x7e,
	0xcb, 0xd5, 0xce, 0xdc, 0x53, 0x11, 0xa8, 0xa0, 0xb0, 0xbd, 0x93, 0xc3, 0xf9, 0x09, 0x8d, 0xdb,
	0x50, 0x63, 0x52, 0x72, 0x65, 0x6c, 0x0d, 0x1b, 0xdb, 0x55, 0xdb, 0x00, 0xbe, 0x29, 0xf8, 0x1a,
	0x20, 0xe9, 0x8d, 0xf7, 0xe6, 0x8d, 0xc7, 0x46, 0xd2, 0xbb, 0xb3, 0xf6, 0x1d, 0xa8, 0xb3, 0x99,
	0xc8, 0x53, 0x45, 0xaa, 0x7a, 0x01, 0x6c, 0x57, 0x6d, 0x8b, 0xf8, 0xb6, 0x3a, 0xbd, 0x52, 0x14,
	0xb9, 0xff, 0x97, 0x43, 0x7a, 0xf4, 0x2b, 0xfd, 0x33, 0x90, 0xb2, 0xc4, 0xc6, 0xbf, 0x85, 0xb3,
	0xe3, 0xc3, 0xfc, 0x91, 0xbf, 0x79, 0xc8, 0x2f, 0x87, 0x0f, 0x9f, 0x6b, 0x8a, 0x96, 0x6b, 0x8a,
	0xbe, 0xd7, 0x14, 0x7d, 0x6c, 0x68, 0x65, 0xb9, 0xa1, 0x95, 0xaf, 0x0d, 0xad, 0xbc, 0xf6, 0xc3,
	0x58, 0x25, 0x6c, 0xe2, 0x06, 0x62, 0xe6, 0xa9, 0x48, 0x64, 0x41, 0xc4, 0xe2, 0x54, 0x77, 0xa9,
	0x98, 0x72, 0xef, 0x6d, 0xe0, 0xbd, 0x1f, 0xe3, 0xbb, 0xa7, 0x26, 0x75, 0x7d, 0xf5, 0xc1, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0x08, 0xe1, 0x61, 0x34, 0x02, 0x00, 0x00,
}

func (m *QueryTCYClaimerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTCYClaimerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTCYClaimerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryTcyClaimers(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQueryTcyClaimers(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTCYClaimerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTCYClaimerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTCYClaimerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TcyClaimer) > 0 {
		for iNdEx := len(m.TcyClaimer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcyClaimer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTcyClaimers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTCYClaimer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTCYClaimer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTCYClaimer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQueryTcyClaimers(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.L1Address) > 0 {
		i -= len(m.L1Address)
		copy(dAtA[i:], m.L1Address)
		i = encodeVarintQueryTcyClaimers(dAtA, i, uint64(len(m.L1Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryTcyClaimers(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTCYClaimersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTCYClaimersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTCYClaimersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryTcyClaimers(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTCYClaimersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTCYClaimersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTCYClaimersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TcyClaimers) > 0 {
		for iNdEx := len(m.TcyClaimers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TcyClaimers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTcyClaimers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryTcyClaimers(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryTcyClaimers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTCYClaimerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQueryTcyClaimers(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryTcyClaimers(uint64(l))
	}
	return n
}

func (m *QueryTCYClaimerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TcyClaimer) > 0 {
		for _, e := range m.TcyClaimer {
			l = e.Size()
			n += 1 + l + sovQueryTcyClaimers(uint64(l))
		}
	}
	return n
}

func (m *QueryTCYClaimer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryTcyClaimers(uint64(l))
	}
	l = len(m.L1Address)
	if l > 0 {
		n += 1 + l + sovQueryTcyClaimers(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQueryTcyClaimers(uint64(l))
	}
	return n
}

func (m *QueryTCYClaimersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryTcyClaimers(uint64(l))
	}
	return n
}

func (m *QueryTCYClaimersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TcyClaimers) > 0 {
		for _, e := range m.TcyClaimers {
			l = e.Size()
			n += 1 + l + sovQueryTcyClaimers(uint64(l))
		}
	}
	return n
}

func sovQueryTcyClaimers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryTcyClaimers(x uint64) (n int) {
	return sovQueryTcyClaimers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTCYClaimerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTcyClaimers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTCYClaimerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTCYClaimerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTcyClaimers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTCYClaimerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTcyClaimers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTCYClaimerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTCYClaimerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcyClaimer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcyClaimer = append(m.TcyClaimer, &QueryTCYClaimer{})
			if err := m.TcyClaimer[len(m.TcyClaimer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTcyClaimers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTCYClaimer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTcyClaimers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTCYClaimer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTCYClaimer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTcyClaimers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTCYClaimersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTcyClaimers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTCYClaimersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTCYClaimersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTcyClaimers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTCYClaimersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTcyClaimers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTCYClaimersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTCYClaimersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcyClaimers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTcyClaimers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TcyClaimers = append(m.TcyClaimers, &QueryTCYClaimer{})
			if err := m.TcyClaimers[len(m.TcyClaimers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTcyClaimers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTcyClaimers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryTcyClaimers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryTcyClaimers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTcyClaimers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTcyClaimers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryTcyClaimers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryTcyClaimers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryTcyClaimers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryTcyClaimers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryTcyClaimers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryTcyClaimers = fmt.Errorf("proto: unexpected end of group")
)
