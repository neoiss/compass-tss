// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_derived_pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryDerivedPoolRequest struct {
	Asset  string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryDerivedPoolRequest) Reset()         { *m = QueryDerivedPoolRequest{} }
func (m *QueryDerivedPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivedPoolRequest) ProtoMessage()    {}
func (*QueryDerivedPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e27877577b0667, []int{0}
}
func (m *QueryDerivedPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivedPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivedPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivedPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivedPoolRequest.Merge(m, src)
}
func (m *QueryDerivedPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivedPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivedPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivedPoolRequest proto.InternalMessageInfo

func (m *QueryDerivedPoolRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryDerivedPoolRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryDerivedPoolResponse struct {
	Asset        string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset"`
	Status       string `protobuf:"bytes,2,opt,name=status,proto3" json:"status"`
	Decimals     int64  `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	BalanceAsset string `protobuf:"bytes,4,opt,name=balance_asset,json=balanceAsset,proto3" json:"balance_asset"`
	BalanceRune  string `protobuf:"bytes,5,opt,name=balance_rune,json=balanceRune,proto3" json:"balance_rune"`
	// the depth of the derived virtual pool relative to L1 pool (in basis points)
	DerivedDepthBps string `protobuf:"bytes,6,opt,name=derived_depth_bps,json=derivedDepthBps,proto3" json:"derived_depth_bps"`
}

func (m *QueryDerivedPoolResponse) Reset()         { *m = QueryDerivedPoolResponse{} }
func (m *QueryDerivedPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivedPoolResponse) ProtoMessage()    {}
func (*QueryDerivedPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e27877577b0667, []int{1}
}
func (m *QueryDerivedPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivedPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivedPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivedPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivedPoolResponse.Merge(m, src)
}
func (m *QueryDerivedPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivedPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivedPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivedPoolResponse proto.InternalMessageInfo

func (m *QueryDerivedPoolResponse) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *QueryDerivedPoolResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryDerivedPoolResponse) GetDecimals() int64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *QueryDerivedPoolResponse) GetBalanceAsset() string {
	if m != nil {
		return m.BalanceAsset
	}
	return ""
}

func (m *QueryDerivedPoolResponse) GetBalanceRune() string {
	if m != nil {
		return m.BalanceRune
	}
	return ""
}

func (m *QueryDerivedPoolResponse) GetDerivedDepthBps() string {
	if m != nil {
		return m.DerivedDepthBps
	}
	return ""
}

type QueryDerivedPoolsRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryDerivedPoolsRequest) Reset()         { *m = QueryDerivedPoolsRequest{} }
func (m *QueryDerivedPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivedPoolsRequest) ProtoMessage()    {}
func (*QueryDerivedPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e27877577b0667, []int{2}
}
func (m *QueryDerivedPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivedPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivedPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivedPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivedPoolsRequest.Merge(m, src)
}
func (m *QueryDerivedPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivedPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivedPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivedPoolsRequest proto.InternalMessageInfo

func (m *QueryDerivedPoolsRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryDerivedPoolsResponse struct {
	Pools []*QueryDerivedPoolResponse `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *QueryDerivedPoolsResponse) Reset()         { *m = QueryDerivedPoolsResponse{} }
func (m *QueryDerivedPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivedPoolsResponse) ProtoMessage()    {}
func (*QueryDerivedPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00e27877577b0667, []int{3}
}
func (m *QueryDerivedPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivedPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivedPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivedPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivedPoolsResponse.Merge(m, src)
}
func (m *QueryDerivedPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivedPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivedPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivedPoolsResponse proto.InternalMessageInfo

func (m *QueryDerivedPoolsResponse) GetPools() []*QueryDerivedPoolResponse {
	if m != nil {
		return m.Pools
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryDerivedPoolRequest)(nil), "types.QueryDerivedPoolRequest")
	proto.RegisterType((*QueryDerivedPoolResponse)(nil), "types.QueryDerivedPoolResponse")
	proto.RegisterType((*QueryDerivedPoolsRequest)(nil), "types.QueryDerivedPoolsRequest")
	proto.RegisterType((*QueryDerivedPoolsResponse)(nil), "types.QueryDerivedPoolsResponse")
}

func init() { proto.RegisterFile("types/query_derived_pool.proto", fileDescriptor_00e27877577b0667) }

var fileDescriptor_00e27877577b0667 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcf, 0x4e, 0xbb, 0x40,
	0x18, 0xec, 0xb6, 0x3f, 0xc8, 0xaf, 0x5b, 0x8d, 0x96, 0x54, 0xc5, 0x1e, 0xa0, 0xe1, 0xd4, 0x13,
	0x24, 0x6d, 0xf4, 0x5e, 0xd2, 0xc4, 0x8b, 0x07, 0xdd, 0xa3, 0x17, 0xc2, 0x9f, 0x0d, 0x90, 0x50,
	0x96, 0xb2, 0x4b, 0x63, 0xdf, 0xc2, 0xf7, 0xf0, 0x45, 0x3c, 0xf6, 0xe8, 0x89, 0x98, 0xf6, 0xc6,
	0x53, 0x18, 0x16, 0x50, 0x49, 0xf5, 0xc4, 0x37, 0x33, 0xcc, 0x7c, 0xc9, 0x7c, 0x0b, 0x15, 0xb6,
	0x4d, 0x30, 0x35, 0xd6, 0x19, 0x4e, 0xb7, 0x96, 0x87, 0xd3, 0x70, 0x83, 0x3d, 0x2b, 0x21, 0x24,
	0xd2, 0x93, 0x94, 0x30, 0x22, 0x09, 0x5c, 0x1f, 0x8f, 0x7c, 0xe2, 0x13, 0xce, 0x18, 0xe5, 0x54,
	0x89, 0xda, 0x1d, 0xbc, 0x7a, 0x2c, 0x8d, 0xcb, 0xca, 0xf7, 0x40, 0x48, 0x84, 0xf0, 0x3a, 0xc3,
	0x94, 0x49, 0x23, 0x28, 0xd8, 0x94, 0x62, 0x26, 0x83, 0x09, 0x98, 0xf6, 0x51, 0x05, 0xa4, 0x4b,
	0x28, 0x06, 0x38, 0xf4, 0x03, 0x26, 0x77, 0x39, 0x5d, 0x23, 0xed, 0xb5, 0x0b, 0xe5, 0xe3, 0x24,
	0x9a, 0x90, 0x98, 0x62, 0x49, 0x6d, 0x45, 0x99, 0xfd, 0x22, 0x57, 0x2b, 0xa2, 0x49, 0xd5, 0xa0,
	0x48, 0x99, 0xcd, 0x32, 0x5a, 0xa5, 0x9a, 0xb0, 0xc8, 0xd5, 0x9a, 0x41, 0xf5, 0x57, 0x1a, 0xc3,
	0xff, 0x1e, 0x76, 0xc3, 0x95, 0x1d, 0x51, 0xb9, 0x37, 0x01, 0xd3, 0x1e, 0xfa, 0xc2, 0xd2, 0x2d,
	0x3c, 0x75, 0xec, 0xc8, 0x8e, 0x5d, 0x6c, 0x55, 0x8b, 0xfe, 0xf1, 0x98, 0x61, 0x91, 0xab, 0x6d,
	0x01, 0x9d, 0xd4, 0x70, 0xc1, 0xf7, 0xce, 0x61, 0x83, 0xad, 0x34, 0x8b, 0xb1, 0x2c, 0x70, 0xdb,
	0x79, 0x91, 0xab, 0x2d, 0x1e, 0x0d, 0x6a, 0x84, 0xb2, 0x18, 0x4b, 0x0b, 0x38, 0x6c, 0x6a, 0xf6,
	0x70, 0xc2, 0x02, 0xcb, 0x49, 0xa8, 0x2c, 0x72, 0xe7, 0x45, 0x91, 0xab, 0xc7, 0x22, 0x3a, 0xab,
	0xa9, 0x65, 0xc9, 0x98, 0x09, 0xd5, 0x66, 0xc7, 0x65, 0xd1, 0xa6, 0xf7, 0xef, 0x86, 0x41, 0xab,
	0x61, 0x04, 0xaf, 0x7f, 0xf1, 0xd4, 0x0d, 0xdf, 0x40, 0xa1, 0x3c, 0x39, 0x95, 0xc1, 0xa4, 0x37,
	0x1d, 0xcc, 0x54, 0x9d, 0x1f, 0x5d, 0xff, 0xeb, 0x22, 0xa8, 0xfa, 0xdb, 0xbc, 0x7f, 0xdb, 0x2b,
	0x60, 0xb7, 0x57, 0xc0, 0xc7, 0x5e, 0x01, 0x2f, 0x07, 0xa5, 0xb3, 0x3b, 0x28, 0x9d, 0xf7, 0x83,
	0xd2, 0x79, 0x9a, 0xf9, 0x21, 0x8b, 0x6c, 0x47, 0x77, 0xc9, 0xca, 0x60, 0x01, 0x49, 0xdd, 0xc0,
	0x0e, 0x63, 0x3e, 0xc5, 0xc4, 0xc3, 0xc6, 0x66, 0x6e, 0x3c, 0xff, 0xe4, 0xcb, 0x6d, 0x8e, 0xc8,
	0xdf, 0xd4, 0xfc, 0x33, 0x00, 0x00, 0xff, 0xff, 0x82, 0xe3, 0x5f, 0x36, 0x92, 0x02, 0x00, 0x00,
}

func (m *QueryDerivedPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivedPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivedPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryDerivedPool(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryDerivedPool(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivedPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivedPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivedPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DerivedDepthBps) > 0 {
		i -= len(m.DerivedDepthBps)
		copy(dAtA[i:], m.DerivedDepthBps)
		i = encodeVarintQueryDerivedPool(dAtA, i, uint64(len(m.DerivedDepthBps)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BalanceRune) > 0 {
		i -= len(m.BalanceRune)
		copy(dAtA[i:], m.BalanceRune)
		i = encodeVarintQueryDerivedPool(dAtA, i, uint64(len(m.BalanceRune)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BalanceAsset) > 0 {
		i -= len(m.BalanceAsset)
		copy(dAtA[i:], m.BalanceAsset)
		i = encodeVarintQueryDerivedPool(dAtA, i, uint64(len(m.BalanceAsset)))
		i--
		dAtA[i] = 0x22
	}
	if m.Decimals != 0 {
		i = encodeVarintQueryDerivedPool(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQueryDerivedPool(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQueryDerivedPool(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivedPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivedPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivedPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryDerivedPool(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivedPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivedPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivedPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryDerivedPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryDerivedPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryDerivedPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDerivedPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryDerivedPool(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryDerivedPool(uint64(l))
	}
	return n
}

func (m *QueryDerivedPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQueryDerivedPool(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQueryDerivedPool(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovQueryDerivedPool(uint64(m.Decimals))
	}
	l = len(m.BalanceAsset)
	if l > 0 {
		n += 1 + l + sovQueryDerivedPool(uint64(l))
	}
	l = len(m.BalanceRune)
	if l > 0 {
		n += 1 + l + sovQueryDerivedPool(uint64(l))
	}
	l = len(m.DerivedDepthBps)
	if l > 0 {
		n += 1 + l + sovQueryDerivedPool(uint64(l))
	}
	return n
}

func (m *QueryDerivedPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryDerivedPool(uint64(l))
	}
	return n
}

func (m *QueryDerivedPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQueryDerivedPool(uint64(l))
		}
	}
	return n
}

func sovQueryDerivedPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryDerivedPool(x uint64) (n int) {
	return sovQueryDerivedPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDerivedPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryDerivedPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivedPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivedPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryDerivedPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivedPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryDerivedPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivedPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivedPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceRune = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivedDepthBps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivedDepthBps = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryDerivedPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivedPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryDerivedPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivedPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivedPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryDerivedPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivedPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryDerivedPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivedPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivedPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &QueryDerivedPoolResponse{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryDerivedPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryDerivedPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryDerivedPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryDerivedPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryDerivedPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryDerivedPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryDerivedPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryDerivedPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryDerivedPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryDerivedPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryDerivedPool = fmt.Errorf("proto: unexpected end of group")
)
