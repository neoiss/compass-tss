// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_ragnarok.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryRagnarokRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryRagnarokRequest) Reset()         { *m = QueryRagnarokRequest{} }
func (m *QueryRagnarokRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRagnarokRequest) ProtoMessage()    {}
func (*QueryRagnarokRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da23be3cf4a1a259, []int{0}
}
func (m *QueryRagnarokRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRagnarokRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRagnarokRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRagnarokRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRagnarokRequest.Merge(m, src)
}
func (m *QueryRagnarokRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRagnarokRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRagnarokRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRagnarokRequest proto.InternalMessageInfo

func (m *QueryRagnarokRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryRagnarokResponse struct {
	InProgress bool `protobuf:"varint,1,opt,name=in_progress,json=inProgress,proto3" json:"in_progress,omitempty"`
}

func (m *QueryRagnarokResponse) Reset()         { *m = QueryRagnarokResponse{} }
func (m *QueryRagnarokResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRagnarokResponse) ProtoMessage()    {}
func (*QueryRagnarokResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da23be3cf4a1a259, []int{1}
}
func (m *QueryRagnarokResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRagnarokResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRagnarokResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRagnarokResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRagnarokResponse.Merge(m, src)
}
func (m *QueryRagnarokResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRagnarokResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRagnarokResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRagnarokResponse proto.InternalMessageInfo

func (m *QueryRagnarokResponse) GetInProgress() bool {
	if m != nil {
		return m.InProgress
	}
	return false
}

func init() {
	proto.RegisterType((*QueryRagnarokRequest)(nil), "types.QueryRagnarokRequest")
	proto.RegisterType((*QueryRagnarokResponse)(nil), "types.QueryRagnarokResponse")
}

func init() { proto.RegisterFile("types/query_ragnarok.proto", fileDescriptor_da23be3cf4a1a259) }

var fileDescriptor_da23be3cf4a1a259 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0x8c, 0x2f, 0x4a, 0x4c, 0xcf, 0x4b, 0x2c, 0xca, 0xcf,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0xcb, 0x49, 0x89, 0xa4, 0xe7, 0xa7, 0xe7,
	0x83, 0x45, 0xf4, 0x41, 0x2c, 0x88, 0xa4, 0x92, 0x1e, 0x97, 0x48, 0x20, 0x48, 0x53, 0x10, 0x54,
	0x4f, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x18, 0x17, 0x5b, 0x46, 0x6a, 0x66, 0x7a,
	0x46, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x94, 0xa7, 0x64, 0xc1, 0x25, 0x8a, 0xa6,
	0xbe, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x9e, 0x8b, 0x3b, 0x33, 0x2f, 0xbe, 0xa0, 0x28,
	0x3f, 0xbd, 0x28, 0xb5, 0xb8, 0x18, 0xac, 0x8b, 0x23, 0x88, 0x2b, 0x33, 0x2f, 0x00, 0x2a, 0xe2,
	0xe4, 0x73, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78,
	0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x46, 0xe9, 0x99, 0x25,
	0x39, 0x89, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x25, 0x19, 0xf9, 0x45, 0xc9, 0x19, 0x89, 0x99,
	0x79, 0x60, 0x56, 0x5e, 0x7e, 0x4a, 0xaa, 0x7e, 0x99, 0xb1, 0x7e, 0x05, 0xb2, 0x38, 0xc8, 0x37,
	0x49, 0x6c, 0x60, 0xe7, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x58, 0x33, 0x12, 0xf9,
	0x00, 0x00, 0x00,
}

func (m *QueryRagnarokRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRagnarokRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRagnarokRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryRagnarok(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRagnarokResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRagnarokResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRagnarokResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InProgress {
		i--
		if m.InProgress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryRagnarok(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryRagnarok(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRagnarokRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryRagnarok(uint64(l))
	}
	return n
}

func (m *QueryRagnarokResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InProgress {
		n += 2
	}
	return n
}

func sovQueryRagnarok(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryRagnarok(x uint64) (n int) {
	return sovQueryRagnarok(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRagnarokRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryRagnarok
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRagnarokRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRagnarokRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryRagnarok
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryRagnarok
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryRagnarok
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryRagnarok(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryRagnarok
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRagnarokResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryRagnarok
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRagnarokResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRagnarokResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InProgress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryRagnarok
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InProgress = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueryRagnarok(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryRagnarok
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryRagnarok(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryRagnarok
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryRagnarok
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryRagnarok
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryRagnarok
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryRagnarok
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryRagnarok
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryRagnarok        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryRagnarok          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryRagnarok = fmt.Errorf("proto: unexpected end of group")
)
