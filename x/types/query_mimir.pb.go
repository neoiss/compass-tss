// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_mimir.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryMimirValuesRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryMimirValuesRequest) Reset()         { *m = QueryMimirValuesRequest{} }
func (m *QueryMimirValuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMimirValuesRequest) ProtoMessage()    {}
func (*QueryMimirValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{0}
}
func (m *QueryMimirValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirValuesRequest.Merge(m, src)
}
func (m *QueryMimirValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirValuesRequest proto.InternalMessageInfo

func (m *QueryMimirValuesRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryMimirValuesResponse struct {
	Mimirs []*Mimir `protobuf:"bytes,1,rep,name=mimirs,proto3" json:"mimirs,omitempty"`
}

func (m *QueryMimirValuesResponse) Reset()         { *m = QueryMimirValuesResponse{} }
func (m *QueryMimirValuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMimirValuesResponse) ProtoMessage()    {}
func (*QueryMimirValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{1}
}
func (m *QueryMimirValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirValuesResponse.Merge(m, src)
}
func (m *QueryMimirValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirValuesResponse proto.InternalMessageInfo

func (m *QueryMimirValuesResponse) GetMimirs() []*Mimir {
	if m != nil {
		return m.Mimirs
	}
	return nil
}

type QueryMimirWithKeyRequest struct {
	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryMimirWithKeyRequest) Reset()         { *m = QueryMimirWithKeyRequest{} }
func (m *QueryMimirWithKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMimirWithKeyRequest) ProtoMessage()    {}
func (*QueryMimirWithKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{2}
}
func (m *QueryMimirWithKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirWithKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirWithKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirWithKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirWithKeyRequest.Merge(m, src)
}
func (m *QueryMimirWithKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirWithKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirWithKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirWithKeyRequest proto.InternalMessageInfo

func (m *QueryMimirWithKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *QueryMimirWithKeyRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryMimirWithKeyResponse struct {
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryMimirWithKeyResponse) Reset()         { *m = QueryMimirWithKeyResponse{} }
func (m *QueryMimirWithKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMimirWithKeyResponse) ProtoMessage()    {}
func (*QueryMimirWithKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{3}
}
func (m *QueryMimirWithKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirWithKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirWithKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirWithKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirWithKeyResponse.Merge(m, src)
}
func (m *QueryMimirWithKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirWithKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirWithKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirWithKeyResponse proto.InternalMessageInfo

func (m *QueryMimirWithKeyResponse) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type QueryMimirAdminValuesRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryMimirAdminValuesRequest) Reset()         { *m = QueryMimirAdminValuesRequest{} }
func (m *QueryMimirAdminValuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMimirAdminValuesRequest) ProtoMessage()    {}
func (*QueryMimirAdminValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{4}
}
func (m *QueryMimirAdminValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirAdminValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirAdminValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirAdminValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirAdminValuesRequest.Merge(m, src)
}
func (m *QueryMimirAdminValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirAdminValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirAdminValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirAdminValuesRequest proto.InternalMessageInfo

func (m *QueryMimirAdminValuesRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryMimirAdminValuesResponse struct {
	AdminMimirs []*Mimir `protobuf:"bytes,1,rep,name=admin_mimirs,json=adminMimirs,proto3" json:"admin_mimirs,omitempty"`
}

func (m *QueryMimirAdminValuesResponse) Reset()         { *m = QueryMimirAdminValuesResponse{} }
func (m *QueryMimirAdminValuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMimirAdminValuesResponse) ProtoMessage()    {}
func (*QueryMimirAdminValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{5}
}
func (m *QueryMimirAdminValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirAdminValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirAdminValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirAdminValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirAdminValuesResponse.Merge(m, src)
}
func (m *QueryMimirAdminValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirAdminValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirAdminValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirAdminValuesResponse proto.InternalMessageInfo

func (m *QueryMimirAdminValuesResponse) GetAdminMimirs() []*Mimir {
	if m != nil {
		return m.AdminMimirs
	}
	return nil
}

type QueryMimirNodesAllValuesRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryMimirNodesAllValuesRequest) Reset()         { *m = QueryMimirNodesAllValuesRequest{} }
func (m *QueryMimirNodesAllValuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMimirNodesAllValuesRequest) ProtoMessage()    {}
func (*QueryMimirNodesAllValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{6}
}
func (m *QueryMimirNodesAllValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirNodesAllValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirNodesAllValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirNodesAllValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirNodesAllValuesRequest.Merge(m, src)
}
func (m *QueryMimirNodesAllValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirNodesAllValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirNodesAllValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirNodesAllValuesRequest proto.InternalMessageInfo

func (m *QueryMimirNodesAllValuesRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryMimirNodesAllValuesResponse struct {
	Mimirs []NodeMimir `protobuf:"bytes,1,rep,name=mimirs,proto3" json:"mimirs"`
}

func (m *QueryMimirNodesAllValuesResponse) Reset()         { *m = QueryMimirNodesAllValuesResponse{} }
func (m *QueryMimirNodesAllValuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMimirNodesAllValuesResponse) ProtoMessage()    {}
func (*QueryMimirNodesAllValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{7}
}
func (m *QueryMimirNodesAllValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirNodesAllValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirNodesAllValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirNodesAllValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirNodesAllValuesResponse.Merge(m, src)
}
func (m *QueryMimirNodesAllValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirNodesAllValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirNodesAllValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirNodesAllValuesResponse proto.InternalMessageInfo

func (m *QueryMimirNodesAllValuesResponse) GetMimirs() []NodeMimir {
	if m != nil {
		return m.Mimirs
	}
	return nil
}

type QueryMimirNodesValuesRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryMimirNodesValuesRequest) Reset()         { *m = QueryMimirNodesValuesRequest{} }
func (m *QueryMimirNodesValuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMimirNodesValuesRequest) ProtoMessage()    {}
func (*QueryMimirNodesValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{8}
}
func (m *QueryMimirNodesValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirNodesValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirNodesValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirNodesValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirNodesValuesRequest.Merge(m, src)
}
func (m *QueryMimirNodesValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirNodesValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirNodesValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirNodesValuesRequest proto.InternalMessageInfo

func (m *QueryMimirNodesValuesRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryMimirNodesValuesResponse struct {
	Mimirs []*Mimir `protobuf:"bytes,1,rep,name=mimirs,proto3" json:"mimirs,omitempty"`
}

func (m *QueryMimirNodesValuesResponse) Reset()         { *m = QueryMimirNodesValuesResponse{} }
func (m *QueryMimirNodesValuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMimirNodesValuesResponse) ProtoMessage()    {}
func (*QueryMimirNodesValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{9}
}
func (m *QueryMimirNodesValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirNodesValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirNodesValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirNodesValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirNodesValuesResponse.Merge(m, src)
}
func (m *QueryMimirNodesValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirNodesValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirNodesValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirNodesValuesResponse proto.InternalMessageInfo

func (m *QueryMimirNodesValuesResponse) GetMimirs() []*Mimir {
	if m != nil {
		return m.Mimirs
	}
	return nil
}

type QueryMimirNodeValuesRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Height  string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryMimirNodeValuesRequest) Reset()         { *m = QueryMimirNodeValuesRequest{} }
func (m *QueryMimirNodeValuesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMimirNodeValuesRequest) ProtoMessage()    {}
func (*QueryMimirNodeValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{10}
}
func (m *QueryMimirNodeValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirNodeValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirNodeValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirNodeValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirNodeValuesRequest.Merge(m, src)
}
func (m *QueryMimirNodeValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirNodeValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirNodeValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirNodeValuesRequest proto.InternalMessageInfo

func (m *QueryMimirNodeValuesRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryMimirNodeValuesRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryMimirNodeValuesResponse struct {
	NodeMimirs []*Mimir `protobuf:"bytes,1,rep,name=node_mimirs,json=nodeMimirs,proto3" json:"node_mimirs,omitempty"`
}

func (m *QueryMimirNodeValuesResponse) Reset()         { *m = QueryMimirNodeValuesResponse{} }
func (m *QueryMimirNodeValuesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMimirNodeValuesResponse) ProtoMessage()    {}
func (*QueryMimirNodeValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{11}
}
func (m *QueryMimirNodeValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMimirNodeValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMimirNodeValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMimirNodeValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMimirNodeValuesResponse.Merge(m, src)
}
func (m *QueryMimirNodeValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMimirNodeValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMimirNodeValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMimirNodeValuesResponse proto.InternalMessageInfo

func (m *QueryMimirNodeValuesResponse) GetNodeMimirs() []*Mimir {
	if m != nil {
		return m.NodeMimirs
	}
	return nil
}

type Mimir struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Mimir) Reset()         { *m = Mimir{} }
func (m *Mimir) String() string { return proto.CompactTextString(m) }
func (*Mimir) ProtoMessage()    {}
func (*Mimir) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae8c053a533c659, []int{12}
}
func (m *Mimir) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mimir) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mimir.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mimir) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mimir.Merge(m, src)
}
func (m *Mimir) XXX_Size() int {
	return m.Size()
}
func (m *Mimir) XXX_DiscardUnknown() {
	xxx_messageInfo_Mimir.DiscardUnknown(m)
}

var xxx_messageInfo_Mimir proto.InternalMessageInfo

func (m *Mimir) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Mimir) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryMimirValuesRequest)(nil), "types.QueryMimirValuesRequest")
	proto.RegisterType((*QueryMimirValuesResponse)(nil), "types.QueryMimirValuesResponse")
	proto.RegisterType((*QueryMimirWithKeyRequest)(nil), "types.QueryMimirWithKeyRequest")
	proto.RegisterType((*QueryMimirWithKeyResponse)(nil), "types.QueryMimirWithKeyResponse")
	proto.RegisterType((*QueryMimirAdminValuesRequest)(nil), "types.QueryMimirAdminValuesRequest")
	proto.RegisterType((*QueryMimirAdminValuesResponse)(nil), "types.QueryMimirAdminValuesResponse")
	proto.RegisterType((*QueryMimirNodesAllValuesRequest)(nil), "types.QueryMimirNodesAllValuesRequest")
	proto.RegisterType((*QueryMimirNodesAllValuesResponse)(nil), "types.QueryMimirNodesAllValuesResponse")
	proto.RegisterType((*QueryMimirNodesValuesRequest)(nil), "types.QueryMimirNodesValuesRequest")
	proto.RegisterType((*QueryMimirNodesValuesResponse)(nil), "types.QueryMimirNodesValuesResponse")
	proto.RegisterType((*QueryMimirNodeValuesRequest)(nil), "types.QueryMimirNodeValuesRequest")
	proto.RegisterType((*QueryMimirNodeValuesResponse)(nil), "types.QueryMimirNodeValuesResponse")
	proto.RegisterType((*Mimir)(nil), "types.Mimir")
}

func init() { proto.RegisterFile("types/query_mimir.proto", fileDescriptor_dae8c053a533c659) }

var fileDescriptor_dae8c053a533c659 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4f, 0x8b, 0xda, 0x40,
	0x14, 0x4f, 0x14, 0x2d, 0x7d, 0x4a, 0x11, 0x11, 0x4d, 0x6d, 0x1b, 0x25, 0xf4, 0xe0, 0xa5, 0x09,
	0x2a, 0x94, 0xf6, 0x56, 0xa5, 0x3d, 0xb5, 0xf6, 0x4f, 0x0e, 0x2d, 0x94, 0x05, 0x89, 0x66, 0x48,
	0xc2, 0x26, 0x19, 0xcd, 0x44, 0xd9, 0x7c, 0x8b, 0xfd, 0x58, 0x1e, 0x3d, 0xee, 0x49, 0x16, 0xbd,
	0xed, 0xa7, 0x58, 0x66, 0x32, 0x6a, 0xe2, 0xaa, 0xb8, 0x97, 0xf0, 0xe6, 0xcd, 0xfb, 0xfd, 0x99,
	0xf7, 0x5e, 0xa0, 0x16, 0x46, 0x13, 0x44, 0xb4, 0xe9, 0x0c, 0x05, 0xd1, 0xd0, 0x73, 0x3c, 0x27,
	0x50, 0x27, 0x01, 0x0e, 0x71, 0x39, 0xc7, 0x2e, 0xea, 0x15, 0x0b, 0x5b, 0x98, 0x65, 0x34, 0x1a,
	0xc5, 0x97, 0xf5, 0x6a, 0x8c, 0xa2, 0xdf, 0x24, 0x48, 0x69, 0x43, 0xed, 0x0f, 0x65, 0x1a, 0xd0,
	0xdc, 0x5f, 0xc3, 0x9d, 0x21, 0xa2, 0xa3, 0xe9, 0x0c, 0x91, 0xb0, 0x5c, 0x85, 0xbc, 0x8d, 0x1c,
	0xcb, 0x0e, 0x25, 0xb1, 0x29, 0xb6, 0x5e, 0xea, 0xfc, 0xa4, 0x7c, 0x01, 0xe9, 0x29, 0x84, 0x4c,
	0xb0, 0x4f, 0x50, 0xf9, 0x3d, 0xe4, 0x19, 0x3b, 0x91, 0xc4, 0x66, 0xb6, 0x55, 0xe8, 0x14, 0x55,
	0xa6, 0xab, 0xb2, 0x5a, 0x9d, 0xdf, 0x29, 0x5f, 0x93, 0x0c, 0xff, 0x9c, 0xd0, 0xfe, 0x8e, 0xa2,
	0xad, 0x6a, 0x09, 0xb2, 0xd7, 0x28, 0xe2, 0x92, 0x34, 0x4c, 0xf8, 0xc8, 0xa4, 0x7c, 0xb4, 0xe1,
	0xf5, 0x11, 0x16, 0x6e, 0xa4, 0x02, 0xb9, 0x39, 0xb5, 0xc6, 0x88, 0xb2, 0x7a, 0x7c, 0x50, 0x3e,
	0xc2, 0xdb, 0x3d, 0xa4, 0x67, 0x7a, 0x8e, 0x7f, 0xd9, 0x93, 0x7f, 0xc3, 0xbb, 0x13, 0x38, 0x2e,
	0xa7, 0x41, 0xd1, 0xa0, 0xe9, 0xe1, 0x99, 0xd7, 0x17, 0x58, 0xc5, 0x20, 0x6e, 0xc1, 0x67, 0x68,
	0xec, 0x19, 0x7f, 0x62, 0x13, 0x91, 0x9e, 0xeb, 0x5e, 0x66, 0xe6, 0x0a, 0x9a, 0xa7, 0xa1, 0xdc,
	0xcf, 0xa7, 0x83, 0x39, 0x94, 0xb8, 0x13, 0x5a, 0xce, 0x70, 0xfd, 0x57, 0x8b, 0x55, 0x43, 0x78,
	0x58, 0x35, 0x78, 0xdd, 0x6e, 0x36, 0xa9, 0x16, 0x31, 0xf6, 0xcb, 0x5c, 0x7d, 0x4b, 0xb6, 0x28,
	0x85, 0x7b, 0xd6, 0x6a, 0xfc, 0x82, 0x37, 0x69, 0x9a, 0xb4, 0xba, 0x04, 0x2f, 0x0c, 0xd3, 0x0c,
	0x10, 0x21, 0x5c, 0x7e, 0x7b, 0x3c, 0xb9, 0x25, 0x83, 0xc3, 0xf7, 0x1c, 0xd8, 0xfa, 0x00, 0x05,
	0x1f, 0x9b, 0xe8, 0xdc, 0xe0, 0xc0, 0xdf, 0x76, 0x8d, 0x28, 0x1a, 0xe4, 0x58, 0x74, 0x64, 0x4f,
	0x77, 0x2b, 0x97, 0x49, 0xac, 0x5c, 0xff, 0xc7, 0x62, 0x2d, 0x8b, 0xcb, 0xb5, 0x2c, 0xde, 0xaf,
	0x65, 0xf1, 0x76, 0x23, 0x0b, 0xcb, 0x8d, 0x2c, 0xdc, 0x6d, 0x64, 0xe1, 0x7f, 0xc7, 0x72, 0x42,
	0xd7, 0x18, 0xa9, 0x63, 0xec, 0x69, 0xa1, 0x8d, 0x83, 0xb1, 0x6d, 0x38, 0x3e, 0x8b, 0xa8, 0x9e,
	0x36, 0xef, 0x6a, 0x37, 0xc9, 0x3c, 0x35, 0x34, 0xca, 0xb3, 0xbf, 0xb6, 0xfb, 0x18, 0x00, 0x00,
	0xff, 0xff, 0xab, 0x66, 0xca, 0x08, 0x05, 0x04, 0x00, 0x00,
}

func (m *QueryMimirValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryMimir(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mimirs) > 0 {
		for iNdEx := len(m.Mimirs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mimirs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryMimir(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirWithKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirWithKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirWithKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryMimir(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQueryMimir(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirWithKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirWithKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirWithKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintQueryMimir(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirAdminValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirAdminValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirAdminValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryMimir(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirAdminValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirAdminValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirAdminValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminMimirs) > 0 {
		for iNdEx := len(m.AdminMimirs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdminMimirs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryMimir(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirNodesAllValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirNodesAllValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirNodesAllValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryMimir(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirNodesAllValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirNodesAllValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirNodesAllValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mimirs) > 0 {
		for iNdEx := len(m.Mimirs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mimirs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryMimir(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirNodesValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirNodesValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirNodesValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryMimir(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirNodesValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirNodesValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirNodesValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mimirs) > 0 {
		for iNdEx := len(m.Mimirs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mimirs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryMimir(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirNodeValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirNodeValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirNodeValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryMimir(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQueryMimir(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMimirNodeValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMimirNodeValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMimirNodeValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeMimirs) > 0 {
		for iNdEx := len(m.NodeMimirs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeMimirs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryMimir(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Mimir) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mimir) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mimir) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintQueryMimir(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQueryMimir(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryMimir(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryMimir(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMimirValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryMimir(uint64(l))
	}
	return n
}

func (m *QueryMimirValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mimirs) > 0 {
		for _, e := range m.Mimirs {
			l = e.Size()
			n += 1 + l + sovQueryMimir(uint64(l))
		}
	}
	return n
}

func (m *QueryMimirWithKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQueryMimir(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryMimir(uint64(l))
	}
	return n
}

func (m *QueryMimirWithKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovQueryMimir(uint64(m.Value))
	}
	return n
}

func (m *QueryMimirAdminValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryMimir(uint64(l))
	}
	return n
}

func (m *QueryMimirAdminValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AdminMimirs) > 0 {
		for _, e := range m.AdminMimirs {
			l = e.Size()
			n += 1 + l + sovQueryMimir(uint64(l))
		}
	}
	return n
}

func (m *QueryMimirNodesAllValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryMimir(uint64(l))
	}
	return n
}

func (m *QueryMimirNodesAllValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mimirs) > 0 {
		for _, e := range m.Mimirs {
			l = e.Size()
			n += 1 + l + sovQueryMimir(uint64(l))
		}
	}
	return n
}

func (m *QueryMimirNodesValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryMimir(uint64(l))
	}
	return n
}

func (m *QueryMimirNodesValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mimirs) > 0 {
		for _, e := range m.Mimirs {
			l = e.Size()
			n += 1 + l + sovQueryMimir(uint64(l))
		}
	}
	return n
}

func (m *QueryMimirNodeValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQueryMimir(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryMimir(uint64(l))
	}
	return n
}

func (m *QueryMimirNodeValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeMimirs) > 0 {
		for _, e := range m.NodeMimirs {
			l = e.Size()
			n += 1 + l + sovQueryMimir(uint64(l))
		}
	}
	return n
}

func (m *Mimir) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQueryMimir(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovQueryMimir(uint64(m.Value))
	}
	return n
}

func sovQueryMimir(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryMimir(x uint64) (n int) {
	return sovQueryMimir(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMimirValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimirs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimirs = append(m.Mimirs, &Mimir{})
			if err := m.Mimirs[len(m.Mimirs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirWithKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirWithKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirWithKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirWithKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirWithKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirWithKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirAdminValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirAdminValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirAdminValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirAdminValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirAdminValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirAdminValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminMimirs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminMimirs = append(m.AdminMimirs, &Mimir{})
			if err := m.AdminMimirs[len(m.AdminMimirs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirNodesAllValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirNodesAllValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirNodesAllValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirNodesAllValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirNodesAllValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirNodesAllValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimirs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimirs = append(m.Mimirs, NodeMimir{})
			if err := m.Mimirs[len(m.Mimirs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirNodesValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirNodesValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirNodesValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirNodesValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirNodesValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirNodesValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimirs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimirs = append(m.Mimirs, &Mimir{})
			if err := m.Mimirs[len(m.Mimirs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirNodeValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirNodeValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirNodeValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMimirNodeValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMimirNodeValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMimirNodeValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeMimirs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeMimirs = append(m.NodeMimirs, &Mimir{})
			if err := m.NodeMimirs[len(m.NodeMimirs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mimir) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mimir: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mimir: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMimir
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMimir(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMimir
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryMimir(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryMimir
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryMimir
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryMimir
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryMimir
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryMimir
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryMimir        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryMimir          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryMimir = fmt.Errorf("proto: unexpected end of group")
)
