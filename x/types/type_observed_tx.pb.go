// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_observed_tx.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/mapprotocol/compass-tss/common"
	gitlab_com_thorchain_thornode_v3_common "github.com/mapprotocol/compass-tss/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ObservedTxVoter struct {
	TxID            gitlab_com_thorchain_thornode_v3_common.TxID        `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3,casttype=gitlab.com/thorchain/thornode/v3/common.TxID" json:"tx_id,omitempty"`
	Tx              common.ObservedTx                                   `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx"`
	Height          int64                                               `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Txs             gitlab_com_thorchain_thornode_v3_common.ObservedTxs `protobuf:"bytes,4,rep,name=txs,proto3,castrepeated=gitlab.com/thorchain/thornode/v3/common.ObservedTxs" json:"txs"`
	Actions         []TxOutItem                                         `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions"`
	OutTxs          gitlab_com_thorchain_thornode_v3_common.Txs         `protobuf:"bytes,6,rep,name=out_txs,json=outTxs,proto3,castrepeated=gitlab.com/thorchain/thornode/v3/common.Txs" json:"out_txs"`
	FinalisedHeight int64                                               `protobuf:"varint,7,opt,name=finalised_height,json=finalisedHeight,proto3" json:"finalised_height,omitempty"`
	UpdatedVault    bool                                                `protobuf:"varint,8,opt,name=updated_vault,json=updatedVault,proto3" json:"updated_vault,omitempty"`
	Reverted        bool                                                `protobuf:"varint,9,opt,name=reverted,proto3" json:"reverted,omitempty"`
	OutboundHeight  int64                                               `protobuf:"varint,10,opt,name=outbound_height,json=outboundHeight,proto3" json:"outbound_height,omitempty"`
}

func (m *ObservedTxVoter) Reset()      { *m = ObservedTxVoter{} }
func (*ObservedTxVoter) ProtoMessage() {}
func (*ObservedTxVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_2186a4b458344421, []int{0}
}
func (m *ObservedTxVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObservedTxVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObservedTxVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObservedTxVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObservedTxVoter.Merge(m, src)
}
func (m *ObservedTxVoter) XXX_Size() int {
	return m.Size()
}
func (m *ObservedTxVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_ObservedTxVoter.DiscardUnknown(m)
}

var xxx_messageInfo_ObservedTxVoter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ObservedTxVoter)(nil), "types.ObservedTxVoter")
}

func init() { proto.RegisterFile("types/type_observed_tx.proto", fileDescriptor_2186a4b458344421) }

var fileDescriptor_2186a4b458344421 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x3d, 0x8f, 0xd3, 0x40,
	0x10, 0xb5, 0x13, 0xe7, 0xe3, 0x96, 0x8f, 0x9c, 0x16, 0x04, 0x56, 0x84, 0x36, 0x16, 0x14, 0x18,
	0x81, 0x6c, 0x74, 0x69, 0x90, 0xe8, 0x22, 0x0a, 0x52, 0xa0, 0x93, 0xac, 0xe8, 0x74, 0xa2, 0xb1,
	0x9c, 0x78, 0x49, 0x2c, 0x25, 0x9e, 0xc8, 0x1e, 0x47, 0x4b, 0xc7, 0x4f, 0xe0, 0x57, 0x50, 0xf0,
	0x4b, 0x52, 0x5e, 0x79, 0x55, 0xe0, 0x9c, 0x7f, 0x41, 0x85, 0x76, 0xbd, 0xf1, 0x5d, 0x83, 0x48,
	0x63, 0xcf, 0xbe, 0xb7, 0x33, 0xef, 0xcd, 0xd3, 0x92, 0x67, 0xf8, 0x75, 0xcd, 0x73, 0x5f, 0x7e,
	0x43, 0x98, 0xe6, 0x3c, 0xdb, 0xf0, 0x38, 0x44, 0xe1, 0xad, 0x33, 0x40, 0xa0, 0x2d, 0xc5, 0xf6,
	0x1f, 0xcd, 0x60, 0xb5, 0x82, 0xd4, 0xaf, 0x7e, 0x15, 0xd7, 0x7f, 0x7a, 0xa7, 0x13, 0x45, 0x08,
	0x05, 0x6a, 0xe2, 0xf1, 0x1c, 0xe6, 0xa0, 0x4a, 0x5f, 0x56, 0x15, 0xfa, 0xfc, 0x87, 0x45, 0x7a,
	0xe7, 0x5a, 0x60, 0x22, 0x2e, 0x00, 0x79, 0x46, 0x3f, 0x91, 0x16, 0x8a, 0x30, 0x89, 0x6d, 0xd3,
	0x31, 0xdd, 0x93, 0xd1, 0xbb, 0x72, 0x37, 0xb0, 0x26, 0x62, 0xfc, 0xe1, 0xcf, 0x6e, 0xf0, 0x66,
	0x9e, 0xe0, 0x32, 0x9a, 0x7a, 0x33, 0x58, 0xf9, 0xb8, 0x80, 0x6c, 0xb6, 0x88, 0x92, 0x54, 0x55,
	0x29, 0xc4, 0xdc, 0xdf, 0x0c, 0x0f, 0x66, 0xe4, 0xfd, 0xc0, 0x42, 0x31, 0x8e, 0xa9, 0x4b, 0x1a,
	0x28, 0xec, 0x86, 0x63, 0xba, 0xf7, 0xce, 0xa8, 0xa7, 0xf9, 0x5b, 0xcd, 0x91, 0xb5, 0xdd, 0x0d,
	0x8c, 0xa0, 0x81, 0x82, 0x3e, 0x21, 0xed, 0x05, 0x4f, 0xe6, 0x0b, 0xb4, 0x9b, 0x8e, 0xe9, 0x36,
	0x03, 0x7d, 0xa2, 0x11, 0x69, 0xa2, 0xc8, 0x6d, 0xcb, 0x69, 0xfe, 0x63, 0xc4, 0x7b, 0x39, 0xe2,
	0xe7, 0xaf, 0xc1, 0xf0, 0x58, 0x7b, 0xb7, 0xbd, 0x79, 0x20, 0x67, 0xd3, 0xb7, 0xa4, 0x13, 0xcd,
	0x30, 0x81, 0x34, 0xb7, 0x5b, 0x4a, 0xe6, 0xd4, 0x53, 0x41, 0x7a, 0x13, 0x71, 0x5e, 0xe0, 0x18,
	0xf9, 0x4a, 0xfb, 0x3c, 0x5c, 0xa3, 0x97, 0xa4, 0x03, 0x05, 0x86, 0xd2, 0x58, 0x5b, 0x75, 0x10,
	0xaf, 0xde, 0x7d, 0x34, 0xd4, 0x86, 0x5e, 0x1f, 0x9f, 0x57, 0x1e, 0xb4, 0xa1, 0xc0, 0x89, 0xc8,
	0xe9, 0x2b, 0x72, 0xfa, 0x25, 0x49, 0xa3, 0x65, 0x92, 0xf3, 0x38, 0xd4, 0x81, 0x74, 0x54, 0x20,
	0xbd, 0x1a, 0xff, 0x58, 0x25, 0xf3, 0x82, 0x3c, 0x28, 0xd6, 0x71, 0x84, 0x3c, 0x0e, 0x37, 0x51,
	0xb1, 0x44, 0xbb, 0xeb, 0x98, 0x6e, 0x37, 0xb8, 0xaf, 0xc1, 0x0b, 0x89, 0xd1, 0x3e, 0xe9, 0x66,
	0x7c, 0xc3, 0x33, 0xe4, 0xb1, 0x7d, 0xa2, 0xf8, 0xfa, 0x4c, 0x5f, 0x92, 0x1e, 0x14, 0x38, 0x85,
	0x22, 0xad, 0xa5, 0x88, 0x92, 0x7a, 0x78, 0x80, 0x2b, 0xa5, 0xd1, 0xe5, 0xf6, 0x86, 0x19, 0xd7,
	0x37, 0xcc, 0xf8, 0x56, 0x32, 0x63, 0x5b, 0x32, 0xf3, 0xaa, 0x64, 0xe6, 0xef, 0x92, 0x99, 0xdf,
	0xf7, 0xcc, 0xb8, 0xda, 0x33, 0xe3, 0x7a, 0xcf, 0x8c, 0xcf, 0x67, 0xff, 0xdd, 0x57, 0xdc, 0xc5,
	0x65, 0xc2, 0xd3, 0xb6, 0x7a, 0x89, 0xc3, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x71, 0xbb, 0xa9,
	0xd9, 0xf4, 0x02, 0x00, 0x00,
}

func (m *ObservedTxVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObservedTxVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObservedTxVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundHeight != 0 {
		i = encodeVarintTypeObservedTx(dAtA, i, uint64(m.OutboundHeight))
		i--
		dAtA[i] = 0x50
	}
	if m.Reverted {
		i--
		if m.Reverted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.UpdatedVault {
		i--
		if m.UpdatedVault {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.FinalisedHeight != 0 {
		i = encodeVarintTypeObservedTx(dAtA, i, uint64(m.FinalisedHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OutTxs) > 0 {
		for iNdEx := len(m.OutTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeObservedTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeObservedTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeObservedTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Height != 0 {
		i = encodeVarintTypeObservedTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypeObservedTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintTypeObservedTx(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeObservedTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeObservedTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObservedTxVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovTypeObservedTx(uint64(l))
	}
	l = m.Tx.Size()
	n += 1 + l + sovTypeObservedTx(uint64(l))
	if m.Height != 0 {
		n += 1 + sovTypeObservedTx(uint64(m.Height))
	}
	if len(m.Txs) > 0 {
		for _, e := range m.Txs {
			l = e.Size()
			n += 1 + l + sovTypeObservedTx(uint64(l))
		}
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovTypeObservedTx(uint64(l))
		}
	}
	if len(m.OutTxs) > 0 {
		for _, e := range m.OutTxs {
			l = e.Size()
			n += 1 + l + sovTypeObservedTx(uint64(l))
		}
	}
	if m.FinalisedHeight != 0 {
		n += 1 + sovTypeObservedTx(uint64(m.FinalisedHeight))
	}
	if m.UpdatedVault {
		n += 2
	}
	if m.Reverted {
		n += 2
	}
	if m.OutboundHeight != 0 {
		n += 1 + sovTypeObservedTx(uint64(m.OutboundHeight))
	}
	return n
}

func sovTypeObservedTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeObservedTx(x uint64) (n int) {
	return sovTypeObservedTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObservedTxVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeObservedTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObservedTxVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObservedTxVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = gitlab_com_thorchain_thornode_v3_common.TxID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, common.ObservedTx{})
			if err := m.Txs[len(m.Txs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, TxOutItem{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxs = append(m.OutTxs, common.Tx{})
			if err := m.OutTxs[len(m.OutTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalisedHeight", wireType)
			}
			m.FinalisedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalisedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedVault", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatedVault = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reverted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Reverted = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundHeight", wireType)
			}
			m.OutboundHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypeObservedTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeObservedTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeObservedTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeObservedTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeObservedTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeObservedTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeObservedTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeObservedTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeObservedTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeObservedTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeObservedTx = fmt.Errorf("proto: unexpected end of group")
)
