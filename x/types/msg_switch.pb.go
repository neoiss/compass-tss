// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_switch.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/mapprotocol/compass-tss/common"
	gitlab_com_thorchain_thornode_v3_common "github.com/mapprotocol/compass-tss/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSwitch struct {
	Tx      common.Tx                                     `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx"`
	Asset   gitlab_com_thorchain_thornode_v3_common.Asset `protobuf:"bytes,2,opt,name=asset,proto3,customtype=gitlab.com/thorchain/thornode/v3/common.Asset" json:"asset"`
	Amount  cosmossdk_io_math.Uint                        `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Uint" json:"amount"`
	Address github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty"`
	Signer  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgSwitch) Reset()         { *m = MsgSwitch{} }
func (m *MsgSwitch) String() string { return proto.CompactTextString(m) }
func (*MsgSwitch) ProtoMessage()    {}
func (*MsgSwitch) Descriptor() ([]byte, []int) {
	return fileDescriptor_29b19571eb1bc5b1, []int{0}
}
func (m *MsgSwitch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwitch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwitch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwitch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwitch.Merge(m, src)
}
func (m *MsgSwitch) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwitch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwitch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwitch proto.InternalMessageInfo

func (m *MsgSwitch) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func (m *MsgSwitch) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MsgSwitch) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgSwitch)(nil), "types.MsgSwitch")
}

func init() { proto.RegisterFile("types/msg_switch.proto", fileDescriptor_29b19571eb1bc5b1) }

var fileDescriptor_29b19571eb1bc5b1 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x31, 0x4f, 0xc2, 0x40,
	0x14, 0xc7, 0x7b, 0x15, 0x30, 0x9c, 0xba, 0x54, 0x43, 0x1a, 0x86, 0xa3, 0x71, 0x62, 0xa1, 0x17,
	0x21, 0xba, 0xd3, 0xcd, 0xa8, 0x4b, 0xd5, 0x85, 0xc5, 0x94, 0xb6, 0x69, 0x1b, 0xec, 0x3d, 0xd2,
	0x77, 0x68, 0xfd, 0x16, 0x7e, 0x2c, 0x46, 0x46, 0x75, 0x20, 0x06, 0xbe, 0x85, 0x93, 0xe9, 0x5d,
	0x49, 0xd8, 0x4c, 0x9c, 0xde, 0xcb, 0xff, 0xfd, 0xff, 0xbf, 0x7b, 0x79, 0x47, 0x3b, 0xf2, 0x6d,
	0x1e, 0x23, 0xcf, 0x31, 0x79, 0xc2, 0xd7, 0x4c, 0x86, 0xa9, 0x3b, 0x2f, 0x40, 0x82, 0xd5, 0x54,
	0x7a, 0xf7, 0x34, 0x84, 0x3c, 0x07, 0xc1, 0x75, 0xd1, 0xb3, 0xee, 0x59, 0x02, 0x09, 0xa8, 0x96,
	0x57, 0x9d, 0x56, 0xcf, 0x3f, 0x4d, 0xda, 0xbe, 0xc3, 0xe4, 0x5e, 0x51, 0x2c, 0x87, 0x9a, 0xb2,
	0xb4, 0x89, 0x43, 0xfa, 0x47, 0x43, 0xea, 0xd6, 0xf1, 0x87, 0xd2, 0x6b, 0x2c, 0xd7, 0x3d, 0xc3,
	0x37, 0x65, 0x69, 0x4d, 0x68, 0x33, 0x40, 0x8c, 0xa5, 0x6d, 0x2a, 0xd3, 0xc9, 0xce, 0x34, 0xae,
	0x44, 0xef, 0xb2, 0xf2, 0x7d, 0xad, 0x7b, 0x83, 0x24, 0x93, 0xcf, 0xc1, 0xb4, 0x1a, 0x72, 0x99,
	0x42, 0x11, 0xa6, 0x41, 0x26, 0x54, 0x27, 0x20, 0x8a, 0xf9, 0xcb, 0x88, 0xef, 0xc7, 0x7c, 0x8d,
	0xb4, 0xae, 0x68, 0x2b, 0xc8, 0x61, 0x21, 0xa4, 0x7d, 0xe0, 0x90, 0x7e, 0xdb, 0x63, 0x35, 0xad,
	0x13, 0x02, 0xe6, 0x80, 0x18, 0xcd, 0xdc, 0x0c, 0x78, 0x1e, 0xc8, 0xd4, 0x7d, 0xcc, 0x84, 0xf4,
	0x6b, 0xb7, 0x75, 0x43, 0x0f, 0x83, 0x28, 0x2a, 0x62, 0x44, 0xbb, 0xe1, 0x90, 0xfe, 0xb1, 0x77,
	0xf1, 0xa3, 0x57, 0x48, 0x17, 0x7a, 0x05, 0x9d, 0xaf, 0xcb, 0x00, 0xa3, 0x19, 0x57, 0x77, 0x72,
	0xc7, 0x61, 0x38, 0xd6, 0x41, 0x7f, 0x47, 0xb0, 0xae, 0x69, 0x0b, 0xb3, 0x44, 0xc4, 0x85, 0xdd,
	0xfc, 0x2f, 0xab, 0x06, 0x78, 0xb7, 0xcb, 0x0d, 0x23, 0xab, 0x0d, 0x23, 0xdf, 0x1b, 0x46, 0xde,
	0xb7, 0xcc, 0x58, 0x6d, 0x99, 0xf1, 0xb1, 0x65, 0xc6, 0x64, 0xf8, 0xe7, 0x7d, 0xca, 0x7d, 0xbd,
	0x7a, 0x60, 0xda, 0x52, 0x1f, 0x36, 0xfa, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x1f, 0xac, 0xa4,
	0xfc, 0x01, 0x00, 0x00,
}

func (m *MsgSwitch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwitch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwitch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgSwitch(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMsgSwitch(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgSwitch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Asset.Size()
		i -= size
		if _, err := m.Asset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgSwitch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgSwitch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMsgSwitch(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgSwitch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSwitch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tx.Size()
	n += 1 + l + sovMsgSwitch(uint64(l))
	l = m.Asset.Size()
	n += 1 + l + sovMsgSwitch(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovMsgSwitch(uint64(l))
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMsgSwitch(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgSwitch(uint64(l))
	}
	return n
}

func sovMsgSwitch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgSwitch(x uint64) (n int) {
	return sovMsgSwitch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSwitch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSwitch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwitch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwitch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSwitch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgSwitch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgSwitch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgSwitch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSwitch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSwitch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgSwitch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgSwitch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgSwitch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgSwitch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgSwitch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgSwitch = fmt.Errorf("proto: unexpected end of group")
)
