// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/query_tss.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryTssKeygenMetricRequest struct {
	PubKey string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Height string `protobuf:"bytes,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryTssKeygenMetricRequest) Reset()         { *m = QueryTssKeygenMetricRequest{} }
func (m *QueryTssKeygenMetricRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTssKeygenMetricRequest) ProtoMessage()    {}
func (*QueryTssKeygenMetricRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aae53490832d9f0, []int{0}
}
func (m *QueryTssKeygenMetricRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssKeygenMetricRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssKeygenMetricRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssKeygenMetricRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssKeygenMetricRequest.Merge(m, src)
}
func (m *QueryTssKeygenMetricRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssKeygenMetricRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssKeygenMetricRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssKeygenMetricRequest proto.InternalMessageInfo

func (m *QueryTssKeygenMetricRequest) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *QueryTssKeygenMetricRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryTssKeygenMetricResponse struct {
	Metrics []*TssKeygenMetric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (m *QueryTssKeygenMetricResponse) Reset()         { *m = QueryTssKeygenMetricResponse{} }
func (m *QueryTssKeygenMetricResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTssKeygenMetricResponse) ProtoMessage()    {}
func (*QueryTssKeygenMetricResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aae53490832d9f0, []int{1}
}
func (m *QueryTssKeygenMetricResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssKeygenMetricResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssKeygenMetricResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssKeygenMetricResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssKeygenMetricResponse.Merge(m, src)
}
func (m *QueryTssKeygenMetricResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssKeygenMetricResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssKeygenMetricResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssKeygenMetricResponse proto.InternalMessageInfo

func (m *QueryTssKeygenMetricResponse) GetMetrics() []*TssKeygenMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type QueryTssMetricRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryTssMetricRequest) Reset()         { *m = QueryTssMetricRequest{} }
func (m *QueryTssMetricRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTssMetricRequest) ProtoMessage()    {}
func (*QueryTssMetricRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aae53490832d9f0, []int{2}
}
func (m *QueryTssMetricRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssMetricRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssMetricRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssMetricRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssMetricRequest.Merge(m, src)
}
func (m *QueryTssMetricRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssMetricRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssMetricRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssMetricRequest proto.InternalMessageInfo

func (m *QueryTssMetricRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryTssMetricResponse struct {
	Keygen  []*TssKeygenMetric `protobuf:"bytes,1,rep,name=keygen,proto3" json:"keygen"`
	Keysign *TssKeysignMetric  `protobuf:"bytes,2,opt,name=keysign,proto3" json:"keysign"`
}

func (m *QueryTssMetricResponse) Reset()         { *m = QueryTssMetricResponse{} }
func (m *QueryTssMetricResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTssMetricResponse) ProtoMessage()    {}
func (*QueryTssMetricResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7aae53490832d9f0, []int{3}
}
func (m *QueryTssMetricResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTssMetricResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTssMetricResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTssMetricResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTssMetricResponse.Merge(m, src)
}
func (m *QueryTssMetricResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTssMetricResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTssMetricResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTssMetricResponse proto.InternalMessageInfo

func (m *QueryTssMetricResponse) GetKeygen() []*TssKeygenMetric {
	if m != nil {
		return m.Keygen
	}
	return nil
}

func (m *QueryTssMetricResponse) GetKeysign() *TssKeysignMetric {
	if m != nil {
		return m.Keysign
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTssKeygenMetricRequest)(nil), "types.QueryTssKeygenMetricRequest")
	proto.RegisterType((*QueryTssKeygenMetricResponse)(nil), "types.QueryTssKeygenMetricResponse")
	proto.RegisterType((*QueryTssMetricRequest)(nil), "types.QueryTssMetricRequest")
	proto.RegisterType((*QueryTssMetricResponse)(nil), "types.QueryTssMetricResponse")
}

func init() { proto.RegisterFile("types/query_tss.proto", fileDescriptor_7aae53490832d9f0) }

var fileDescriptor_7aae53490832d9f0 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x3d, 0x4f, 0xc2, 0x40,
	0x18, 0xe6, 0x34, 0x96, 0x78, 0x6c, 0x8d, 0x7c, 0x04, 0xcc, 0x41, 0x98, 0x98, 0x7a, 0x06, 0x36,
	0x07, 0x07, 0x56, 0xd4, 0x68, 0xe3, 0xe4, 0x42, 0x28, 0xbe, 0xb9, 0x36, 0x48, 0xaf, 0xf4, 0xae,
	0xc6, 0xfb, 0x17, 0x0e, 0xfe, 0x28, 0x47, 0x46, 0x27, 0x62, 0x60, 0xe3, 0x57, 0x98, 0xbb, 0x6b,
	0xa3, 0x25, 0xc6, 0xa5, 0x7d, 0xef, 0x79, 0xde, 0xe7, 0xe3, 0x72, 0xb8, 0x2e, 0x55, 0x02, 0x82,
	0xae, 0x32, 0x48, 0xd5, 0x54, 0x0a, 0xe1, 0x25, 0x29, 0x97, 0xdc, 0x3d, 0x31, 0x70, 0xfb, 0x8c,
	0x71, 0xc6, 0x0d, 0x42, 0xf5, 0x64, 0xc9, 0x76, 0xc7, 0x6a, 0xf4, 0x57, 0x4b, 0xa6, 0x4b, 0x90,
	0x69, 0x34, 0xb7, 0x64, 0xff, 0x16, 0x77, 0xee, 0xb5, 0xd9, 0x83, 0x10, 0x13, 0x50, 0x0c, 0xe2,
	0x1b, 0xc3, 0xfa, 0xb0, 0xca, 0x40, 0x48, 0xb7, 0x89, 0xab, 0x49, 0x16, 0x4c, 0x17, 0xa0, 0x5a,
	0xa8, 0x87, 0x06, 0xa7, 0xbe, 0x93, 0x64, 0xc1, 0x04, 0x94, 0xdb, 0xc0, 0x4e, 0x08, 0x11, 0x0b,
	0x65, 0xeb, 0xc8, 0xe2, 0xf6, 0xd4, 0xbf, 0xc3, 0xe7, 0x7f, 0xfb, 0x89, 0x84, 0xc7, 0x02, 0xdc,
	0x0b, 0x5c, 0xb5, 0xf9, 0xa2, 0x85, 0x7a, 0xc7, 0x83, 0xda, 0xb0, 0xe1, 0x99, 0x7a, 0xde, 0xa1,
	0xa0, 0x58, 0xeb, 0x53, 0x5c, 0x2f, 0x1c, 0xcb, 0xdd, 0x7e, 0x2a, 0xa0, 0x52, 0x85, 0x77, 0x84,
	0x1b, 0x87, 0x8a, 0x3c, 0xfd, 0x12, 0x3b, 0x0b, 0x13, 0xf2, 0x7f, 0xf8, 0x18, 0xef, 0x37, 0xdd,
	0x7c, 0xd3, 0xcf, 0xff, 0xee, 0x15, 0xae, 0x2e, 0x40, 0x89, 0x88, 0xc5, 0xe6, 0xca, 0xb5, 0x61,
	0xb3, 0x24, 0xd6, 0x44, 0xae, 0xae, 0xed, 0x37, 0xdd, 0x62, 0xd7, 0x2f, 0x86, 0xf1, 0xf5, 0xc7,
	0x96, 0xa0, 0xf5, 0x96, 0xa0, 0xaf, 0x2d, 0x41, 0x6f, 0x3b, 0x52, 0x59, 0xef, 0x48, 0xe5, 0x73,
	0x47, 0x2a, 0x8f, 0x43, 0x16, 0xc9, 0xe7, 0x59, 0xe0, 0xcd, 0xf9, 0x92, 0xca, 0x90, 0xa7, 0xf3,
	0x70, 0x16, 0xc5, 0x66, 0x8a, 0xf9, 0x13, 0xd0, 0x97, 0x11, 0x7d, 0xfd, 0x8d, 0xeb, 0xd0, 0xc0,
	0x31, 0xcf, 0x37, 0xfa, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xec, 0x8d, 0x10, 0x11, 0x02, 0x00,
	0x00,
}

func (m *QueryTssKeygenMetricRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssKeygenMetricRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssKeygenMetricRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryTss(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintQueryTss(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTssKeygenMetricResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssKeygenMetricResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssKeygenMetricResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTssMetricRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssMetricRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssMetricRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQueryTss(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTssMetricResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTssMetricResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTssMetricResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Keysign != nil {
		{
			size, err := m.Keysign.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQueryTss(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keygen) > 0 {
		for iNdEx := len(m.Keygen) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keygen[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQueryTss(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryTss(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryTss(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTssKeygenMetricRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovQueryTss(uint64(l))
	}
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryTss(uint64(l))
	}
	return n
}

func (m *QueryTssKeygenMetricResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovQueryTss(uint64(l))
		}
	}
	return n
}

func (m *QueryTssMetricRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQueryTss(uint64(l))
	}
	return n
}

func (m *QueryTssMetricResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keygen) > 0 {
		for _, e := range m.Keygen {
			l = e.Size()
			n += 1 + l + sovQueryTss(uint64(l))
		}
	}
	if m.Keysign != nil {
		l = m.Keysign.Size()
		n += 1 + l + sovQueryTss(uint64(l))
	}
	return n
}

func sovQueryTss(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryTss(x uint64) (n int) {
	return sovQueryTss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTssKeygenMetricRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssKeygenMetricRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssKeygenMetricRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTssKeygenMetricResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssKeygenMetricResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssKeygenMetricResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &TssKeygenMetric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTssMetricRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssMetricRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssMetricRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTssMetricResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryTss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTssMetricResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTssMetricResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keygen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keygen = append(m.Keygen, &TssKeygenMetric{})
			if err := m.Keygen[len(m.Keygen)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keysign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryTss
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keysign == nil {
				m.Keysign = &TssKeysignMetric{}
			}
			if err := m.Keysign.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryTss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryTss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryTss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryTss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryTss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryTss
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryTss
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryTss
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryTss        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryTss          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryTss = fmt.Errorf("proto: unexpected end of group")
)
