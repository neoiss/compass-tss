// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/msg_observed_tx_quorum.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	common "github.com/mapprotocol/compass-tss/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgObservedTxQuorum struct {
	QuoTx  *common.QuorumTx                              `protobuf:"bytes,1,opt,name=quoTx,proto3" json:"quoTx,omitempty"`
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgObservedTxQuorum) Reset()         { *m = MsgObservedTxQuorum{} }
func (m *MsgObservedTxQuorum) String() string { return proto.CompactTextString(m) }
func (*MsgObservedTxQuorum) ProtoMessage()    {}
func (*MsgObservedTxQuorum) Descriptor() ([]byte, []int) {
	return fileDescriptor_850f895974af6e06, []int{0}
}
func (m *MsgObservedTxQuorum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgObservedTxQuorum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgObservedTxQuorum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgObservedTxQuorum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgObservedTxQuorum.Merge(m, src)
}
func (m *MsgObservedTxQuorum) XXX_Size() int {
	return m.Size()
}
func (m *MsgObservedTxQuorum) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgObservedTxQuorum.DiscardUnknown(m)
}

var xxx_messageInfo_MsgObservedTxQuorum proto.InternalMessageInfo

func (m *MsgObservedTxQuorum) GetQuoTx() *common.QuorumTx {
	if m != nil {
		return m.QuoTx
	}
	return nil
}

func (m *MsgObservedTxQuorum) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgObservedTxQuorum)(nil), "types.MsgObservedTxQuorum")
}

func init() {
	proto.RegisterFile("types/msg_observed_tx_quorum.proto", fileDescriptor_850f895974af6e06)
}

var fileDescriptor_850f895974af6e06 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0xcf, 0x2d, 0x4e, 0x8f, 0xcf, 0x4f, 0x2a, 0x4e, 0x2d, 0x2a, 0x4b, 0x4d, 0x89, 0x2f,
	0xa9, 0x88, 0x2f, 0x2c, 0xcd, 0x2f, 0x2a, 0xcd, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0xab, 0x91, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x8b, 0xe8, 0x83, 0x58, 0x10, 0x49, 0x29,
	0xc1, 0xc4, 0xdc, 0xcc, 0xbc, 0x7c, 0x7d, 0x30, 0x09, 0x15, 0x12, 0x4e, 0xce, 0xcf, 0xcd, 0xcd,
	0xcf, 0xd3, 0x87, 0x50, 0x10, 0x41, 0xa5, 0x2d, 0x8c, 0x5c, 0xc2, 0xbe, 0xc5, 0xe9, 0xfe, 0x50,
	0x4b, 0x42, 0x2a, 0x02, 0xc1, 0x56, 0x08, 0xa9, 0x71, 0xb1, 0x16, 0x96, 0xe6, 0x87, 0x54, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x09, 0xe8, 0x41, 0x75, 0x41, 0xa4, 0x43, 0x2a, 0x82, 0x20,
	0xd2, 0x42, 0x21, 0x5c, 0x6c, 0xc5, 0x99, 0xe9, 0x79, 0xa9, 0x45, 0x12, 0x4c, 0x0a, 0x8c, 0x1a,
	0x3c, 0x4e, 0x36, 0xbf, 0xee, 0xc9, 0xeb, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0x81, 0xb4, 0xe8,
	0x27, 0xe7, 0x17, 0xe7, 0xe6, 0x17, 0x43, 0x29, 0xdd, 0xe2, 0x94, 0x6c, 0x7d, 0xb0, 0xab, 0xf5,
	0x1c, 0x93, 0x93, 0x1d, 0x53, 0x52, 0x8a, 0x52, 0x8b, 0x8b, 0x67, 0x3d, 0xdf, 0xa0, 0xc5, 0x96,
	0x94, 0x9a, 0x9c, 0x61, 0x6c, 0x14, 0x04, 0x35, 0xcb, 0x4a, 0xbe, 0xeb, 0xf9, 0x06, 0x2d, 0xa9,
	0x92, 0x8c, 0xfc, 0xa2, 0xe4, 0x8c, 0xc4, 0xcc, 0x3c, 0x7d, 0x74, 0xe7, 0x39, 0xf9, 0x9c, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c,
	0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x51, 0x7a, 0x66, 0x49, 0x4e, 0x22, 0xc4,
	0x72, 0x84, 0x01, 0x20, 0x56, 0x5e, 0x7e, 0x4a, 0xaa, 0x7e, 0x99, 0xb1, 0x7e, 0x05, 0xb2, 0x38,
	0xc8, 0x31, 0x49, 0x6c, 0xe0, 0xb0, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x21, 0xc4, 0x90,
	0xc1, 0x76, 0x01, 0x00, 0x00,
}

func (m *MsgObservedTxQuorum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgObservedTxQuorum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgObservedTxQuorum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgObservedTxQuorum(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.QuoTx != nil {
		{
			size, err := m.QuoTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgObservedTxQuorum(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgObservedTxQuorum(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgObservedTxQuorum(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgObservedTxQuorum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QuoTx != nil {
		l = m.QuoTx.Size()
		n += 1 + l + sovMsgObservedTxQuorum(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgObservedTxQuorum(uint64(l))
	}
	return n
}

func sovMsgObservedTxQuorum(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgObservedTxQuorum(x uint64) (n int) {
	return sovMsgObservedTxQuorum(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgObservedTxQuorum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgObservedTxQuorum
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgObservedTxQuorum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgObservedTxQuorum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgObservedTxQuorum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgObservedTxQuorum
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgObservedTxQuorum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoTx == nil {
				m.QuoTx = &common.QuorumTx{}
			}
			if err := m.QuoTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgObservedTxQuorum
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgObservedTxQuorum
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgObservedTxQuorum
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgObservedTxQuorum(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgObservedTxQuorum
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgObservedTxQuorum(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgObservedTxQuorum
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgObservedTxQuorum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgObservedTxQuorum
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgObservedTxQuorum
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgObservedTxQuorum
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgObservedTxQuorum
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgObservedTxQuorum        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgObservedTxQuorum          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgObservedTxQuorum = fmt.Errorf("proto: unexpected end of group")
)
