// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types/type_loan.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/mapprotocol/compass-tss/common"
	github_com_mapprotocol_compass_v3_common "github.com/mapprotocol/compass-tss/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Loan struct {
	Owner               github_com_mapprotocol_compass_v3_common.Address `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/mapprotocol/compass-tss/common.Address" json:"owner,omitempty"`
	Asset               github_com_mapprotocol_compass_v3_common.Asset   `protobuf:"bytes,2,opt,name=asset,proto3,customtype=github.com/mapprotocol/compass-tss/common.Asset" json:"asset"`
	DebtIssued          cosmossdk_io_math.Uint                           `protobuf:"bytes,3,opt,name=debt_issued,json=debtIssued,proto3,customtype=cosmossdk.io/math.Uint" json:"debt_issued"`
	DebtRepaid          cosmossdk_io_math.Uint                           `protobuf:"bytes,4,opt,name=debt_repaid,json=debtRepaid,proto3,customtype=cosmossdk.io/math.Uint" json:"debt_repaid"`
	CollateralDeposited cosmossdk_io_math.Uint                           `protobuf:"bytes,5,opt,name=collateral_deposited,json=collateralDeposited,proto3,customtype=cosmossdk.io/math.Uint" json:"collateral_deposited"`
	CollateralWithdrawn cosmossdk_io_math.Uint                           `protobuf:"bytes,6,opt,name=collateral_withdrawn,json=collateralWithdrawn,proto3,customtype=cosmossdk.io/math.Uint" json:"collateral_withdrawn"`
	LastOpenHeight      int64                                            `protobuf:"varint,9,opt,name=last_open_height,json=lastOpenHeight,proto3" json:"last_open_height,omitempty"`
	LastRepayHeight     int64                                            `protobuf:"varint,10,opt,name=last_repay_height,json=lastRepayHeight,proto3" json:"last_repay_height,omitempty"`
}

func (m *Loan) Reset()         { *m = Loan{} }
func (m *Loan) String() string { return proto.CompactTextString(m) }
func (*Loan) ProtoMessage()    {}
func (*Loan) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f72ee70d2a913fe, []int{0}
}
func (m *Loan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loan.Merge(m, src)
}
func (m *Loan) XXX_Size() int {
	return m.Size()
}
func (m *Loan) XXX_DiscardUnknown() {
	xxx_messageInfo_Loan.DiscardUnknown(m)
}

var xxx_messageInfo_Loan proto.InternalMessageInfo

func (m *Loan) GetOwner() github_com_mapprotocol_compass_v3_common.Address {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Loan) GetLastOpenHeight() int64 {
	if m != nil {
		return m.LastOpenHeight
	}
	return 0
}

func (m *Loan) GetLastRepayHeight() int64 {
	if m != nil {
		return m.LastRepayHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Loan)(nil), "types.Loan")
}

func init() { proto.RegisterFile("types/type_loan.proto", fileDescriptor_4f72ee70d2a913fe) }

var fileDescriptor_4f72ee70d2a913fe = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0x6a, 0xdb, 0x40,
	0x14, 0x85, 0xa5, 0xda, 0x32, 0x78, 0x4c, 0xff, 0x64, 0xb7, 0x08, 0x2f, 0x64, 0xd3, 0x95, 0x28,
	0x54, 0x02, 0x9b, 0xae, 0x4b, 0x4d, 0x17, 0x35, 0x18, 0x42, 0x04, 0x21, 0xe0, 0x8d, 0x18, 0x6b,
	0x06, 0x69, 0x88, 0x34, 0x57, 0x68, 0x26, 0x71, 0xfc, 0x16, 0x79, 0x8f, 0xbc, 0x88, 0x97, 0x5e,
	0x86, 0x2c, 0x4c, 0xb0, 0xdf, 0x22, 0xab, 0x30, 0xa3, 0x28, 0x09, 0xd9, 0xc4, 0xd9, 0x48, 0x97,
	0x73, 0xcf, 0xf9, 0xe6, 0xef, 0xa2, 0x6f, 0x72, 0x55, 0x50, 0x11, 0xa8, 0x6f, 0x94, 0x01, 0xe6,
	0x7e, 0x51, 0x82, 0x04, 0xdb, 0xd2, 0x72, 0xbf, 0x1b, 0x43, 0x9e, 0x03, 0x0f, 0xaa, 0x5f, 0xd5,
	0xeb, 0xf7, 0x12, 0x48, 0x40, 0x97, 0x81, 0xaa, 0x2a, 0xf5, 0xc7, 0x75, 0x13, 0x35, 0x67, 0x80,
	0xb9, 0x3d, 0x45, 0x16, 0x2c, 0x39, 0x2d, 0x1d, 0x73, 0x68, 0x7a, 0xed, 0xc9, 0xf8, 0x7e, 0x3b,
	0x08, 0x12, 0x26, 0x33, 0xbc, 0xf0, 0x63, 0xc8, 0x03, 0x99, 0x42, 0x19, 0xa7, 0x98, 0x71, 0x5d,
	0x71, 0x20, 0x34, 0xb8, 0x18, 0xd7, 0x0b, 0xfc, 0x25, 0xa4, 0xa4, 0x42, 0x84, 0x15, 0xc1, 0x9e,
	0x23, 0x0b, 0x0b, 0x41, 0xa5, 0xf3, 0x61, 0x68, 0x7a, 0x9d, 0xd1, 0x47, 0xbf, 0xb6, 0x29, 0x71,
	0xf2, 0x7b, 0xbd, 0x1d, 0x18, 0xb7, 0xdb, 0xc1, 0xaf, 0x83, 0xe9, 0x2a, 0x16, 0x56, 0x48, 0xfb,
	0x0f, 0xea, 0x10, 0xba, 0x90, 0x11, 0x13, 0xe2, 0x9c, 0x12, 0xa7, 0xa1, 0x37, 0xeb, 0x3e, 0x22,
	0xbf, 0xc7, 0x20, 0x72, 0x10, 0x82, 0x9c, 0xf9, 0x0c, 0x82, 0x1c, 0xcb, 0xd4, 0x3f, 0x61, 0x5c,
	0x86, 0x48, 0x45, 0xa6, 0x3a, 0xf1, 0x04, 0x28, 0x69, 0x81, 0x19, 0x71, 0x9a, 0x87, 0x03, 0x42,
	0x9d, 0xb0, 0x8f, 0x51, 0x2f, 0x86, 0x2c, 0xc3, 0x92, 0x96, 0x38, 0x8b, 0x08, 0x2d, 0x40, 0x30,
	0x49, 0x89, 0x63, 0x1d, 0x44, 0xea, 0x3e, 0x67, 0xff, 0xd5, 0xd1, 0x57, 0xc8, 0x25, 0x93, 0x29,
	0x29, 0xf1, 0x92, 0x3b, 0xad, 0xf7, 0x22, 0x4f, 0xeb, 0xa8, 0xed, 0xa1, 0x2f, 0x19, 0x16, 0x32,
	0x82, 0x82, 0xf2, 0x28, 0xa5, 0x2c, 0x49, 0xa5, 0xd3, 0x1e, 0x9a, 0x5e, 0x23, 0xfc, 0xa4, 0xf4,
	0xa3, 0x82, 0xf2, 0xff, 0x5a, 0xb5, 0x7f, 0xa2, 0xaf, 0xda, 0xa9, 0x2e, 0x64, 0x55, 0x5b, 0x91,
	0xb6, 0x7e, 0x56, 0x0d, 0x75, 0xec, 0x55, 0xe5, 0x9d, 0xcc, 0xd6, 0x3b, 0xd7, 0xdc, 0xec, 0x5c,
	0xf3, 0x6e, 0xe7, 0x9a, 0x57, 0x7b, 0xd7, 0xd8, 0xec, 0x5d, 0xe3, 0x66, 0xef, 0x1a, 0xf3, 0xd1,
	0x9b, 0xaf, 0x79, 0xf9, 0x52, 0x57, 0x63, 0xba, 0x68, 0xe9, 0x11, 0x1c, 0x3f, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xd0, 0x18, 0x42, 0x4e, 0xcd, 0x02, 0x00, 0x00,
}

func (m *Loan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastRepayHeight != 0 {
		i = encodeVarintTypeLoan(dAtA, i, uint64(m.LastRepayHeight))
		i--
		dAtA[i] = 0x50
	}
	if m.LastOpenHeight != 0 {
		i = encodeVarintTypeLoan(dAtA, i, uint64(m.LastOpenHeight))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.CollateralWithdrawn.Size()
		i -= size
		if _, err := m.CollateralWithdrawn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeLoan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.CollateralDeposited.Size()
		i -= size
		if _, err := m.CollateralDeposited.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeLoan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.DebtRepaid.Size()
		i -= size
		if _, err := m.DebtRepaid.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeLoan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.DebtIssued.Size()
		i -= size
		if _, err := m.DebtIssued.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeLoan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Asset.Size()
		i -= size
		if _, err := m.Asset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeLoan(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypeLoan(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeLoan(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeLoan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Loan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypeLoan(uint64(l))
	}
	l = m.Asset.Size()
	n += 1 + l + sovTypeLoan(uint64(l))
	l = m.DebtIssued.Size()
	n += 1 + l + sovTypeLoan(uint64(l))
	l = m.DebtRepaid.Size()
	n += 1 + l + sovTypeLoan(uint64(l))
	l = m.CollateralDeposited.Size()
	n += 1 + l + sovTypeLoan(uint64(l))
	l = m.CollateralWithdrawn.Size()
	n += 1 + l + sovTypeLoan(uint64(l))
	if m.LastOpenHeight != 0 {
		n += 1 + sovTypeLoan(uint64(m.LastOpenHeight))
	}
	if m.LastRepayHeight != 0 {
		n += 1 + sovTypeLoan(uint64(m.LastRepayHeight))
	}
	return n
}

func sovTypeLoan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeLoan(x uint64) (n int) {
	return sovTypeLoan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Loan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeLoan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = github_com_mapprotocol_compass_v3_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeLoan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtIssued", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtIssued.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtRepaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtRepaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDeposited", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralDeposited.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralWithdrawn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeLoan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeLoan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralWithdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOpenHeight", wireType)
			}
			m.LastOpenHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOpenHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRepayHeight", wireType)
			}
			m.LastRepayHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeLoan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRepayHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypeLoan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypeLoan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeLoan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeLoan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeLoan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeLoan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeLoan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeLoan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeLoan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeLoan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeLoan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeLoan = fmt.Errorf("proto: unexpected end of group")
)
