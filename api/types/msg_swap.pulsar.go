// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	common "github.com/mapprotocol/compass-tss/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_MsgSwap                           protoreflect.MessageDescriptor
	fd_MsgSwap_tx                        protoreflect.FieldDescriptor
	fd_MsgSwap_target_asset              protoreflect.FieldDescriptor
	fd_MsgSwap_destination               protoreflect.FieldDescriptor
	fd_MsgSwap_trade_target              protoreflect.FieldDescriptor
	fd_MsgSwap_affiliate_address         protoreflect.FieldDescriptor
	fd_MsgSwap_affiliate_basis_points    protoreflect.FieldDescriptor
	fd_MsgSwap_signer                    protoreflect.FieldDescriptor
	fd_MsgSwap_aggregator                protoreflect.FieldDescriptor
	fd_MsgSwap_aggregator_target_address protoreflect.FieldDescriptor
	fd_MsgSwap_aggregator_target_limit   protoreflect.FieldDescriptor
	fd_MsgSwap_order_type                protoreflect.FieldDescriptor
	fd_MsgSwap_stream_quantity           protoreflect.FieldDescriptor
	fd_MsgSwap_stream_interval           protoreflect.FieldDescriptor
)

func init() {
	file_types_msg_swap_proto_init()
	md_MsgSwap = File_types_msg_swap_proto.Messages().ByName("MsgSwap")
	fd_MsgSwap_tx = md_MsgSwap.Fields().ByName("tx")
	fd_MsgSwap_target_asset = md_MsgSwap.Fields().ByName("target_asset")
	fd_MsgSwap_destination = md_MsgSwap.Fields().ByName("destination")
	fd_MsgSwap_trade_target = md_MsgSwap.Fields().ByName("trade_target")
	fd_MsgSwap_affiliate_address = md_MsgSwap.Fields().ByName("affiliate_address")
	fd_MsgSwap_affiliate_basis_points = md_MsgSwap.Fields().ByName("affiliate_basis_points")
	fd_MsgSwap_signer = md_MsgSwap.Fields().ByName("signer")
	fd_MsgSwap_aggregator = md_MsgSwap.Fields().ByName("aggregator")
	fd_MsgSwap_aggregator_target_address = md_MsgSwap.Fields().ByName("aggregator_target_address")
	fd_MsgSwap_aggregator_target_limit = md_MsgSwap.Fields().ByName("aggregator_target_limit")
	fd_MsgSwap_order_type = md_MsgSwap.Fields().ByName("order_type")
	fd_MsgSwap_stream_quantity = md_MsgSwap.Fields().ByName("stream_quantity")
	fd_MsgSwap_stream_interval = md_MsgSwap.Fields().ByName("stream_interval")
}

var _ protoreflect.Message = (*fastReflection_MsgSwap)(nil)

type fastReflection_MsgSwap MsgSwap

func (x *MsgSwap) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgSwap)(x)
}

func (x *MsgSwap) slowProtoReflect() protoreflect.Message {
	mi := &file_types_msg_swap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgSwap_messageType fastReflection_MsgSwap_messageType
var _ protoreflect.MessageType = fastReflection_MsgSwap_messageType{}

type fastReflection_MsgSwap_messageType struct{}

func (x fastReflection_MsgSwap_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgSwap)(nil)
}
func (x fastReflection_MsgSwap_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgSwap)
}
func (x fastReflection_MsgSwap_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSwap
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgSwap) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSwap
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgSwap) Type() protoreflect.MessageType {
	return _fastReflection_MsgSwap_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgSwap) New() protoreflect.Message {
	return new(fastReflection_MsgSwap)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgSwap) Interface() protoreflect.ProtoMessage {
	return (*MsgSwap)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgSwap) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Tx != nil {
		value := protoreflect.ValueOfMessage(x.Tx.ProtoReflect())
		if !f(fd_MsgSwap_tx, value) {
			return
		}
	}
	if x.TargetAsset != nil {
		value := protoreflect.ValueOfMessage(x.TargetAsset.ProtoReflect())
		if !f(fd_MsgSwap_target_asset, value) {
			return
		}
	}
	if x.Destination != "" {
		value := protoreflect.ValueOfString(x.Destination)
		if !f(fd_MsgSwap_destination, value) {
			return
		}
	}
	if x.TradeTarget != "" {
		value := protoreflect.ValueOfString(x.TradeTarget)
		if !f(fd_MsgSwap_trade_target, value) {
			return
		}
	}
	if x.AffiliateAddress != "" {
		value := protoreflect.ValueOfString(x.AffiliateAddress)
		if !f(fd_MsgSwap_affiliate_address, value) {
			return
		}
	}
	if x.AffiliateBasisPoints != "" {
		value := protoreflect.ValueOfString(x.AffiliateBasisPoints)
		if !f(fd_MsgSwap_affiliate_basis_points, value) {
			return
		}
	}
	if len(x.Signer) != 0 {
		value := protoreflect.ValueOfBytes(x.Signer)
		if !f(fd_MsgSwap_signer, value) {
			return
		}
	}
	if x.Aggregator != "" {
		value := protoreflect.ValueOfString(x.Aggregator)
		if !f(fd_MsgSwap_aggregator, value) {
			return
		}
	}
	if x.AggregatorTargetAddress != "" {
		value := protoreflect.ValueOfString(x.AggregatorTargetAddress)
		if !f(fd_MsgSwap_aggregator_target_address, value) {
			return
		}
	}
	if x.AggregatorTargetLimit != "" {
		value := protoreflect.ValueOfString(x.AggregatorTargetLimit)
		if !f(fd_MsgSwap_aggregator_target_limit, value) {
			return
		}
	}
	if x.OrderType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.OrderType))
		if !f(fd_MsgSwap_order_type, value) {
			return
		}
	}
	if x.StreamQuantity != uint64(0) {
		value := protoreflect.ValueOfUint64(x.StreamQuantity)
		if !f(fd_MsgSwap_stream_quantity, value) {
			return
		}
	}
	if x.StreamInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.StreamInterval)
		if !f(fd_MsgSwap_stream_interval, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgSwap) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "types.MsgSwap.tx":
		return x.Tx != nil
	case "types.MsgSwap.target_asset":
		return x.TargetAsset != nil
	case "types.MsgSwap.destination":
		return x.Destination != ""
	case "types.MsgSwap.trade_target":
		return x.TradeTarget != ""
	case "types.MsgSwap.affiliate_address":
		return x.AffiliateAddress != ""
	case "types.MsgSwap.affiliate_basis_points":
		return x.AffiliateBasisPoints != ""
	case "types.MsgSwap.signer":
		return len(x.Signer) != 0
	case "types.MsgSwap.aggregator":
		return x.Aggregator != ""
	case "types.MsgSwap.aggregator_target_address":
		return x.AggregatorTargetAddress != ""
	case "types.MsgSwap.aggregator_target_limit":
		return x.AggregatorTargetLimit != ""
	case "types.MsgSwap.order_type":
		return x.OrderType != 0
	case "types.MsgSwap.stream_quantity":
		return x.StreamQuantity != uint64(0)
	case "types.MsgSwap.stream_interval":
		return x.StreamInterval != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgSwap"))
		}
		panic(fmt.Errorf("message types.MsgSwap does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSwap) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "types.MsgSwap.tx":
		x.Tx = nil
	case "types.MsgSwap.target_asset":
		x.TargetAsset = nil
	case "types.MsgSwap.destination":
		x.Destination = ""
	case "types.MsgSwap.trade_target":
		x.TradeTarget = ""
	case "types.MsgSwap.affiliate_address":
		x.AffiliateAddress = ""
	case "types.MsgSwap.affiliate_basis_points":
		x.AffiliateBasisPoints = ""
	case "types.MsgSwap.signer":
		x.Signer = nil
	case "types.MsgSwap.aggregator":
		x.Aggregator = ""
	case "types.MsgSwap.aggregator_target_address":
		x.AggregatorTargetAddress = ""
	case "types.MsgSwap.aggregator_target_limit":
		x.AggregatorTargetLimit = ""
	case "types.MsgSwap.order_type":
		x.OrderType = 0
	case "types.MsgSwap.stream_quantity":
		x.StreamQuantity = uint64(0)
	case "types.MsgSwap.stream_interval":
		x.StreamInterval = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgSwap"))
		}
		panic(fmt.Errorf("message types.MsgSwap does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgSwap) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "types.MsgSwap.tx":
		value := x.Tx
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "types.MsgSwap.target_asset":
		value := x.TargetAsset
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "types.MsgSwap.destination":
		value := x.Destination
		return protoreflect.ValueOfString(value)
	case "types.MsgSwap.trade_target":
		value := x.TradeTarget
		return protoreflect.ValueOfString(value)
	case "types.MsgSwap.affiliate_address":
		value := x.AffiliateAddress
		return protoreflect.ValueOfString(value)
	case "types.MsgSwap.affiliate_basis_points":
		value := x.AffiliateBasisPoints
		return protoreflect.ValueOfString(value)
	case "types.MsgSwap.signer":
		value := x.Signer
		return protoreflect.ValueOfBytes(value)
	case "types.MsgSwap.aggregator":
		value := x.Aggregator
		return protoreflect.ValueOfString(value)
	case "types.MsgSwap.aggregator_target_address":
		value := x.AggregatorTargetAddress
		return protoreflect.ValueOfString(value)
	case "types.MsgSwap.aggregator_target_limit":
		value := x.AggregatorTargetLimit
		return protoreflect.ValueOfString(value)
	case "types.MsgSwap.order_type":
		value := x.OrderType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "types.MsgSwap.stream_quantity":
		value := x.StreamQuantity
		return protoreflect.ValueOfUint64(value)
	case "types.MsgSwap.stream_interval":
		value := x.StreamInterval
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgSwap"))
		}
		panic(fmt.Errorf("message types.MsgSwap does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSwap) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "types.MsgSwap.tx":
		x.Tx = value.Message().Interface().(*common.Tx)
	case "types.MsgSwap.target_asset":
		x.TargetAsset = value.Message().Interface().(*common.Asset)
	case "types.MsgSwap.destination":
		x.Destination = value.Interface().(string)
	case "types.MsgSwap.trade_target":
		x.TradeTarget = value.Interface().(string)
	case "types.MsgSwap.affiliate_address":
		x.AffiliateAddress = value.Interface().(string)
	case "types.MsgSwap.affiliate_basis_points":
		x.AffiliateBasisPoints = value.Interface().(string)
	case "types.MsgSwap.signer":
		x.Signer = value.Bytes()
	case "types.MsgSwap.aggregator":
		x.Aggregator = value.Interface().(string)
	case "types.MsgSwap.aggregator_target_address":
		x.AggregatorTargetAddress = value.Interface().(string)
	case "types.MsgSwap.aggregator_target_limit":
		x.AggregatorTargetLimit = value.Interface().(string)
	case "types.MsgSwap.order_type":
		x.OrderType = (OrderType)(value.Enum())
	case "types.MsgSwap.stream_quantity":
		x.StreamQuantity = value.Uint()
	case "types.MsgSwap.stream_interval":
		x.StreamInterval = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgSwap"))
		}
		panic(fmt.Errorf("message types.MsgSwap does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSwap) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "types.MsgSwap.tx":
		if x.Tx == nil {
			x.Tx = new(common.Tx)
		}
		return protoreflect.ValueOfMessage(x.Tx.ProtoReflect())
	case "types.MsgSwap.target_asset":
		if x.TargetAsset == nil {
			x.TargetAsset = new(common.Asset)
		}
		return protoreflect.ValueOfMessage(x.TargetAsset.ProtoReflect())
	case "types.MsgSwap.destination":
		panic(fmt.Errorf("field destination of message types.MsgSwap is not mutable"))
	case "types.MsgSwap.trade_target":
		panic(fmt.Errorf("field trade_target of message types.MsgSwap is not mutable"))
	case "types.MsgSwap.affiliate_address":
		panic(fmt.Errorf("field affiliate_address of message types.MsgSwap is not mutable"))
	case "types.MsgSwap.affiliate_basis_points":
		panic(fmt.Errorf("field affiliate_basis_points of message types.MsgSwap is not mutable"))
	case "types.MsgSwap.signer":
		panic(fmt.Errorf("field signer of message types.MsgSwap is not mutable"))
	case "types.MsgSwap.aggregator":
		panic(fmt.Errorf("field aggregator of message types.MsgSwap is not mutable"))
	case "types.MsgSwap.aggregator_target_address":
		panic(fmt.Errorf("field aggregator_target_address of message types.MsgSwap is not mutable"))
	case "types.MsgSwap.aggregator_target_limit":
		panic(fmt.Errorf("field aggregator_target_limit of message types.MsgSwap is not mutable"))
	case "types.MsgSwap.order_type":
		panic(fmt.Errorf("field order_type of message types.MsgSwap is not mutable"))
	case "types.MsgSwap.stream_quantity":
		panic(fmt.Errorf("field stream_quantity of message types.MsgSwap is not mutable"))
	case "types.MsgSwap.stream_interval":
		panic(fmt.Errorf("field stream_interval of message types.MsgSwap is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgSwap"))
		}
		panic(fmt.Errorf("message types.MsgSwap does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgSwap) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "types.MsgSwap.tx":
		m := new(common.Tx)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "types.MsgSwap.target_asset":
		m := new(common.Asset)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "types.MsgSwap.destination":
		return protoreflect.ValueOfString("")
	case "types.MsgSwap.trade_target":
		return protoreflect.ValueOfString("")
	case "types.MsgSwap.affiliate_address":
		return protoreflect.ValueOfString("")
	case "types.MsgSwap.affiliate_basis_points":
		return protoreflect.ValueOfString("")
	case "types.MsgSwap.signer":
		return protoreflect.ValueOfBytes(nil)
	case "types.MsgSwap.aggregator":
		return protoreflect.ValueOfString("")
	case "types.MsgSwap.aggregator_target_address":
		return protoreflect.ValueOfString("")
	case "types.MsgSwap.aggregator_target_limit":
		return protoreflect.ValueOfString("")
	case "types.MsgSwap.order_type":
		return protoreflect.ValueOfEnum(0)
	case "types.MsgSwap.stream_quantity":
		return protoreflect.ValueOfUint64(uint64(0))
	case "types.MsgSwap.stream_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgSwap"))
		}
		panic(fmt.Errorf("message types.MsgSwap does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgSwap) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in types.MsgSwap", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgSwap) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSwap) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgSwap) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgSwap) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgSwap)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Tx != nil {
			l = options.Size(x.Tx)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TargetAsset != nil {
			l = options.Size(x.TargetAsset)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Destination)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TradeTarget)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AffiliateAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AffiliateBasisPoints)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Signer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Aggregator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AggregatorTargetAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AggregatorTargetLimit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OrderType != 0 {
			n += 1 + runtime.Sov(uint64(x.OrderType))
		}
		if x.StreamQuantity != 0 {
			n += 1 + runtime.Sov(uint64(x.StreamQuantity))
		}
		if x.StreamInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.StreamInterval))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgSwap)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.StreamInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StreamInterval))
			i--
			dAtA[i] = 0x68
		}
		if x.StreamQuantity != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StreamQuantity))
			i--
			dAtA[i] = 0x60
		}
		if x.OrderType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OrderType))
			i--
			dAtA[i] = 0x58
		}
		if len(x.AggregatorTargetLimit) > 0 {
			i -= len(x.AggregatorTargetLimit)
			copy(dAtA[i:], x.AggregatorTargetLimit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AggregatorTargetLimit)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.AggregatorTargetAddress) > 0 {
			i -= len(x.AggregatorTargetAddress)
			copy(dAtA[i:], x.AggregatorTargetAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AggregatorTargetAddress)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.Aggregator) > 0 {
			i -= len(x.Aggregator)
			copy(dAtA[i:], x.Aggregator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Aggregator)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Signer) > 0 {
			i -= len(x.Signer)
			copy(dAtA[i:], x.Signer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Signer)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.AffiliateBasisPoints) > 0 {
			i -= len(x.AffiliateBasisPoints)
			copy(dAtA[i:], x.AffiliateBasisPoints)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AffiliateBasisPoints)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.AffiliateAddress) > 0 {
			i -= len(x.AffiliateAddress)
			copy(dAtA[i:], x.AffiliateAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AffiliateAddress)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.TradeTarget) > 0 {
			i -= len(x.TradeTarget)
			copy(dAtA[i:], x.TradeTarget)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TradeTarget)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Destination) > 0 {
			i -= len(x.Destination)
			copy(dAtA[i:], x.Destination)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Destination)))
			i--
			dAtA[i] = 0x1a
		}
		if x.TargetAsset != nil {
			encoded, err := options.Marshal(x.TargetAsset)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Tx != nil {
			encoded, err := options.Marshal(x.Tx)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgSwap)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSwap: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSwap: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Tx == nil {
					x.Tx = &common.Tx{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Tx); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetAsset", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TargetAsset == nil {
					x.TargetAsset = &common.Asset{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TargetAsset); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Destination = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeTarget", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TradeTarget = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AffiliateAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AffiliateAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AffiliateBasisPoints", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AffiliateBasisPoints = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Signer = append(x.Signer[:0], dAtA[iNdEx:postIndex]...)
				if x.Signer == nil {
					x.Signer = []byte{}
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Aggregator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Aggregator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AggregatorTargetAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AggregatorTargetAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AggregatorTargetLimit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AggregatorTargetLimit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
				}
				x.OrderType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OrderType |= OrderType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StreamQuantity", wireType)
				}
				x.StreamQuantity = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StreamQuantity |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StreamInterval", wireType)
				}
				x.StreamInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StreamInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: types/msg_swap.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderType int32

const (
	OrderType_market OrderType = 0
	OrderType_limit  OrderType = 1
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "market",
		1: "limit",
	}
	OrderType_value = map[string]int32{
		"market": 0,
		"limit":  1,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_msg_swap_proto_enumTypes[0].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_types_msg_swap_proto_enumTypes[0]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_types_msg_swap_proto_rawDescGZIP(), []int{0}
}

type MsgSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx                      *common.Tx    `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	TargetAsset             *common.Asset `protobuf:"bytes,2,opt,name=target_asset,json=targetAsset,proto3" json:"target_asset,omitempty"`
	Destination             string        `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	TradeTarget             string        `protobuf:"bytes,4,opt,name=trade_target,json=tradeTarget,proto3" json:"trade_target,omitempty"`
	AffiliateAddress        string        `protobuf:"bytes,5,opt,name=affiliate_address,json=affiliateAddress,proto3" json:"affiliate_address,omitempty"`
	AffiliateBasisPoints    string        `protobuf:"bytes,6,opt,name=affiliate_basis_points,json=affiliateBasisPoints,proto3" json:"affiliate_basis_points,omitempty"`
	Signer                  []byte        `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
	Aggregator              string        `protobuf:"bytes,8,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	AggregatorTargetAddress string        `protobuf:"bytes,9,opt,name=aggregator_target_address,json=aggregatorTargetAddress,proto3" json:"aggregator_target_address,omitempty"`
	AggregatorTargetLimit   string        `protobuf:"bytes,10,opt,name=aggregator_target_limit,json=aggregatorTargetLimit,proto3" json:"aggregator_target_limit,omitempty"`
	OrderType               OrderType     `protobuf:"varint,11,opt,name=order_type,json=orderType,proto3,enum=types.OrderType" json:"order_type,omitempty"`
	StreamQuantity          uint64        `protobuf:"varint,12,opt,name=stream_quantity,json=streamQuantity,proto3" json:"stream_quantity,omitempty"`
	StreamInterval          uint64        `protobuf:"varint,13,opt,name=stream_interval,json=streamInterval,proto3" json:"stream_interval,omitempty"`
}

func (x *MsgSwap) Reset() {
	*x = MsgSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_msg_swap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSwap) ProtoMessage() {}

// Deprecated: Use MsgSwap.ProtoReflect.Descriptor instead.
func (*MsgSwap) Descriptor() ([]byte, []int) {
	return file_types_msg_swap_proto_rawDescGZIP(), []int{0}
}

func (x *MsgSwap) GetTx() *common.Tx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *MsgSwap) GetTargetAsset() *common.Asset {
	if x != nil {
		return x.TargetAsset
	}
	return nil
}

func (x *MsgSwap) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *MsgSwap) GetTradeTarget() string {
	if x != nil {
		return x.TradeTarget
	}
	return ""
}

func (x *MsgSwap) GetAffiliateAddress() string {
	if x != nil {
		return x.AffiliateAddress
	}
	return ""
}

func (x *MsgSwap) GetAffiliateBasisPoints() string {
	if x != nil {
		return x.AffiliateBasisPoints
	}
	return ""
}

func (x *MsgSwap) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *MsgSwap) GetAggregator() string {
	if x != nil {
		return x.Aggregator
	}
	return ""
}

func (x *MsgSwap) GetAggregatorTargetAddress() string {
	if x != nil {
		return x.AggregatorTargetAddress
	}
	return ""
}

func (x *MsgSwap) GetAggregatorTargetLimit() string {
	if x != nil {
		return x.AggregatorTargetLimit
	}
	return ""
}

func (x *MsgSwap) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_market
}

func (x *MsgSwap) GetStreamQuantity() uint64 {
	if x != nil {
		return x.StreamQuantity
	}
	return 0
}

func (x *MsgSwap) GetStreamInterval() uint64 {
	if x != nil {
		return x.StreamInterval
	}
	return 0
}

var File_types_msg_swap_proto protoreflect.FileDescriptor

var file_types_msg_swap_proto_rawDesc = []byte{
	0x0a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x13, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x07, 0x0a, 0x07, 0x4d, 0x73, 0x67,
	0x53, 0x77, 0x61, 0x70, 0x12, 0x26, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x78, 0x42, 0x0a, 0xc8, 0xde,
	0x1f, 0x00, 0xea, 0xde, 0x1f, 0x02, 0x74, 0x78, 0x52, 0x02, 0x74, 0x78, 0x12, 0x77, 0x0a, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x42, 0x45, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f,
	0x74, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0xea, 0xde, 0x1f, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xfa, 0xde, 0x1f, 0x2f,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x16, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0xea, 0xde, 0x1f, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x60, 0x0a, 0x11, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xfa, 0xde, 0x1f, 0x2f,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x10, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x6e, 0x0a, 0x16, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x38, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x16, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0xea, 0xde, 0x1f, 0x16, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x14, 0x61, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x31, 0xfa, 0xde, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x19,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x17, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xc8, 0xde, 0x1f, 0x01, 0xda,
	0xde, 0x1f, 0x16, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x52, 0x15, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x2f, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x2a, 0x22, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x01, 0x42, 0x79, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x42, 0x0c, 0x4d, 0x73, 0x67, 0x53, 0x77, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x68, 0x6f, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0xca, 0x02,
	0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0xe2, 0x02, 0x11, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x05, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_msg_swap_proto_rawDescOnce sync.Once
	file_types_msg_swap_proto_rawDescData = file_types_msg_swap_proto_rawDesc
)

func file_types_msg_swap_proto_rawDescGZIP() []byte {
	file_types_msg_swap_proto_rawDescOnce.Do(func() {
		file_types_msg_swap_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_msg_swap_proto_rawDescData)
	})
	return file_types_msg_swap_proto_rawDescData
}

var file_types_msg_swap_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_types_msg_swap_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_types_msg_swap_proto_goTypes = []interface{}{
	(OrderType)(0),       // 0: types.OrderType
	(*MsgSwap)(nil),      // 1: types.MsgSwap
	(*common.Tx)(nil),    // 2: common.Tx
	(*common.Asset)(nil), // 3: common.Asset
}
var file_types_msg_swap_proto_depIdxs = []int32{
	2, // 0: types.MsgSwap.tx:type_name -> common.Tx
	3, // 1: types.MsgSwap.target_asset:type_name -> common.Asset
	0, // 2: types.MsgSwap.order_type:type_name -> types.OrderType
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_types_msg_swap_proto_init() }
func file_types_msg_swap_proto_init() {
	if File_types_msg_swap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_msg_swap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_msg_swap_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_msg_swap_proto_goTypes,
		DependencyIndexes: file_types_msg_swap_proto_depIdxs,
		EnumInfos:         file_types_msg_swap_proto_enumTypes,
		MessageInfos:      file_types_msg_swap_proto_msgTypes,
	}.Build()
	File_types_msg_swap_proto = out.File
	file_types_msg_swap_proto_rawDesc = nil
	file_types_msg_swap_proto_goTypes = nil
	file_types_msg_swap_proto_depIdxs = nil
}
