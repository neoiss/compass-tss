// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_QueryNetworkRequest        protoreflect.MessageDescriptor
	fd_QueryNetworkRequest_height protoreflect.FieldDescriptor
)

func init() {
	file_types_query_network_proto_init()
	md_QueryNetworkRequest = File_types_query_network_proto.Messages().ByName("QueryNetworkRequest")
	fd_QueryNetworkRequest_height = md_QueryNetworkRequest.Fields().ByName("height")
}

var _ protoreflect.Message = (*fastReflection_QueryNetworkRequest)(nil)

type fastReflection_QueryNetworkRequest QueryNetworkRequest

func (x *QueryNetworkRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryNetworkRequest)(x)
}

func (x *QueryNetworkRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_types_query_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryNetworkRequest_messageType fastReflection_QueryNetworkRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryNetworkRequest_messageType{}

type fastReflection_QueryNetworkRequest_messageType struct{}

func (x fastReflection_QueryNetworkRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryNetworkRequest)(nil)
}
func (x fastReflection_QueryNetworkRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryNetworkRequest)
}
func (x fastReflection_QueryNetworkRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryNetworkRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryNetworkRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryNetworkRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryNetworkRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryNetworkRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryNetworkRequest) New() protoreflect.Message {
	return new(fastReflection_QueryNetworkRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryNetworkRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryNetworkRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryNetworkRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Height != "" {
		value := protoreflect.ValueOfString(x.Height)
		if !f(fd_QueryNetworkRequest_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryNetworkRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "types.QueryNetworkRequest.height":
		return x.Height != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkRequest"))
		}
		panic(fmt.Errorf("message types.QueryNetworkRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryNetworkRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "types.QueryNetworkRequest.height":
		x.Height = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkRequest"))
		}
		panic(fmt.Errorf("message types.QueryNetworkRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryNetworkRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "types.QueryNetworkRequest.height":
		value := x.Height
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkRequest"))
		}
		panic(fmt.Errorf("message types.QueryNetworkRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryNetworkRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "types.QueryNetworkRequest.height":
		x.Height = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkRequest"))
		}
		panic(fmt.Errorf("message types.QueryNetworkRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryNetworkRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "types.QueryNetworkRequest.height":
		panic(fmt.Errorf("field height of message types.QueryNetworkRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkRequest"))
		}
		panic(fmt.Errorf("message types.QueryNetworkRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryNetworkRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "types.QueryNetworkRequest.height":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkRequest"))
		}
		panic(fmt.Errorf("message types.QueryNetworkRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryNetworkRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in types.QueryNetworkRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryNetworkRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryNetworkRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryNetworkRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryNetworkRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryNetworkRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Height)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryNetworkRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Height) > 0 {
			i -= len(x.Height)
			copy(dAtA[i:], x.Height)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Height)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryNetworkRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryNetworkRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryNetworkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Height = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryNetworkResponse                          protoreflect.MessageDescriptor
	fd_QueryNetworkResponse_bond_reward_rune         protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_total_bond_units         protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_available_pools_rune     protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_vaults_liquidity_rune    protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_effective_security_bond  protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_total_reserve            protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_vaults_migrating         protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_gas_spent_rune           protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_gas_withheld_rune        protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_outbound_fee_multiplier  protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_native_outbound_fee_rune protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_native_tx_fee_rune       protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_tns_register_fee_rune    protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_tns_fee_per_block_rune   protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_rune_price_in_tor        protoreflect.FieldDescriptor
	fd_QueryNetworkResponse_tor_price_in_rune        protoreflect.FieldDescriptor
)

func init() {
	file_types_query_network_proto_init()
	md_QueryNetworkResponse = File_types_query_network_proto.Messages().ByName("QueryNetworkResponse")
	fd_QueryNetworkResponse_bond_reward_rune = md_QueryNetworkResponse.Fields().ByName("bond_reward_rune")
	fd_QueryNetworkResponse_total_bond_units = md_QueryNetworkResponse.Fields().ByName("total_bond_units")
	fd_QueryNetworkResponse_available_pools_rune = md_QueryNetworkResponse.Fields().ByName("available_pools_rune")
	fd_QueryNetworkResponse_vaults_liquidity_rune = md_QueryNetworkResponse.Fields().ByName("vaults_liquidity_rune")
	fd_QueryNetworkResponse_effective_security_bond = md_QueryNetworkResponse.Fields().ByName("effective_security_bond")
	fd_QueryNetworkResponse_total_reserve = md_QueryNetworkResponse.Fields().ByName("total_reserve")
	fd_QueryNetworkResponse_vaults_migrating = md_QueryNetworkResponse.Fields().ByName("vaults_migrating")
	fd_QueryNetworkResponse_gas_spent_rune = md_QueryNetworkResponse.Fields().ByName("gas_spent_rune")
	fd_QueryNetworkResponse_gas_withheld_rune = md_QueryNetworkResponse.Fields().ByName("gas_withheld_rune")
	fd_QueryNetworkResponse_outbound_fee_multiplier = md_QueryNetworkResponse.Fields().ByName("outbound_fee_multiplier")
	fd_QueryNetworkResponse_native_outbound_fee_rune = md_QueryNetworkResponse.Fields().ByName("native_outbound_fee_rune")
	fd_QueryNetworkResponse_native_tx_fee_rune = md_QueryNetworkResponse.Fields().ByName("native_tx_fee_rune")
	fd_QueryNetworkResponse_tns_register_fee_rune = md_QueryNetworkResponse.Fields().ByName("tns_register_fee_rune")
	fd_QueryNetworkResponse_tns_fee_per_block_rune = md_QueryNetworkResponse.Fields().ByName("tns_fee_per_block_rune")
	fd_QueryNetworkResponse_rune_price_in_tor = md_QueryNetworkResponse.Fields().ByName("rune_price_in_tor")
	fd_QueryNetworkResponse_tor_price_in_rune = md_QueryNetworkResponse.Fields().ByName("tor_price_in_rune")
}

var _ protoreflect.Message = (*fastReflection_QueryNetworkResponse)(nil)

type fastReflection_QueryNetworkResponse QueryNetworkResponse

func (x *QueryNetworkResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryNetworkResponse)(x)
}

func (x *QueryNetworkResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_types_query_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryNetworkResponse_messageType fastReflection_QueryNetworkResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryNetworkResponse_messageType{}

type fastReflection_QueryNetworkResponse_messageType struct{}

func (x fastReflection_QueryNetworkResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryNetworkResponse)(nil)
}
func (x fastReflection_QueryNetworkResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryNetworkResponse)
}
func (x fastReflection_QueryNetworkResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryNetworkResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryNetworkResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryNetworkResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryNetworkResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryNetworkResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryNetworkResponse) New() protoreflect.Message {
	return new(fastReflection_QueryNetworkResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryNetworkResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryNetworkResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryNetworkResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BondRewardRune != "" {
		value := protoreflect.ValueOfString(x.BondRewardRune)
		if !f(fd_QueryNetworkResponse_bond_reward_rune, value) {
			return
		}
	}
	if x.TotalBondUnits != "" {
		value := protoreflect.ValueOfString(x.TotalBondUnits)
		if !f(fd_QueryNetworkResponse_total_bond_units, value) {
			return
		}
	}
	if x.AvailablePoolsRune != "" {
		value := protoreflect.ValueOfString(x.AvailablePoolsRune)
		if !f(fd_QueryNetworkResponse_available_pools_rune, value) {
			return
		}
	}
	if x.VaultsLiquidityRune != "" {
		value := protoreflect.ValueOfString(x.VaultsLiquidityRune)
		if !f(fd_QueryNetworkResponse_vaults_liquidity_rune, value) {
			return
		}
	}
	if x.EffectiveSecurityBond != "" {
		value := protoreflect.ValueOfString(x.EffectiveSecurityBond)
		if !f(fd_QueryNetworkResponse_effective_security_bond, value) {
			return
		}
	}
	if x.TotalReserve != "" {
		value := protoreflect.ValueOfString(x.TotalReserve)
		if !f(fd_QueryNetworkResponse_total_reserve, value) {
			return
		}
	}
	if x.VaultsMigrating != false {
		value := protoreflect.ValueOfBool(x.VaultsMigrating)
		if !f(fd_QueryNetworkResponse_vaults_migrating, value) {
			return
		}
	}
	if x.GasSpentRune != "" {
		value := protoreflect.ValueOfString(x.GasSpentRune)
		if !f(fd_QueryNetworkResponse_gas_spent_rune, value) {
			return
		}
	}
	if x.GasWithheldRune != "" {
		value := protoreflect.ValueOfString(x.GasWithheldRune)
		if !f(fd_QueryNetworkResponse_gas_withheld_rune, value) {
			return
		}
	}
	if x.OutboundFeeMultiplier != "" {
		value := protoreflect.ValueOfString(x.OutboundFeeMultiplier)
		if !f(fd_QueryNetworkResponse_outbound_fee_multiplier, value) {
			return
		}
	}
	if x.NativeOutboundFeeRune != "" {
		value := protoreflect.ValueOfString(x.NativeOutboundFeeRune)
		if !f(fd_QueryNetworkResponse_native_outbound_fee_rune, value) {
			return
		}
	}
	if x.NativeTxFeeRune != "" {
		value := protoreflect.ValueOfString(x.NativeTxFeeRune)
		if !f(fd_QueryNetworkResponse_native_tx_fee_rune, value) {
			return
		}
	}
	if x.TnsRegisterFeeRune != "" {
		value := protoreflect.ValueOfString(x.TnsRegisterFeeRune)
		if !f(fd_QueryNetworkResponse_tns_register_fee_rune, value) {
			return
		}
	}
	if x.TnsFeePerBlockRune != "" {
		value := protoreflect.ValueOfString(x.TnsFeePerBlockRune)
		if !f(fd_QueryNetworkResponse_tns_fee_per_block_rune, value) {
			return
		}
	}
	if x.RunePriceInTor != "" {
		value := protoreflect.ValueOfString(x.RunePriceInTor)
		if !f(fd_QueryNetworkResponse_rune_price_in_tor, value) {
			return
		}
	}
	if x.TorPriceInRune != "" {
		value := protoreflect.ValueOfString(x.TorPriceInRune)
		if !f(fd_QueryNetworkResponse_tor_price_in_rune, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryNetworkResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "types.QueryNetworkResponse.bond_reward_rune":
		return x.BondRewardRune != ""
	case "types.QueryNetworkResponse.total_bond_units":
		return x.TotalBondUnits != ""
	case "types.QueryNetworkResponse.available_pools_rune":
		return x.AvailablePoolsRune != ""
	case "types.QueryNetworkResponse.vaults_liquidity_rune":
		return x.VaultsLiquidityRune != ""
	case "types.QueryNetworkResponse.effective_security_bond":
		return x.EffectiveSecurityBond != ""
	case "types.QueryNetworkResponse.total_reserve":
		return x.TotalReserve != ""
	case "types.QueryNetworkResponse.vaults_migrating":
		return x.VaultsMigrating != false
	case "types.QueryNetworkResponse.gas_spent_rune":
		return x.GasSpentRune != ""
	case "types.QueryNetworkResponse.gas_withheld_rune":
		return x.GasWithheldRune != ""
	case "types.QueryNetworkResponse.outbound_fee_multiplier":
		return x.OutboundFeeMultiplier != ""
	case "types.QueryNetworkResponse.native_outbound_fee_rune":
		return x.NativeOutboundFeeRune != ""
	case "types.QueryNetworkResponse.native_tx_fee_rune":
		return x.NativeTxFeeRune != ""
	case "types.QueryNetworkResponse.tns_register_fee_rune":
		return x.TnsRegisterFeeRune != ""
	case "types.QueryNetworkResponse.tns_fee_per_block_rune":
		return x.TnsFeePerBlockRune != ""
	case "types.QueryNetworkResponse.rune_price_in_tor":
		return x.RunePriceInTor != ""
	case "types.QueryNetworkResponse.tor_price_in_rune":
		return x.TorPriceInRune != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkResponse"))
		}
		panic(fmt.Errorf("message types.QueryNetworkResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryNetworkResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "types.QueryNetworkResponse.bond_reward_rune":
		x.BondRewardRune = ""
	case "types.QueryNetworkResponse.total_bond_units":
		x.TotalBondUnits = ""
	case "types.QueryNetworkResponse.available_pools_rune":
		x.AvailablePoolsRune = ""
	case "types.QueryNetworkResponse.vaults_liquidity_rune":
		x.VaultsLiquidityRune = ""
	case "types.QueryNetworkResponse.effective_security_bond":
		x.EffectiveSecurityBond = ""
	case "types.QueryNetworkResponse.total_reserve":
		x.TotalReserve = ""
	case "types.QueryNetworkResponse.vaults_migrating":
		x.VaultsMigrating = false
	case "types.QueryNetworkResponse.gas_spent_rune":
		x.GasSpentRune = ""
	case "types.QueryNetworkResponse.gas_withheld_rune":
		x.GasWithheldRune = ""
	case "types.QueryNetworkResponse.outbound_fee_multiplier":
		x.OutboundFeeMultiplier = ""
	case "types.QueryNetworkResponse.native_outbound_fee_rune":
		x.NativeOutboundFeeRune = ""
	case "types.QueryNetworkResponse.native_tx_fee_rune":
		x.NativeTxFeeRune = ""
	case "types.QueryNetworkResponse.tns_register_fee_rune":
		x.TnsRegisterFeeRune = ""
	case "types.QueryNetworkResponse.tns_fee_per_block_rune":
		x.TnsFeePerBlockRune = ""
	case "types.QueryNetworkResponse.rune_price_in_tor":
		x.RunePriceInTor = ""
	case "types.QueryNetworkResponse.tor_price_in_rune":
		x.TorPriceInRune = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkResponse"))
		}
		panic(fmt.Errorf("message types.QueryNetworkResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryNetworkResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "types.QueryNetworkResponse.bond_reward_rune":
		value := x.BondRewardRune
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.total_bond_units":
		value := x.TotalBondUnits
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.available_pools_rune":
		value := x.AvailablePoolsRune
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.vaults_liquidity_rune":
		value := x.VaultsLiquidityRune
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.effective_security_bond":
		value := x.EffectiveSecurityBond
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.total_reserve":
		value := x.TotalReserve
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.vaults_migrating":
		value := x.VaultsMigrating
		return protoreflect.ValueOfBool(value)
	case "types.QueryNetworkResponse.gas_spent_rune":
		value := x.GasSpentRune
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.gas_withheld_rune":
		value := x.GasWithheldRune
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.outbound_fee_multiplier":
		value := x.OutboundFeeMultiplier
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.native_outbound_fee_rune":
		value := x.NativeOutboundFeeRune
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.native_tx_fee_rune":
		value := x.NativeTxFeeRune
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.tns_register_fee_rune":
		value := x.TnsRegisterFeeRune
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.tns_fee_per_block_rune":
		value := x.TnsFeePerBlockRune
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.rune_price_in_tor":
		value := x.RunePriceInTor
		return protoreflect.ValueOfString(value)
	case "types.QueryNetworkResponse.tor_price_in_rune":
		value := x.TorPriceInRune
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkResponse"))
		}
		panic(fmt.Errorf("message types.QueryNetworkResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryNetworkResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "types.QueryNetworkResponse.bond_reward_rune":
		x.BondRewardRune = value.Interface().(string)
	case "types.QueryNetworkResponse.total_bond_units":
		x.TotalBondUnits = value.Interface().(string)
	case "types.QueryNetworkResponse.available_pools_rune":
		x.AvailablePoolsRune = value.Interface().(string)
	case "types.QueryNetworkResponse.vaults_liquidity_rune":
		x.VaultsLiquidityRune = value.Interface().(string)
	case "types.QueryNetworkResponse.effective_security_bond":
		x.EffectiveSecurityBond = value.Interface().(string)
	case "types.QueryNetworkResponse.total_reserve":
		x.TotalReserve = value.Interface().(string)
	case "types.QueryNetworkResponse.vaults_migrating":
		x.VaultsMigrating = value.Bool()
	case "types.QueryNetworkResponse.gas_spent_rune":
		x.GasSpentRune = value.Interface().(string)
	case "types.QueryNetworkResponse.gas_withheld_rune":
		x.GasWithheldRune = value.Interface().(string)
	case "types.QueryNetworkResponse.outbound_fee_multiplier":
		x.OutboundFeeMultiplier = value.Interface().(string)
	case "types.QueryNetworkResponse.native_outbound_fee_rune":
		x.NativeOutboundFeeRune = value.Interface().(string)
	case "types.QueryNetworkResponse.native_tx_fee_rune":
		x.NativeTxFeeRune = value.Interface().(string)
	case "types.QueryNetworkResponse.tns_register_fee_rune":
		x.TnsRegisterFeeRune = value.Interface().(string)
	case "types.QueryNetworkResponse.tns_fee_per_block_rune":
		x.TnsFeePerBlockRune = value.Interface().(string)
	case "types.QueryNetworkResponse.rune_price_in_tor":
		x.RunePriceInTor = value.Interface().(string)
	case "types.QueryNetworkResponse.tor_price_in_rune":
		x.TorPriceInRune = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkResponse"))
		}
		panic(fmt.Errorf("message types.QueryNetworkResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryNetworkResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "types.QueryNetworkResponse.bond_reward_rune":
		panic(fmt.Errorf("field bond_reward_rune of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.total_bond_units":
		panic(fmt.Errorf("field total_bond_units of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.available_pools_rune":
		panic(fmt.Errorf("field available_pools_rune of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.vaults_liquidity_rune":
		panic(fmt.Errorf("field vaults_liquidity_rune of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.effective_security_bond":
		panic(fmt.Errorf("field effective_security_bond of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.total_reserve":
		panic(fmt.Errorf("field total_reserve of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.vaults_migrating":
		panic(fmt.Errorf("field vaults_migrating of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.gas_spent_rune":
		panic(fmt.Errorf("field gas_spent_rune of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.gas_withheld_rune":
		panic(fmt.Errorf("field gas_withheld_rune of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.outbound_fee_multiplier":
		panic(fmt.Errorf("field outbound_fee_multiplier of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.native_outbound_fee_rune":
		panic(fmt.Errorf("field native_outbound_fee_rune of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.native_tx_fee_rune":
		panic(fmt.Errorf("field native_tx_fee_rune of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.tns_register_fee_rune":
		panic(fmt.Errorf("field tns_register_fee_rune of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.tns_fee_per_block_rune":
		panic(fmt.Errorf("field tns_fee_per_block_rune of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.rune_price_in_tor":
		panic(fmt.Errorf("field rune_price_in_tor of message types.QueryNetworkResponse is not mutable"))
	case "types.QueryNetworkResponse.tor_price_in_rune":
		panic(fmt.Errorf("field tor_price_in_rune of message types.QueryNetworkResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkResponse"))
		}
		panic(fmt.Errorf("message types.QueryNetworkResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryNetworkResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "types.QueryNetworkResponse.bond_reward_rune":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.total_bond_units":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.available_pools_rune":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.vaults_liquidity_rune":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.effective_security_bond":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.total_reserve":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.vaults_migrating":
		return protoreflect.ValueOfBool(false)
	case "types.QueryNetworkResponse.gas_spent_rune":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.gas_withheld_rune":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.outbound_fee_multiplier":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.native_outbound_fee_rune":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.native_tx_fee_rune":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.tns_register_fee_rune":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.tns_fee_per_block_rune":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.rune_price_in_tor":
		return protoreflect.ValueOfString("")
	case "types.QueryNetworkResponse.tor_price_in_rune":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.QueryNetworkResponse"))
		}
		panic(fmt.Errorf("message types.QueryNetworkResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryNetworkResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in types.QueryNetworkResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryNetworkResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryNetworkResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryNetworkResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryNetworkResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryNetworkResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.BondRewardRune)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalBondUnits)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AvailablePoolsRune)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.VaultsLiquidityRune)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EffectiveSecurityBond)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalReserve)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.VaultsMigrating {
			n += 2
		}
		l = len(x.GasSpentRune)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.GasWithheldRune)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OutboundFeeMultiplier)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NativeOutboundFeeRune)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NativeTxFeeRune)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TnsRegisterFeeRune)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TnsFeePerBlockRune)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RunePriceInTor)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TorPriceInRune)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryNetworkResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.VaultsLiquidityRune) > 0 {
			i -= len(x.VaultsLiquidityRune)
			copy(dAtA[i:], x.VaultsLiquidityRune)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VaultsLiquidityRune)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.AvailablePoolsRune) > 0 {
			i -= len(x.AvailablePoolsRune)
			copy(dAtA[i:], x.AvailablePoolsRune)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AvailablePoolsRune)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.TorPriceInRune) > 0 {
			i -= len(x.TorPriceInRune)
			copy(dAtA[i:], x.TorPriceInRune)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TorPriceInRune)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.RunePriceInTor) > 0 {
			i -= len(x.RunePriceInTor)
			copy(dAtA[i:], x.RunePriceInTor)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RunePriceInTor)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.TnsFeePerBlockRune) > 0 {
			i -= len(x.TnsFeePerBlockRune)
			copy(dAtA[i:], x.TnsFeePerBlockRune)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TnsFeePerBlockRune)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.TnsRegisterFeeRune) > 0 {
			i -= len(x.TnsRegisterFeeRune)
			copy(dAtA[i:], x.TnsRegisterFeeRune)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TnsRegisterFeeRune)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.NativeTxFeeRune) > 0 {
			i -= len(x.NativeTxFeeRune)
			copy(dAtA[i:], x.NativeTxFeeRune)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NativeTxFeeRune)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.NativeOutboundFeeRune) > 0 {
			i -= len(x.NativeOutboundFeeRune)
			copy(dAtA[i:], x.NativeOutboundFeeRune)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NativeOutboundFeeRune)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.OutboundFeeMultiplier) > 0 {
			i -= len(x.OutboundFeeMultiplier)
			copy(dAtA[i:], x.OutboundFeeMultiplier)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OutboundFeeMultiplier)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.GasWithheldRune) > 0 {
			i -= len(x.GasWithheldRune)
			copy(dAtA[i:], x.GasWithheldRune)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasWithheldRune)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.GasSpentRune) > 0 {
			i -= len(x.GasSpentRune)
			copy(dAtA[i:], x.GasSpentRune)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasSpentRune)))
			i--
			dAtA[i] = 0x32
		}
		if x.VaultsMigrating {
			i--
			if x.VaultsMigrating {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if len(x.TotalReserve) > 0 {
			i -= len(x.TotalReserve)
			copy(dAtA[i:], x.TotalReserve)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalReserve)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.EffectiveSecurityBond) > 0 {
			i -= len(x.EffectiveSecurityBond)
			copy(dAtA[i:], x.EffectiveSecurityBond)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EffectiveSecurityBond)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.TotalBondUnits) > 0 {
			i -= len(x.TotalBondUnits)
			copy(dAtA[i:], x.TotalBondUnits)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalBondUnits)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.BondRewardRune) > 0 {
			i -= len(x.BondRewardRune)
			copy(dAtA[i:], x.BondRewardRune)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BondRewardRune)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryNetworkResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryNetworkResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryNetworkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BondRewardRune", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BondRewardRune = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalBondUnits", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalBondUnits = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AvailablePoolsRune", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AvailablePoolsRune = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VaultsLiquidityRune", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VaultsLiquidityRune = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EffectiveSecurityBond", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EffectiveSecurityBond = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalReserve", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalReserve = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VaultsMigrating", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.VaultsMigrating = bool(v != 0)
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasSpentRune", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasSpentRune = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasWithheldRune", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasWithheldRune = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutboundFeeMultiplier", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OutboundFeeMultiplier = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NativeOutboundFeeRune", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NativeOutboundFeeRune = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NativeTxFeeRune", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NativeTxFeeRune = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TnsRegisterFeeRune", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TnsRegisterFeeRune = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TnsFeePerBlockRune", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TnsFeePerBlockRune = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RunePriceInTor", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RunePriceInTor = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TorPriceInRune", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TorPriceInRune = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: types/query_network.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *QueryNetworkRequest) Reset() {
	*x = QueryNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_query_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNetworkRequest) ProtoMessage() {}

// Deprecated: Use QueryNetworkRequest.ProtoReflect.Descriptor instead.
func (*QueryNetworkRequest) Descriptor() ([]byte, []int) {
	return file_types_query_network_proto_rawDescGZIP(), []int{0}
}

func (x *QueryNetworkRequest) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

type QueryNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total amount of RUNE awarded to node operators
	BondRewardRune string `protobuf:"bytes,1,opt,name=bond_reward_rune,json=bondRewardRune,proto3" json:"bond_reward_rune,omitempty"`
	// total bonded RUNE
	TotalBondUnits string `protobuf:"bytes,2,opt,name=total_bond_units,json=totalBondUnits,proto3" json:"total_bond_units,omitempty"`
	// RUNE in Available pools (equal in value to the Assets in those pools)
	AvailablePoolsRune string `protobuf:"bytes,15,opt,name=available_pools_rune,json=availablePoolsRune,proto3" json:"available_pools_rune,omitempty"`
	// RUNE value of Layer 1 Assets in vaults
	VaultsLiquidityRune string `protobuf:"bytes,16,opt,name=vaults_liquidity_rune,json=vaultsLiquidityRune,proto3" json:"vaults_liquidity_rune,omitempty"`
	// effective security bond used to determine maximum pooled RUNE
	EffectiveSecurityBond string `protobuf:"bytes,3,opt,name=effective_security_bond,json=effectiveSecurityBond,proto3" json:"effective_security_bond,omitempty"`
	// total reserve RUNE
	TotalReserve string `protobuf:"bytes,4,opt,name=total_reserve,json=totalReserve,proto3" json:"total_reserve,omitempty"`
	// Returns true if there exist RetiringVaults which have not finished migrating funds to new ActiveVaults
	VaultsMigrating bool `protobuf:"varint,5,opt,name=vaults_migrating,json=vaultsMigrating,proto3" json:"vaults_migrating,omitempty"`
	// Sum of the gas the network has spent to send outbounds
	GasSpentRune string `protobuf:"bytes,6,opt,name=gas_spent_rune,json=gasSpentRune,proto3" json:"gas_spent_rune,omitempty"`
	// Sum of the gas withheld from users to cover outbound gas
	GasWithheldRune string `protobuf:"bytes,7,opt,name=gas_withheld_rune,json=gasWithheldRune,proto3" json:"gas_withheld_rune,omitempty"`
	// Current outbound fee multiplier, in basis points
	OutboundFeeMultiplier string `protobuf:"bytes,8,opt,name=outbound_fee_multiplier,json=outboundFeeMultiplier,proto3" json:"outbound_fee_multiplier,omitempty"`
	// the outbound transaction fee in rune, converted from the NativeOutboundFeeUSD mimir (after USD fees are enabled)
	NativeOutboundFeeRune string `protobuf:"bytes,9,opt,name=native_outbound_fee_rune,json=nativeOutboundFeeRune,proto3" json:"native_outbound_fee_rune,omitempty"`
	// the native transaction fee in rune, converted from the NativeTransactionFeeUSD mimir (after USD fees are enabled)
	NativeTxFeeRune string `protobuf:"bytes,10,opt,name=native_tx_fee_rune,json=nativeTxFeeRune,proto3" json:"native_tx_fee_rune,omitempty"`
	// the thorname register fee in rune, converted from the TNSRegisterFeeUSD mimir (after USD fees are enabled)
	TnsRegisterFeeRune string `protobuf:"bytes,11,opt,name=tns_register_fee_rune,json=tnsRegisterFeeRune,proto3" json:"tns_register_fee_rune,omitempty"`
	// the thorname fee per block in rune, converted from the TNSFeePerBlockUSD mimir (after USD fees are enabled)
	TnsFeePerBlockRune string `protobuf:"bytes,12,opt,name=tns_fee_per_block_rune,json=tnsFeePerBlockRune,proto3" json:"tns_fee_per_block_rune,omitempty"`
	// the rune price in tor
	RunePriceInTor string `protobuf:"bytes,13,opt,name=rune_price_in_tor,json=runePriceInTor,proto3" json:"rune_price_in_tor,omitempty"`
	// the tor price in rune
	TorPriceInRune string `protobuf:"bytes,14,opt,name=tor_price_in_rune,json=torPriceInRune,proto3" json:"tor_price_in_rune,omitempty"`
}

func (x *QueryNetworkResponse) Reset() {
	*x = QueryNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_query_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNetworkResponse) ProtoMessage() {}

// Deprecated: Use QueryNetworkResponse.ProtoReflect.Descriptor instead.
func (*QueryNetworkResponse) Descriptor() ([]byte, []int) {
	return file_types_query_network_proto_rawDescGZIP(), []int{1}
}

func (x *QueryNetworkResponse) GetBondRewardRune() string {
	if x != nil {
		return x.BondRewardRune
	}
	return ""
}

func (x *QueryNetworkResponse) GetTotalBondUnits() string {
	if x != nil {
		return x.TotalBondUnits
	}
	return ""
}

func (x *QueryNetworkResponse) GetAvailablePoolsRune() string {
	if x != nil {
		return x.AvailablePoolsRune
	}
	return ""
}

func (x *QueryNetworkResponse) GetVaultsLiquidityRune() string {
	if x != nil {
		return x.VaultsLiquidityRune
	}
	return ""
}

func (x *QueryNetworkResponse) GetEffectiveSecurityBond() string {
	if x != nil {
		return x.EffectiveSecurityBond
	}
	return ""
}

func (x *QueryNetworkResponse) GetTotalReserve() string {
	if x != nil {
		return x.TotalReserve
	}
	return ""
}

func (x *QueryNetworkResponse) GetVaultsMigrating() bool {
	if x != nil {
		return x.VaultsMigrating
	}
	return false
}

func (x *QueryNetworkResponse) GetGasSpentRune() string {
	if x != nil {
		return x.GasSpentRune
	}
	return ""
}

func (x *QueryNetworkResponse) GetGasWithheldRune() string {
	if x != nil {
		return x.GasWithheldRune
	}
	return ""
}

func (x *QueryNetworkResponse) GetOutboundFeeMultiplier() string {
	if x != nil {
		return x.OutboundFeeMultiplier
	}
	return ""
}

func (x *QueryNetworkResponse) GetNativeOutboundFeeRune() string {
	if x != nil {
		return x.NativeOutboundFeeRune
	}
	return ""
}

func (x *QueryNetworkResponse) GetNativeTxFeeRune() string {
	if x != nil {
		return x.NativeTxFeeRune
	}
	return ""
}

func (x *QueryNetworkResponse) GetTnsRegisterFeeRune() string {
	if x != nil {
		return x.TnsRegisterFeeRune
	}
	return ""
}

func (x *QueryNetworkResponse) GetTnsFeePerBlockRune() string {
	if x != nil {
		return x.TnsFeePerBlockRune
	}
	return ""
}

func (x *QueryNetworkResponse) GetRunePriceInTor() string {
	if x != nil {
		return x.RunePriceInTor
	}
	return ""
}

func (x *QueryNetworkResponse) GetTorPriceInRune() string {
	if x != nil {
		return x.TorPriceInRune
	}
	return ""
}

var File_types_query_network_proto protoreflect.FileDescriptor

var file_types_query_network_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xf2, 0x08, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x10, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x72, 0x75, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xde, 0x1f, 0x10,
	0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x65,
	0x52, 0x0e, 0x62, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6e, 0x65,
	0x12, 0x3e, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xde, 0x1f, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x12, 0x4a, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xea, 0xde, 0x1f, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x75, 0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x15,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xde, 0x1f,
	0x15, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x13, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6e, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xea, 0xde,
	0x1f, 0x17, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x52, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x6e, 0x64,
	0x12, 0x36, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xea, 0xde, 0x1f, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x14, 0xea, 0xde, 0x1f, 0x10, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0e, 0x67, 0x61, 0x73,
	0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e, 0x67, 0x61, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x0c, 0x67, 0x61, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x52,
	0x75, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x67, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x68,
	0x65, 0x6c, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xea, 0xde, 0x1f, 0x11, 0x67, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x68, 0x65, 0x6c, 0x64,
	0x5f, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x0f, 0x67, 0x61, 0x73, 0x57, 0x69, 0x74, 0x68, 0x68, 0x65,
	0x6c, 0x64, 0x52, 0x75, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x46, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x55,
	0x0a, 0x18, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1c, 0xea, 0xde, 0x1f, 0x18, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x15,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x65,
	0x65, 0x52, 0x75, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x78, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x78,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x0f, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x78, 0x46, 0x65, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x15, 0x74, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72,
	0x75, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xde, 0x1f, 0x15, 0x74,
	0x6e, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x72, 0x75, 0x6e, 0x65, 0x52, 0x12, 0x74, 0x6e, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x16, 0x74, 0x6e, 0x73, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x75,
	0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xea, 0xde, 0x1f, 0x16, 0x74, 0x6e,
	0x73, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x75, 0x6e, 0x65, 0x52, 0x12, 0x74, 0x6e, 0x73, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x11, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x54, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x11, 0x74, 0x6f,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x11, 0x74, 0x6f, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x52, 0x0e, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x52, 0x75, 0x6e, 0x65, 0x42, 0x82, 0x01, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x11, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x6f, 0x72,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76,
	0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x54, 0x58,
	0x58, 0xaa, 0x02, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0xca, 0x02, 0x05, 0x54, 0x79, 0x70, 0x65,
	0x73, 0xe2, 0x02, 0x11, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0xc8, 0xe2, 0x1e,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_query_network_proto_rawDescOnce sync.Once
	file_types_query_network_proto_rawDescData = file_types_query_network_proto_rawDesc
)

func file_types_query_network_proto_rawDescGZIP() []byte {
	file_types_query_network_proto_rawDescOnce.Do(func() {
		file_types_query_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_query_network_proto_rawDescData)
	})
	return file_types_query_network_proto_rawDescData
}

var file_types_query_network_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_types_query_network_proto_goTypes = []interface{}{
	(*QueryNetworkRequest)(nil),  // 0: types.QueryNetworkRequest
	(*QueryNetworkResponse)(nil), // 1: types.QueryNetworkResponse
}
var file_types_query_network_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_types_query_network_proto_init() }
func file_types_query_network_proto_init() {
	if File_types_query_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_query_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_query_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_query_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_query_network_proto_goTypes,
		DependencyIndexes: file_types_query_network_proto_depIdxs,
		MessageInfos:      file_types_query_network_proto_msgTypes,
	}.Build()
	File_types_query_network_proto = out.File
	file_types_query_network_proto_rawDesc = nil
	file_types_query_network_proto_goTypes = nil
	file_types_query_network_proto_depIdxs = nil
}
