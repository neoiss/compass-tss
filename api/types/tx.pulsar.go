// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	_ "cosmossdk.io/api/cosmos/msg/v1"
	fmt "fmt"
	types "github.com/CosmWasm/wasmd/x/wasm/types"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_MsgEmpty protoreflect.MessageDescriptor
)

func init() {
	file_types_tx_proto_init()
	md_MsgEmpty = File_types_tx_proto.Messages().ByName("MsgEmpty")
}

var _ protoreflect.Message = (*fastReflection_MsgEmpty)(nil)

type fastReflection_MsgEmpty MsgEmpty

func (x *MsgEmpty) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgEmpty)(x)
}

func (x *MsgEmpty) slowProtoReflect() protoreflect.Message {
	mi := &file_types_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgEmpty_messageType fastReflection_MsgEmpty_messageType
var _ protoreflect.MessageType = fastReflection_MsgEmpty_messageType{}

type fastReflection_MsgEmpty_messageType struct{}

func (x fastReflection_MsgEmpty_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgEmpty)(nil)
}
func (x fastReflection_MsgEmpty_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgEmpty)
}
func (x fastReflection_MsgEmpty_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgEmpty
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgEmpty) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgEmpty
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgEmpty) Type() protoreflect.MessageType {
	return _fastReflection_MsgEmpty_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgEmpty) New() protoreflect.Message {
	return new(fastReflection_MsgEmpty)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgEmpty) Interface() protoreflect.ProtoMessage {
	return (*MsgEmpty)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgEmpty) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgEmpty) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgEmpty"))
		}
		panic(fmt.Errorf("message types.MsgEmpty does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgEmpty) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgEmpty"))
		}
		panic(fmt.Errorf("message types.MsgEmpty does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgEmpty) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgEmpty"))
		}
		panic(fmt.Errorf("message types.MsgEmpty does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgEmpty) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgEmpty"))
		}
		panic(fmt.Errorf("message types.MsgEmpty does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgEmpty) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgEmpty"))
		}
		panic(fmt.Errorf("message types.MsgEmpty does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgEmpty) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.MsgEmpty"))
		}
		panic(fmt.Errorf("message types.MsgEmpty does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgEmpty) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in types.MsgEmpty", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgEmpty) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgEmpty) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgEmpty) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgEmpty) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgEmpty)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgEmpty)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgEmpty)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgEmpty: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgEmpty: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: types/tx.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MsgEmpty is the return type for all current Msg Server messages
type MsgEmpty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgEmpty) Reset() {
	*x = MsgEmpty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgEmpty) ProtoMessage() {}

// Deprecated: Use MsgEmpty.ProtoReflect.Descriptor instead.
func (*MsgEmpty) Descriptor() ([]byte, []int) {
	return file_types_tx_proto_rawDescGZIP(), []int{0}
}

var File_types_tx_proto protoreflect.FileDescriptor

var file_types_tx_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x6d, 0x73, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67,
	0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73,
	0x67, 0x5f, 0x6d, 0x69, 0x6d, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x74, 0x78, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x78, 0x6f, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f,
	0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x77, 0x61, 0x73, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0a, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0xae, 0x0e, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x03, 0x42,
	0x61, 0x6e, 0x12, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x6e, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x11, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x2f, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x61, 0x74, 0x61, 0x54, 0x78, 0x12, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x72, 0x72, 0x61, 0x74, 0x61, 0x54,
	0x78, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x61, 0x74, 0x61, 0x54, 0x78, 0x51, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x12, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67,
	0x45, 0x72, 0x72, 0x61, 0x74, 0x61, 0x54, 0x78, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x1a, 0x0f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x29, 0x0a, 0x05, 0x4d, 0x69, 0x6d, 0x69, 0x72, 0x12, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x73, 0x67, 0x4d, 0x69, 0x6d, 0x69, 0x72, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x12, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x73, 0x67, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x1a, 0x0f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x3f, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x51, 0x75, 0x6f,
	0x72, 0x75, 0x6d, 0x12, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x1a,
	0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x3b, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x0f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a,
	0x0c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x78, 0x49, 0x6e, 0x12, 0x16, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x54, 0x78, 0x49, 0x6e, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x78, 0x4f, 0x75, 0x74,
	0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3f, 0x0a, 0x10, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x78, 0x51,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x78, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x2b, 0x0a, 0x08, 0x54, 0x68, 0x6f, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x0e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x64, 0x1a, 0x0f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x37, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x0f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2f, 0x0a, 0x08, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x6e, 0x63, 0x79, 0x1a,
	0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x3b, 0x0a, 0x0e, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x6e, 0x63, 0x79, 0x51, 0x75, 0x6f, 0x72,
	0x75, 0x6d, 0x12, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x6f,
	0x6c, 0x76, 0x65, 0x6e, 0x63, 0x79, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x1a, 0x0f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a,
	0x0e, 0x54, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x12,
	0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x54, 0x73,
	0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73,
	0x67, 0x54, 0x73, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x53, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4d, 0x73, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0d, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x1a, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x28, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x14, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x32, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77,
	0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x32, 0x1a, 0x31,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e,
	0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73,
	0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0f, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x73, 0x67, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x0c, 0x53, 0x75, 0x64, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x21, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61, 0x73, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x64, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x2e, 0x77, 0x61,
	0x73, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x64, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x05, 0x80,
	0xe7, 0xb0, 0x2a, 0x01, 0x42, 0x74, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x07, 0x54, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02,
	0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0xca, 0x02, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0xe2, 0x02,
	0x11, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_types_tx_proto_rawDescOnce sync.Once
	file_types_tx_proto_rawDescData = file_types_tx_proto_rawDesc
)

func file_types_tx_proto_rawDescGZIP() []byte {
	file_types_tx_proto_rawDescOnce.Do(func() {
		file_types_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_tx_proto_rawDescData)
	})
	return file_types_tx_proto_rawDescData
}

var file_types_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_types_tx_proto_goTypes = []interface{}{
	(*MsgEmpty)(nil),                              // 0: types.MsgEmpty
	(*MsgBan)(nil),                                // 1: types.MsgBan
	(*MsgDeposit)(nil),                            // 2: types.MsgDeposit
	(*MsgErrataTx)(nil),                           // 3: types.MsgErrataTx
	(*MsgErrataTxQuorum)(nil),                     // 4: types.MsgErrataTxQuorum
	(*MsgMimir)(nil),                              // 5: types.MsgMimir
	(*MsgNetworkFee)(nil),                         // 6: types.MsgNetworkFee
	(*MsgNetworkFeeQuorum)(nil),                   // 7: types.MsgNetworkFeeQuorum
	(*MsgNodePauseChain)(nil),                     // 8: types.MsgNodePauseChain
	(*MsgObservedTxIn)(nil),                       // 9: types.MsgObservedTxIn
	(*MsgObservedTxOut)(nil),                      // 10: types.MsgObservedTxOut
	(*MsgObservedTxQuorum)(nil),                   // 11: types.MsgObservedTxQuorum
	(*MsgSend)(nil),                               // 12: types.MsgSend
	(*MsgSetIPAddress)(nil),                       // 13: types.MsgSetIPAddress
	(*MsgSetNodeKeys)(nil),                        // 14: types.MsgSetNodeKeys
	(*MsgSolvency)(nil),                           // 15: types.MsgSolvency
	(*MsgSolvencyQuorum)(nil),                     // 16: types.MsgSolvencyQuorum
	(*MsgTssKeysignFail)(nil),                     // 17: types.MsgTssKeysignFail
	(*MsgTssPool)(nil),                            // 18: types.MsgTssPool
	(*MsgSetVersion)(nil),                         // 19: types.MsgSetVersion
	(*MsgProposeUpgrade)(nil),                     // 20: types.MsgProposeUpgrade
	(*MsgApproveUpgrade)(nil),                     // 21: types.MsgApproveUpgrade
	(*MsgRejectUpgrade)(nil),                      // 22: types.MsgRejectUpgrade
	(*types.MsgStoreCode)(nil),                    // 23: cosmwasm.wasm.v1.MsgStoreCode
	(*types.MsgInstantiateContract)(nil),          // 24: cosmwasm.wasm.v1.MsgInstantiateContract
	(*types.MsgInstantiateContract2)(nil),         // 25: cosmwasm.wasm.v1.MsgInstantiateContract2
	(*types.MsgExecuteContract)(nil),              // 26: cosmwasm.wasm.v1.MsgExecuteContract
	(*types.MsgMigrateContract)(nil),              // 27: cosmwasm.wasm.v1.MsgMigrateContract
	(*types.MsgSudoContract)(nil),                 // 28: cosmwasm.wasm.v1.MsgSudoContract
	(*types.MsgStoreCodeResponse)(nil),            // 29: cosmwasm.wasm.v1.MsgStoreCodeResponse
	(*types.MsgInstantiateContractResponse)(nil),  // 30: cosmwasm.wasm.v1.MsgInstantiateContractResponse
	(*types.MsgInstantiateContract2Response)(nil), // 31: cosmwasm.wasm.v1.MsgInstantiateContract2Response
	(*types.MsgExecuteContractResponse)(nil),      // 32: cosmwasm.wasm.v1.MsgExecuteContractResponse
	(*types.MsgMigrateContractResponse)(nil),      // 33: cosmwasm.wasm.v1.MsgMigrateContractResponse
	(*types.MsgSudoContractResponse)(nil),         // 34: cosmwasm.wasm.v1.MsgSudoContractResponse
}
var file_types_tx_proto_depIdxs = []int32{
	1,  // 0: types.Msg.Ban:input_type -> types.MsgBan
	2,  // 1: types.Msg.Deposit:input_type -> types.MsgDeposit
	3,  // 2: types.Msg.ErrataTx:input_type -> types.MsgErrataTx
	4,  // 3: types.Msg.ErrataTxQuorum:input_type -> types.MsgErrataTxQuorum
	5,  // 4: types.Msg.Mimir:input_type -> types.MsgMimir
	6,  // 5: types.Msg.NetworkFee:input_type -> types.MsgNetworkFee
	7,  // 6: types.Msg.NetworkFeeQuorum:input_type -> types.MsgNetworkFeeQuorum
	8,  // 7: types.Msg.NodePauseChain:input_type -> types.MsgNodePauseChain
	9,  // 8: types.Msg.ObservedTxIn:input_type -> types.MsgObservedTxIn
	10, // 9: types.Msg.ObservedTxOut:input_type -> types.MsgObservedTxOut
	11, // 10: types.Msg.ObservedTxQuorum:input_type -> types.MsgObservedTxQuorum
	12, // 11: types.Msg.ThorSend:input_type -> types.MsgSend
	13, // 12: types.Msg.SetIPAddress:input_type -> types.MsgSetIPAddress
	14, // 13: types.Msg.SetNodeKeys:input_type -> types.MsgSetNodeKeys
	15, // 14: types.Msg.Solvency:input_type -> types.MsgSolvency
	16, // 15: types.Msg.SolvencyQuorum:input_type -> types.MsgSolvencyQuorum
	17, // 16: types.Msg.TssKeysignFail:input_type -> types.MsgTssKeysignFail
	18, // 17: types.Msg.TssPool:input_type -> types.MsgTssPool
	19, // 18: types.Msg.SetVersion:input_type -> types.MsgSetVersion
	20, // 19: types.Msg.ProposeUpgrade:input_type -> types.MsgProposeUpgrade
	21, // 20: types.Msg.ApproveUpgrade:input_type -> types.MsgApproveUpgrade
	22, // 21: types.Msg.RejectUpgrade:input_type -> types.MsgRejectUpgrade
	23, // 22: types.Msg.StoreCode:input_type -> cosmwasm.wasm.v1.MsgStoreCode
	24, // 23: types.Msg.InstantiateContract:input_type -> cosmwasm.wasm.v1.MsgInstantiateContract
	25, // 24: types.Msg.InstantiateContract2:input_type -> cosmwasm.wasm.v1.MsgInstantiateContract2
	26, // 25: types.Msg.ExecuteContract:input_type -> cosmwasm.wasm.v1.MsgExecuteContract
	27, // 26: types.Msg.MigrateContract:input_type -> cosmwasm.wasm.v1.MsgMigrateContract
	28, // 27: types.Msg.SudoContract:input_type -> cosmwasm.wasm.v1.MsgSudoContract
	0,  // 28: types.Msg.Ban:output_type -> types.MsgEmpty
	0,  // 29: types.Msg.Deposit:output_type -> types.MsgEmpty
	0,  // 30: types.Msg.ErrataTx:output_type -> types.MsgEmpty
	0,  // 31: types.Msg.ErrataTxQuorum:output_type -> types.MsgEmpty
	0,  // 32: types.Msg.Mimir:output_type -> types.MsgEmpty
	0,  // 33: types.Msg.NetworkFee:output_type -> types.MsgEmpty
	0,  // 34: types.Msg.NetworkFeeQuorum:output_type -> types.MsgEmpty
	0,  // 35: types.Msg.NodePauseChain:output_type -> types.MsgEmpty
	0,  // 36: types.Msg.ObservedTxIn:output_type -> types.MsgEmpty
	0,  // 37: types.Msg.ObservedTxOut:output_type -> types.MsgEmpty
	0,  // 38: types.Msg.ObservedTxQuorum:output_type -> types.MsgEmpty
	0,  // 39: types.Msg.ThorSend:output_type -> types.MsgEmpty
	0,  // 40: types.Msg.SetIPAddress:output_type -> types.MsgEmpty
	0,  // 41: types.Msg.SetNodeKeys:output_type -> types.MsgEmpty
	0,  // 42: types.Msg.Solvency:output_type -> types.MsgEmpty
	0,  // 43: types.Msg.SolvencyQuorum:output_type -> types.MsgEmpty
	0,  // 44: types.Msg.TssKeysignFail:output_type -> types.MsgEmpty
	0,  // 45: types.Msg.TssPool:output_type -> types.MsgEmpty
	0,  // 46: types.Msg.SetVersion:output_type -> types.MsgEmpty
	0,  // 47: types.Msg.ProposeUpgrade:output_type -> types.MsgEmpty
	0,  // 48: types.Msg.ApproveUpgrade:output_type -> types.MsgEmpty
	0,  // 49: types.Msg.RejectUpgrade:output_type -> types.MsgEmpty
	29, // 50: types.Msg.StoreCode:output_type -> cosmwasm.wasm.v1.MsgStoreCodeResponse
	30, // 51: types.Msg.InstantiateContract:output_type -> cosmwasm.wasm.v1.MsgInstantiateContractResponse
	31, // 52: types.Msg.InstantiateContract2:output_type -> cosmwasm.wasm.v1.MsgInstantiateContract2Response
	32, // 53: types.Msg.ExecuteContract:output_type -> cosmwasm.wasm.v1.MsgExecuteContractResponse
	33, // 54: types.Msg.MigrateContract:output_type -> cosmwasm.wasm.v1.MsgMigrateContractResponse
	34, // 55: types.Msg.SudoContract:output_type -> cosmwasm.wasm.v1.MsgSudoContractResponse
	28, // [28:56] is the sub-list for method output_type
	0,  // [0:28] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_types_tx_proto_init() }
func file_types_tx_proto_init() {
	if File_types_tx_proto != nil {
		return
	}
	file_types_msg_ban_proto_init()
	file_types_msg_deposit_proto_init()
	file_types_msg_errata_proto_init()
	file_types_msg_mimir_proto_init()
	file_types_msg_network_fee_proto_init()
	file_types_msg_node_pause_chain_proto_init()
	file_types_msg_observed_txin_proto_init()
	file_types_msg_observed_txout_proto_init()
	file_types_msg_observed_tx_quorum_proto_init()
	file_types_msg_send_proto_init()
	file_types_msg_set_ip_address_proto_init()
	file_types_msg_set_node_keys_proto_init()
	file_types_msg_solvency_proto_init()
	file_types_msg_tss_keysign_fail_proto_init()
	file_types_msg_tss_pool_proto_init()
	file_types_msg_version_proto_init()
	file_types_msg_upgrade_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_types_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgEmpty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_types_tx_proto_goTypes,
		DependencyIndexes: file_types_tx_proto_depIdxs,
		MessageInfos:      file_types_tx_proto_msgTypes,
	}.Build()
	File_types_tx_proto = out.File
	file_types_tx_proto_rawDesc = nil
	file_types_tx_proto_goTypes = nil
	file_types_tx_proto_depIdxs = nil
}
