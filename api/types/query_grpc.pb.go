// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: types/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Account_FullMethodName             = "/types.Query/Account"
	Query_Balances_FullMethodName            = "/types.Query/Balances"
	Query_Export_FullMethodName              = "/types.Query/Export"
	Query_Pool_FullMethodName                = "/types.Query/Pool"
	Query_Pools_FullMethodName               = "/types.Query/Pools"
	Query_DerivedPool_FullMethodName         = "/types.Query/DerivedPool"
	Query_DerivedPools_FullMethodName        = "/types.Query/DerivedPools"
	Query_LiquidityProvider_FullMethodName   = "/types.Query/LiquidityProvider"
	Query_LiquidityProviders_FullMethodName  = "/types.Query/LiquidityProviders"
	Query_Saver_FullMethodName               = "/types.Query/Saver"
	Query_Savers_FullMethodName              = "/types.Query/Savers"
	Query_Borrower_FullMethodName            = "/types.Query/Borrower"
	Query_Borrowers_FullMethodName           = "/types.Query/Borrowers"
	Query_TradeUnit_FullMethodName           = "/types.Query/TradeUnit"
	Query_TradeUnits_FullMethodName          = "/types.Query/TradeUnits"
	Query_TradeAccount_FullMethodName        = "/types.Query/TradeAccount"
	Query_TradeAccounts_FullMethodName       = "/types.Query/TradeAccounts"
	Query_SecuredAsset_FullMethodName        = "/types.Query/SecuredAsset"
	Query_SecuredAssets_FullMethodName       = "/types.Query/SecuredAssets"
	Query_Node_FullMethodName                = "/types.Query/Node"
	Query_Nodes_FullMethodName               = "/types.Query/Nodes"
	Query_PoolSlip_FullMethodName            = "/types.Query/PoolSlip"
	Query_PoolSlips_FullMethodName           = "/types.Query/PoolSlips"
	Query_OutboundFee_FullMethodName         = "/types.Query/OutboundFee"
	Query_OutboundFees_FullMethodName        = "/types.Query/OutboundFees"
	Query_StreamingSwap_FullMethodName       = "/types.Query/StreamingSwap"
	Query_StreamingSwaps_FullMethodName      = "/types.Query/StreamingSwaps"
	Query_Ban_FullMethodName                 = "/types.Query/Ban"
	Query_Ragnarok_FullMethodName            = "/types.Query/Ragnarok"
	Query_RunePool_FullMethodName            = "/types.Query/RunePool"
	Query_RuneProvider_FullMethodName        = "/types.Query/RuneProvider"
	Query_RuneProviders_FullMethodName       = "/types.Query/RuneProviders"
	Query_MimirValues_FullMethodName         = "/types.Query/MimirValues"
	Query_MimirWithKey_FullMethodName        = "/types.Query/MimirWithKey"
	Query_MimirAdminValues_FullMethodName    = "/types.Query/MimirAdminValues"
	Query_MimirNodesAllValues_FullMethodName = "/types.Query/MimirNodesAllValues"
	Query_MimirNodesValues_FullMethodName    = "/types.Query/MimirNodesValues"
	Query_MimirNodeValues_FullMethodName     = "/types.Query/MimirNodeValues"
	Query_InboundAddresses_FullMethodName    = "/types.Query/InboundAddresses"
	Query_Version_FullMethodName             = "/types.Query/Version"
	Query_Thorname_FullMethodName            = "/types.Query/Thorname"
	Query_Invariant_FullMethodName           = "/types.Query/Invariant"
	Query_Invariants_FullMethodName          = "/types.Query/Invariants"
	Query_Network_FullMethodName             = "/types.Query/Network"
	Query_BalanceModule_FullMethodName       = "/types.Query/BalanceModule"
	Query_QuoteSwap_FullMethodName           = "/types.Query/QuoteSwap"
	Query_QuoteSaverDeposit_FullMethodName   = "/types.Query/QuoteSaverDeposit"
	Query_QuoteSaverWithdraw_FullMethodName  = "/types.Query/QuoteSaverWithdraw"
	Query_QuoteLoanOpen_FullMethodName       = "/types.Query/QuoteLoanOpen"
	Query_QuoteLoanClose_FullMethodName      = "/types.Query/QuoteLoanClose"
	Query_ConstantValues_FullMethodName      = "/types.Query/ConstantValues"
	Query_SwapQueue_FullMethodName           = "/types.Query/SwapQueue"
	Query_LastBlocks_FullMethodName          = "/types.Query/LastBlocks"
	Query_ChainsLastBlock_FullMethodName     = "/types.Query/ChainsLastBlock"
	Query_Vault_FullMethodName               = "/types.Query/Vault"
	Query_AsgardVaults_FullMethodName        = "/types.Query/AsgardVaults"
	Query_VaultsPubkeys_FullMethodName       = "/types.Query/VaultsPubkeys"
	Query_TxStages_FullMethodName            = "/types.Query/TxStages"
	Query_TxStatus_FullMethodName            = "/types.Query/TxStatus"
	Query_Tx_FullMethodName                  = "/types.Query/Tx"
	Query_TxVoters_FullMethodName            = "/types.Query/TxVoters"
	Query_TxVotersOld_FullMethodName         = "/types.Query/TxVotersOld"
	Query_Clout_FullMethodName               = "/types.Query/Clout"
	Query_Queue_FullMethodName               = "/types.Query/Queue"
	Query_ScheduledOutbound_FullMethodName   = "/types.Query/ScheduledOutbound"
	Query_PendingOutbound_FullMethodName     = "/types.Query/PendingOutbound"
	Query_Block_FullMethodName               = "/types.Query/Block"
	Query_TssKeygenMetric_FullMethodName     = "/types.Query/TssKeygenMetric"
	Query_TssMetric_FullMethodName           = "/types.Query/TssMetric"
	Query_Keysign_FullMethodName             = "/types.Query/Keysign"
	Query_KeysignPubkey_FullMethodName       = "/types.Query/KeysignPubkey"
	Query_Keygen_FullMethodName              = "/types.Query/Keygen"
	Query_UpgradeProposals_FullMethodName    = "/types.Query/UpgradeProposals"
	Query_UpgradeProposal_FullMethodName     = "/types.Query/UpgradeProposal"
	Query_UpgradeVotes_FullMethodName        = "/types.Query/UpgradeVotes"
	Query_TCYStaker_FullMethodName           = "/types.Query/TCYStaker"
	Query_TCYStakers_FullMethodName          = "/types.Query/TCYStakers"
	Query_TCYClaimer_FullMethodName          = "/types.Query/TCYClaimer"
	Query_TCYClaimers_FullMethodName         = "/types.Query/TCYClaimers"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Account returns account details for a given address.
	// As this path does not start with /thorchain/ , it requires an exception in CustomGRPCGatewayRouter
	// to not drop the height parameter.
	Account(ctx context.Context, in *QueryAccountRequest, opts ...grpc.CallOption) (*QueryAccountResponse, error)
	// Balances returns the bank module balances for a given address.
	// As this path does not start with /thorchain/ , it requires an exception in CustomGRPCGatewayRouter
	// to not drop the height parameter.
	Balances(ctx context.Context, in *QueryBalancesRequest, opts ...grpc.CallOption) (*QueryBalancesResponse, error)
	// Export returns the content of the export file (regression test only).
	Export(ctx context.Context, in *QueryExportRequest, opts ...grpc.CallOption) (*QueryExportResponse, error)
	// Returns the extended pool information for the provided asset.
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	// Pools returns all extended pools
	Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error)
	DerivedPool(ctx context.Context, in *QueryDerivedPoolRequest, opts ...grpc.CallOption) (*QueryDerivedPoolResponse, error)
	DerivedPools(ctx context.Context, in *QueryDerivedPoolsRequest, opts ...grpc.CallOption) (*QueryDerivedPoolsResponse, error)
	LiquidityProvider(ctx context.Context, in *QueryLiquidityProviderRequest, opts ...grpc.CallOption) (*QueryLiquidityProviderResponse, error)
	LiquidityProviders(ctx context.Context, in *QueryLiquidityProvidersRequest, opts ...grpc.CallOption) (*QueryLiquidityProvidersResponse, error)
	Saver(ctx context.Context, in *QuerySaverRequest, opts ...grpc.CallOption) (*QuerySaverResponse, error)
	Savers(ctx context.Context, in *QuerySaversRequest, opts ...grpc.CallOption) (*QuerySaversResponse, error)
	Borrower(ctx context.Context, in *QueryBorrowerRequest, opts ...grpc.CallOption) (*QueryBorrowerResponse, error)
	Borrowers(ctx context.Context, in *QueryBorrowersRequest, opts ...grpc.CallOption) (*QueryBorrowersResponse, error)
	TradeUnit(ctx context.Context, in *QueryTradeUnitRequest, opts ...grpc.CallOption) (*QueryTradeUnitResponse, error)
	TradeUnits(ctx context.Context, in *QueryTradeUnitsRequest, opts ...grpc.CallOption) (*QueryTradeUnitsResponse, error)
	TradeAccount(ctx context.Context, in *QueryTradeAccountRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error)
	TradeAccounts(ctx context.Context, in *QueryTradeAccountsRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error)
	SecuredAsset(ctx context.Context, in *QuerySecuredAssetRequest, opts ...grpc.CallOption) (*QuerySecuredAssetResponse, error)
	SecuredAssets(ctx context.Context, in *QuerySecuredAssetsRequest, opts ...grpc.CallOption) (*QuerySecuredAssetsResponse, error)
	Node(ctx context.Context, in *QueryNodeRequest, opts ...grpc.CallOption) (*QueryNodeResponse, error)
	Nodes(ctx context.Context, in *QueryNodesRequest, opts ...grpc.CallOption) (*QueryNodesResponse, error)
	PoolSlip(ctx context.Context, in *QueryPoolSlipRequest, opts ...grpc.CallOption) (*QueryPoolSlipsResponse, error)
	PoolSlips(ctx context.Context, in *QueryPoolSlipsRequest, opts ...grpc.CallOption) (*QueryPoolSlipsResponse, error)
	OutboundFee(ctx context.Context, in *QueryOutboundFeeRequest, opts ...grpc.CallOption) (*QueryOutboundFeesResponse, error)
	OutboundFees(ctx context.Context, in *QueryOutboundFeesRequest, opts ...grpc.CallOption) (*QueryOutboundFeesResponse, error)
	StreamingSwap(ctx context.Context, in *QueryStreamingSwapRequest, opts ...grpc.CallOption) (*QueryStreamingSwapResponse, error)
	StreamingSwaps(ctx context.Context, in *QueryStreamingSwapsRequest, opts ...grpc.CallOption) (*QueryStreamingSwapsResponse, error)
	Ban(ctx context.Context, in *QueryBanRequest, opts ...grpc.CallOption) (*BanVoter, error)
	Ragnarok(ctx context.Context, in *QueryRagnarokRequest, opts ...grpc.CallOption) (*QueryRagnarokResponse, error)
	RunePool(ctx context.Context, in *QueryRunePoolRequest, opts ...grpc.CallOption) (*QueryRunePoolResponse, error)
	RuneProvider(ctx context.Context, in *QueryRuneProviderRequest, opts ...grpc.CallOption) (*QueryRuneProviderResponse, error)
	RuneProviders(ctx context.Context, in *QueryRuneProvidersRequest, opts ...grpc.CallOption) (*QueryRuneProvidersResponse, error)
	MimirValues(ctx context.Context, in *QueryMimirValuesRequest, opts ...grpc.CallOption) (*QueryMimirValuesResponse, error)
	MimirWithKey(ctx context.Context, in *QueryMimirWithKeyRequest, opts ...grpc.CallOption) (*QueryMimirWithKeyResponse, error)
	MimirAdminValues(ctx context.Context, in *QueryMimirAdminValuesRequest, opts ...grpc.CallOption) (*QueryMimirAdminValuesResponse, error)
	MimirNodesAllValues(ctx context.Context, in *QueryMimirNodesAllValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodesAllValuesResponse, error)
	MimirNodesValues(ctx context.Context, in *QueryMimirNodesValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodesValuesResponse, error)
	MimirNodeValues(ctx context.Context, in *QueryMimirNodeValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodeValuesResponse, error)
	InboundAddresses(ctx context.Context, in *QueryInboundAddressesRequest, opts ...grpc.CallOption) (*QueryInboundAddressesResponse, error)
	Version(ctx context.Context, in *QueryVersionRequest, opts ...grpc.CallOption) (*QueryVersionResponse, error)
	Thorname(ctx context.Context, in *QueryThornameRequest, opts ...grpc.CallOption) (*QueryThornameResponse, error)
	Invariant(ctx context.Context, in *QueryInvariantRequest, opts ...grpc.CallOption) (*QueryInvariantResponse, error)
	Invariants(ctx context.Context, in *QueryInvariantsRequest, opts ...grpc.CallOption) (*QueryInvariantsResponse, error)
	Network(ctx context.Context, in *QueryNetworkRequest, opts ...grpc.CallOption) (*QueryNetworkResponse, error)
	BalanceModule(ctx context.Context, in *QueryBalanceModuleRequest, opts ...grpc.CallOption) (*QueryBalanceModuleResponse, error)
	QuoteSwap(ctx context.Context, in *QueryQuoteSwapRequest, opts ...grpc.CallOption) (*QueryQuoteSwapResponse, error)
	QuoteSaverDeposit(ctx context.Context, in *QueryQuoteSaverDepositRequest, opts ...grpc.CallOption) (*QueryQuoteSaverDepositResponse, error)
	QuoteSaverWithdraw(ctx context.Context, in *QueryQuoteSaverWithdrawRequest, opts ...grpc.CallOption) (*QueryQuoteSaverWithdrawResponse, error)
	QuoteLoanOpen(ctx context.Context, in *QueryQuoteLoanOpenRequest, opts ...grpc.CallOption) (*QueryQuoteLoanOpenResponse, error)
	QuoteLoanClose(ctx context.Context, in *QueryQuoteLoanCloseRequest, opts ...grpc.CallOption) (*QueryQuoteLoanCloseResponse, error)
	ConstantValues(ctx context.Context, in *QueryConstantValuesRequest, opts ...grpc.CallOption) (*QueryConstantValuesResponse, error)
	SwapQueue(ctx context.Context, in *QuerySwapQueueRequest, opts ...grpc.CallOption) (*QuerySwapQueueResponse, error)
	LastBlocks(ctx context.Context, in *QueryLastBlocksRequest, opts ...grpc.CallOption) (*QueryLastBlocksResponse, error)
	ChainsLastBlock(ctx context.Context, in *QueryChainsLastBlockRequest, opts ...grpc.CallOption) (*QueryLastBlocksResponse, error)
	Vault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error)
	AsgardVaults(ctx context.Context, in *QueryAsgardVaultsRequest, opts ...grpc.CallOption) (*QueryAsgardVaultsResponse, error)
	VaultsPubkeys(ctx context.Context, in *QueryVaultsPubkeysRequest, opts ...grpc.CallOption) (*QueryVaultsPubkeysResponse, error)
	TxStages(ctx context.Context, in *QueryTxStagesRequest, opts ...grpc.CallOption) (*QueryTxStagesResponse, error)
	TxStatus(ctx context.Context, in *QueryTxStatusRequest, opts ...grpc.CallOption) (*QueryTxStatusResponse, error)
	Tx(ctx context.Context, in *QueryTxRequest, opts ...grpc.CallOption) (*QueryTxResponse, error)
	TxVoters(ctx context.Context, in *QueryTxVotersRequest, opts ...grpc.CallOption) (*QueryObservedTxVoter, error)
	TxVotersOld(ctx context.Context, in *QueryTxVotersRequest, opts ...grpc.CallOption) (*QueryObservedTxVoter, error)
	Clout(ctx context.Context, in *QuerySwapperCloutRequest, opts ...grpc.CallOption) (*SwapperClout, error)
	Queue(ctx context.Context, in *QueryQueueRequest, opts ...grpc.CallOption) (*QueryQueueResponse, error)
	ScheduledOutbound(ctx context.Context, in *QueryScheduledOutboundRequest, opts ...grpc.CallOption) (*QueryOutboundResponse, error)
	PendingOutbound(ctx context.Context, in *QueryPendingOutboundRequest, opts ...grpc.CallOption) (*QueryOutboundResponse, error)
	Block(ctx context.Context, in *QueryBlockRequest, opts ...grpc.CallOption) (*QueryBlockResponse, error)
	TssKeygenMetric(ctx context.Context, in *QueryTssKeygenMetricRequest, opts ...grpc.CallOption) (*QueryTssKeygenMetricResponse, error)
	TssMetric(ctx context.Context, in *QueryTssMetricRequest, opts ...grpc.CallOption) (*QueryTssMetricResponse, error)
	Keysign(ctx context.Context, in *QueryKeysignRequest, opts ...grpc.CallOption) (*QueryKeysignResponse, error)
	KeysignPubkey(ctx context.Context, in *QueryKeysignPubkeyRequest, opts ...grpc.CallOption) (*QueryKeysignResponse, error)
	Keygen(ctx context.Context, in *QueryKeygenRequest, opts ...grpc.CallOption) (*QueryKeygenResponse, error)
	UpgradeProposals(ctx context.Context, in *QueryUpgradeProposalsRequest, opts ...grpc.CallOption) (*QueryUpgradeProposalsResponse, error)
	UpgradeProposal(ctx context.Context, in *QueryUpgradeProposalRequest, opts ...grpc.CallOption) (*QueryUpgradeProposalResponse, error)
	UpgradeVotes(ctx context.Context, in *QueryUpgradeVotesRequest, opts ...grpc.CallOption) (*QueryUpgradeVotesResponse, error)
	TCYStaker(ctx context.Context, in *QueryTCYStakerRequest, opts ...grpc.CallOption) (*QueryTCYStakerResponse, error)
	TCYStakers(ctx context.Context, in *QueryTCYStakersRequest, opts ...grpc.CallOption) (*QueryTCYStakersResponse, error)
	TCYClaimer(ctx context.Context, in *QueryTCYClaimerRequest, opts ...grpc.CallOption) (*QueryTCYClaimerResponse, error)
	TCYClaimers(ctx context.Context, in *QueryTCYClaimersRequest, opts ...grpc.CallOption) (*QueryTCYClaimersResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Account(ctx context.Context, in *QueryAccountRequest, opts ...grpc.CallOption) (*QueryAccountResponse, error) {
	out := new(QueryAccountResponse)
	err := c.cc.Invoke(ctx, Query_Account_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Balances(ctx context.Context, in *QueryBalancesRequest, opts ...grpc.CallOption) (*QueryBalancesResponse, error) {
	out := new(QueryBalancesResponse)
	err := c.cc.Invoke(ctx, Query_Balances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Export(ctx context.Context, in *QueryExportRequest, opts ...grpc.CallOption) (*QueryExportResponse, error) {
	out := new(QueryExportResponse)
	err := c.cc.Invoke(ctx, Query_Export_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, Query_Pool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pools(ctx context.Context, in *QueryPoolsRequest, opts ...grpc.CallOption) (*QueryPoolsResponse, error) {
	out := new(QueryPoolsResponse)
	err := c.cc.Invoke(ctx, Query_Pools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivedPool(ctx context.Context, in *QueryDerivedPoolRequest, opts ...grpc.CallOption) (*QueryDerivedPoolResponse, error) {
	out := new(QueryDerivedPoolResponse)
	err := c.cc.Invoke(ctx, Query_DerivedPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivedPools(ctx context.Context, in *QueryDerivedPoolsRequest, opts ...grpc.CallOption) (*QueryDerivedPoolsResponse, error) {
	out := new(QueryDerivedPoolsResponse)
	err := c.cc.Invoke(ctx, Query_DerivedPools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityProvider(ctx context.Context, in *QueryLiquidityProviderRequest, opts ...grpc.CallOption) (*QueryLiquidityProviderResponse, error) {
	out := new(QueryLiquidityProviderResponse)
	err := c.cc.Invoke(ctx, Query_LiquidityProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityProviders(ctx context.Context, in *QueryLiquidityProvidersRequest, opts ...grpc.CallOption) (*QueryLiquidityProvidersResponse, error) {
	out := new(QueryLiquidityProvidersResponse)
	err := c.cc.Invoke(ctx, Query_LiquidityProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Saver(ctx context.Context, in *QuerySaverRequest, opts ...grpc.CallOption) (*QuerySaverResponse, error) {
	out := new(QuerySaverResponse)
	err := c.cc.Invoke(ctx, Query_Saver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Savers(ctx context.Context, in *QuerySaversRequest, opts ...grpc.CallOption) (*QuerySaversResponse, error) {
	out := new(QuerySaversResponse)
	err := c.cc.Invoke(ctx, Query_Savers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Borrower(ctx context.Context, in *QueryBorrowerRequest, opts ...grpc.CallOption) (*QueryBorrowerResponse, error) {
	out := new(QueryBorrowerResponse)
	err := c.cc.Invoke(ctx, Query_Borrower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Borrowers(ctx context.Context, in *QueryBorrowersRequest, opts ...grpc.CallOption) (*QueryBorrowersResponse, error) {
	out := new(QueryBorrowersResponse)
	err := c.cc.Invoke(ctx, Query_Borrowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeUnit(ctx context.Context, in *QueryTradeUnitRequest, opts ...grpc.CallOption) (*QueryTradeUnitResponse, error) {
	out := new(QueryTradeUnitResponse)
	err := c.cc.Invoke(ctx, Query_TradeUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeUnits(ctx context.Context, in *QueryTradeUnitsRequest, opts ...grpc.CallOption) (*QueryTradeUnitsResponse, error) {
	out := new(QueryTradeUnitsResponse)
	err := c.cc.Invoke(ctx, Query_TradeUnits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeAccount(ctx context.Context, in *QueryTradeAccountRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error) {
	out := new(QueryTradeAccountsResponse)
	err := c.cc.Invoke(ctx, Query_TradeAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeAccounts(ctx context.Context, in *QueryTradeAccountsRequest, opts ...grpc.CallOption) (*QueryTradeAccountsResponse, error) {
	out := new(QueryTradeAccountsResponse)
	err := c.cc.Invoke(ctx, Query_TradeAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SecuredAsset(ctx context.Context, in *QuerySecuredAssetRequest, opts ...grpc.CallOption) (*QuerySecuredAssetResponse, error) {
	out := new(QuerySecuredAssetResponse)
	err := c.cc.Invoke(ctx, Query_SecuredAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SecuredAssets(ctx context.Context, in *QuerySecuredAssetsRequest, opts ...grpc.CallOption) (*QuerySecuredAssetsResponse, error) {
	out := new(QuerySecuredAssetsResponse)
	err := c.cc.Invoke(ctx, Query_SecuredAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Node(ctx context.Context, in *QueryNodeRequest, opts ...grpc.CallOption) (*QueryNodeResponse, error) {
	out := new(QueryNodeResponse)
	err := c.cc.Invoke(ctx, Query_Node_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Nodes(ctx context.Context, in *QueryNodesRequest, opts ...grpc.CallOption) (*QueryNodesResponse, error) {
	out := new(QueryNodesResponse)
	err := c.cc.Invoke(ctx, Query_Nodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolSlip(ctx context.Context, in *QueryPoolSlipRequest, opts ...grpc.CallOption) (*QueryPoolSlipsResponse, error) {
	out := new(QueryPoolSlipsResponse)
	err := c.cc.Invoke(ctx, Query_PoolSlip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolSlips(ctx context.Context, in *QueryPoolSlipsRequest, opts ...grpc.CallOption) (*QueryPoolSlipsResponse, error) {
	out := new(QueryPoolSlipsResponse)
	err := c.cc.Invoke(ctx, Query_PoolSlips_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutboundFee(ctx context.Context, in *QueryOutboundFeeRequest, opts ...grpc.CallOption) (*QueryOutboundFeesResponse, error) {
	out := new(QueryOutboundFeesResponse)
	err := c.cc.Invoke(ctx, Query_OutboundFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutboundFees(ctx context.Context, in *QueryOutboundFeesRequest, opts ...grpc.CallOption) (*QueryOutboundFeesResponse, error) {
	out := new(QueryOutboundFeesResponse)
	err := c.cc.Invoke(ctx, Query_OutboundFees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamingSwap(ctx context.Context, in *QueryStreamingSwapRequest, opts ...grpc.CallOption) (*QueryStreamingSwapResponse, error) {
	out := new(QueryStreamingSwapResponse)
	err := c.cc.Invoke(ctx, Query_StreamingSwap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamingSwaps(ctx context.Context, in *QueryStreamingSwapsRequest, opts ...grpc.CallOption) (*QueryStreamingSwapsResponse, error) {
	out := new(QueryStreamingSwapsResponse)
	err := c.cc.Invoke(ctx, Query_StreamingSwaps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ban(ctx context.Context, in *QueryBanRequest, opts ...grpc.CallOption) (*BanVoter, error) {
	out := new(BanVoter)
	err := c.cc.Invoke(ctx, Query_Ban_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Ragnarok(ctx context.Context, in *QueryRagnarokRequest, opts ...grpc.CallOption) (*QueryRagnarokResponse, error) {
	out := new(QueryRagnarokResponse)
	err := c.cc.Invoke(ctx, Query_Ragnarok_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RunePool(ctx context.Context, in *QueryRunePoolRequest, opts ...grpc.CallOption) (*QueryRunePoolResponse, error) {
	out := new(QueryRunePoolResponse)
	err := c.cc.Invoke(ctx, Query_RunePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RuneProvider(ctx context.Context, in *QueryRuneProviderRequest, opts ...grpc.CallOption) (*QueryRuneProviderResponse, error) {
	out := new(QueryRuneProviderResponse)
	err := c.cc.Invoke(ctx, Query_RuneProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RuneProviders(ctx context.Context, in *QueryRuneProvidersRequest, opts ...grpc.CallOption) (*QueryRuneProvidersResponse, error) {
	out := new(QueryRuneProvidersResponse)
	err := c.cc.Invoke(ctx, Query_RuneProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirValues(ctx context.Context, in *QueryMimirValuesRequest, opts ...grpc.CallOption) (*QueryMimirValuesResponse, error) {
	out := new(QueryMimirValuesResponse)
	err := c.cc.Invoke(ctx, Query_MimirValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirWithKey(ctx context.Context, in *QueryMimirWithKeyRequest, opts ...grpc.CallOption) (*QueryMimirWithKeyResponse, error) {
	out := new(QueryMimirWithKeyResponse)
	err := c.cc.Invoke(ctx, Query_MimirWithKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirAdminValues(ctx context.Context, in *QueryMimirAdminValuesRequest, opts ...grpc.CallOption) (*QueryMimirAdminValuesResponse, error) {
	out := new(QueryMimirAdminValuesResponse)
	err := c.cc.Invoke(ctx, Query_MimirAdminValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirNodesAllValues(ctx context.Context, in *QueryMimirNodesAllValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodesAllValuesResponse, error) {
	out := new(QueryMimirNodesAllValuesResponse)
	err := c.cc.Invoke(ctx, Query_MimirNodesAllValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirNodesValues(ctx context.Context, in *QueryMimirNodesValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodesValuesResponse, error) {
	out := new(QueryMimirNodesValuesResponse)
	err := c.cc.Invoke(ctx, Query_MimirNodesValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MimirNodeValues(ctx context.Context, in *QueryMimirNodeValuesRequest, opts ...grpc.CallOption) (*QueryMimirNodeValuesResponse, error) {
	out := new(QueryMimirNodeValuesResponse)
	err := c.cc.Invoke(ctx, Query_MimirNodeValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InboundAddresses(ctx context.Context, in *QueryInboundAddressesRequest, opts ...grpc.CallOption) (*QueryInboundAddressesResponse, error) {
	out := new(QueryInboundAddressesResponse)
	err := c.cc.Invoke(ctx, Query_InboundAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Version(ctx context.Context, in *QueryVersionRequest, opts ...grpc.CallOption) (*QueryVersionResponse, error) {
	out := new(QueryVersionResponse)
	err := c.cc.Invoke(ctx, Query_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Thorname(ctx context.Context, in *QueryThornameRequest, opts ...grpc.CallOption) (*QueryThornameResponse, error) {
	out := new(QueryThornameResponse)
	err := c.cc.Invoke(ctx, Query_Thorname_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Invariant(ctx context.Context, in *QueryInvariantRequest, opts ...grpc.CallOption) (*QueryInvariantResponse, error) {
	out := new(QueryInvariantResponse)
	err := c.cc.Invoke(ctx, Query_Invariant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Invariants(ctx context.Context, in *QueryInvariantsRequest, opts ...grpc.CallOption) (*QueryInvariantsResponse, error) {
	out := new(QueryInvariantsResponse)
	err := c.cc.Invoke(ctx, Query_Invariants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Network(ctx context.Context, in *QueryNetworkRequest, opts ...grpc.CallOption) (*QueryNetworkResponse, error) {
	out := new(QueryNetworkResponse)
	err := c.cc.Invoke(ctx, Query_Network_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceModule(ctx context.Context, in *QueryBalanceModuleRequest, opts ...grpc.CallOption) (*QueryBalanceModuleResponse, error) {
	out := new(QueryBalanceModuleResponse)
	err := c.cc.Invoke(ctx, Query_BalanceModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteSwap(ctx context.Context, in *QueryQuoteSwapRequest, opts ...grpc.CallOption) (*QueryQuoteSwapResponse, error) {
	out := new(QueryQuoteSwapResponse)
	err := c.cc.Invoke(ctx, Query_QuoteSwap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteSaverDeposit(ctx context.Context, in *QueryQuoteSaverDepositRequest, opts ...grpc.CallOption) (*QueryQuoteSaverDepositResponse, error) {
	out := new(QueryQuoteSaverDepositResponse)
	err := c.cc.Invoke(ctx, Query_QuoteSaverDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteSaverWithdraw(ctx context.Context, in *QueryQuoteSaverWithdrawRequest, opts ...grpc.CallOption) (*QueryQuoteSaverWithdrawResponse, error) {
	out := new(QueryQuoteSaverWithdrawResponse)
	err := c.cc.Invoke(ctx, Query_QuoteSaverWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteLoanOpen(ctx context.Context, in *QueryQuoteLoanOpenRequest, opts ...grpc.CallOption) (*QueryQuoteLoanOpenResponse, error) {
	out := new(QueryQuoteLoanOpenResponse)
	err := c.cc.Invoke(ctx, Query_QuoteLoanOpen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteLoanClose(ctx context.Context, in *QueryQuoteLoanCloseRequest, opts ...grpc.CallOption) (*QueryQuoteLoanCloseResponse, error) {
	out := new(QueryQuoteLoanCloseResponse)
	err := c.cc.Invoke(ctx, Query_QuoteLoanClose_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConstantValues(ctx context.Context, in *QueryConstantValuesRequest, opts ...grpc.CallOption) (*QueryConstantValuesResponse, error) {
	out := new(QueryConstantValuesResponse)
	err := c.cc.Invoke(ctx, Query_ConstantValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SwapQueue(ctx context.Context, in *QuerySwapQueueRequest, opts ...grpc.CallOption) (*QuerySwapQueueResponse, error) {
	out := new(QuerySwapQueueResponse)
	err := c.cc.Invoke(ctx, Query_SwapQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBlocks(ctx context.Context, in *QueryLastBlocksRequest, opts ...grpc.CallOption) (*QueryLastBlocksResponse, error) {
	out := new(QueryLastBlocksResponse)
	err := c.cc.Invoke(ctx, Query_LastBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainsLastBlock(ctx context.Context, in *QueryChainsLastBlockRequest, opts ...grpc.CallOption) (*QueryLastBlocksResponse, error) {
	out := new(QueryLastBlocksResponse)
	err := c.cc.Invoke(ctx, Query_ChainsLastBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error) {
	out := new(QueryVaultResponse)
	err := c.cc.Invoke(ctx, Query_Vault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AsgardVaults(ctx context.Context, in *QueryAsgardVaultsRequest, opts ...grpc.CallOption) (*QueryAsgardVaultsResponse, error) {
	out := new(QueryAsgardVaultsResponse)
	err := c.cc.Invoke(ctx, Query_AsgardVaults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VaultsPubkeys(ctx context.Context, in *QueryVaultsPubkeysRequest, opts ...grpc.CallOption) (*QueryVaultsPubkeysResponse, error) {
	out := new(QueryVaultsPubkeysResponse)
	err := c.cc.Invoke(ctx, Query_VaultsPubkeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxStages(ctx context.Context, in *QueryTxStagesRequest, opts ...grpc.CallOption) (*QueryTxStagesResponse, error) {
	out := new(QueryTxStagesResponse)
	err := c.cc.Invoke(ctx, Query_TxStages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxStatus(ctx context.Context, in *QueryTxStatusRequest, opts ...grpc.CallOption) (*QueryTxStatusResponse, error) {
	out := new(QueryTxStatusResponse)
	err := c.cc.Invoke(ctx, Query_TxStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Tx(ctx context.Context, in *QueryTxRequest, opts ...grpc.CallOption) (*QueryTxResponse, error) {
	out := new(QueryTxResponse)
	err := c.cc.Invoke(ctx, Query_Tx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxVoters(ctx context.Context, in *QueryTxVotersRequest, opts ...grpc.CallOption) (*QueryObservedTxVoter, error) {
	out := new(QueryObservedTxVoter)
	err := c.cc.Invoke(ctx, Query_TxVoters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxVotersOld(ctx context.Context, in *QueryTxVotersRequest, opts ...grpc.CallOption) (*QueryObservedTxVoter, error) {
	out := new(QueryObservedTxVoter)
	err := c.cc.Invoke(ctx, Query_TxVotersOld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Clout(ctx context.Context, in *QuerySwapperCloutRequest, opts ...grpc.CallOption) (*SwapperClout, error) {
	out := new(SwapperClout)
	err := c.cc.Invoke(ctx, Query_Clout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Queue(ctx context.Context, in *QueryQueueRequest, opts ...grpc.CallOption) (*QueryQueueResponse, error) {
	out := new(QueryQueueResponse)
	err := c.cc.Invoke(ctx, Query_Queue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ScheduledOutbound(ctx context.Context, in *QueryScheduledOutboundRequest, opts ...grpc.CallOption) (*QueryOutboundResponse, error) {
	out := new(QueryOutboundResponse)
	err := c.cc.Invoke(ctx, Query_ScheduledOutbound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingOutbound(ctx context.Context, in *QueryPendingOutboundRequest, opts ...grpc.CallOption) (*QueryOutboundResponse, error) {
	out := new(QueryOutboundResponse)
	err := c.cc.Invoke(ctx, Query_PendingOutbound_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Block(ctx context.Context, in *QueryBlockRequest, opts ...grpc.CallOption) (*QueryBlockResponse, error) {
	out := new(QueryBlockResponse)
	err := c.cc.Invoke(ctx, Query_Block_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TssKeygenMetric(ctx context.Context, in *QueryTssKeygenMetricRequest, opts ...grpc.CallOption) (*QueryTssKeygenMetricResponse, error) {
	out := new(QueryTssKeygenMetricResponse)
	err := c.cc.Invoke(ctx, Query_TssKeygenMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TssMetric(ctx context.Context, in *QueryTssMetricRequest, opts ...grpc.CallOption) (*QueryTssMetricResponse, error) {
	out := new(QueryTssMetricResponse)
	err := c.cc.Invoke(ctx, Query_TssMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keysign(ctx context.Context, in *QueryKeysignRequest, opts ...grpc.CallOption) (*QueryKeysignResponse, error) {
	out := new(QueryKeysignResponse)
	err := c.cc.Invoke(ctx, Query_Keysign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeysignPubkey(ctx context.Context, in *QueryKeysignPubkeyRequest, opts ...grpc.CallOption) (*QueryKeysignResponse, error) {
	out := new(QueryKeysignResponse)
	err := c.cc.Invoke(ctx, Query_KeysignPubkey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keygen(ctx context.Context, in *QueryKeygenRequest, opts ...grpc.CallOption) (*QueryKeygenResponse, error) {
	out := new(QueryKeygenResponse)
	err := c.cc.Invoke(ctx, Query_Keygen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UpgradeProposals(ctx context.Context, in *QueryUpgradeProposalsRequest, opts ...grpc.CallOption) (*QueryUpgradeProposalsResponse, error) {
	out := new(QueryUpgradeProposalsResponse)
	err := c.cc.Invoke(ctx, Query_UpgradeProposals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UpgradeProposal(ctx context.Context, in *QueryUpgradeProposalRequest, opts ...grpc.CallOption) (*QueryUpgradeProposalResponse, error) {
	out := new(QueryUpgradeProposalResponse)
	err := c.cc.Invoke(ctx, Query_UpgradeProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UpgradeVotes(ctx context.Context, in *QueryUpgradeVotesRequest, opts ...grpc.CallOption) (*QueryUpgradeVotesResponse, error) {
	out := new(QueryUpgradeVotesResponse)
	err := c.cc.Invoke(ctx, Query_UpgradeVotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TCYStaker(ctx context.Context, in *QueryTCYStakerRequest, opts ...grpc.CallOption) (*QueryTCYStakerResponse, error) {
	out := new(QueryTCYStakerResponse)
	err := c.cc.Invoke(ctx, Query_TCYStaker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TCYStakers(ctx context.Context, in *QueryTCYStakersRequest, opts ...grpc.CallOption) (*QueryTCYStakersResponse, error) {
	out := new(QueryTCYStakersResponse)
	err := c.cc.Invoke(ctx, Query_TCYStakers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TCYClaimer(ctx context.Context, in *QueryTCYClaimerRequest, opts ...grpc.CallOption) (*QueryTCYClaimerResponse, error) {
	out := new(QueryTCYClaimerResponse)
	err := c.cc.Invoke(ctx, Query_TCYClaimer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TCYClaimers(ctx context.Context, in *QueryTCYClaimersRequest, opts ...grpc.CallOption) (*QueryTCYClaimersResponse, error) {
	out := new(QueryTCYClaimersResponse)
	err := c.cc.Invoke(ctx, Query_TCYClaimers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Account returns account details for a given address.
	// As this path does not start with /thorchain/ , it requires an exception in CustomGRPCGatewayRouter
	// to not drop the height parameter.
	Account(context.Context, *QueryAccountRequest) (*QueryAccountResponse, error)
	// Balances returns the bank module balances for a given address.
	// As this path does not start with /thorchain/ , it requires an exception in CustomGRPCGatewayRouter
	// to not drop the height parameter.
	Balances(context.Context, *QueryBalancesRequest) (*QueryBalancesResponse, error)
	// Export returns the content of the export file (regression test only).
	Export(context.Context, *QueryExportRequest) (*QueryExportResponse, error)
	// Returns the extended pool information for the provided asset.
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	// Pools returns all extended pools
	Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error)
	DerivedPool(context.Context, *QueryDerivedPoolRequest) (*QueryDerivedPoolResponse, error)
	DerivedPools(context.Context, *QueryDerivedPoolsRequest) (*QueryDerivedPoolsResponse, error)
	LiquidityProvider(context.Context, *QueryLiquidityProviderRequest) (*QueryLiquidityProviderResponse, error)
	LiquidityProviders(context.Context, *QueryLiquidityProvidersRequest) (*QueryLiquidityProvidersResponse, error)
	Saver(context.Context, *QuerySaverRequest) (*QuerySaverResponse, error)
	Savers(context.Context, *QuerySaversRequest) (*QuerySaversResponse, error)
	Borrower(context.Context, *QueryBorrowerRequest) (*QueryBorrowerResponse, error)
	Borrowers(context.Context, *QueryBorrowersRequest) (*QueryBorrowersResponse, error)
	TradeUnit(context.Context, *QueryTradeUnitRequest) (*QueryTradeUnitResponse, error)
	TradeUnits(context.Context, *QueryTradeUnitsRequest) (*QueryTradeUnitsResponse, error)
	TradeAccount(context.Context, *QueryTradeAccountRequest) (*QueryTradeAccountsResponse, error)
	TradeAccounts(context.Context, *QueryTradeAccountsRequest) (*QueryTradeAccountsResponse, error)
	SecuredAsset(context.Context, *QuerySecuredAssetRequest) (*QuerySecuredAssetResponse, error)
	SecuredAssets(context.Context, *QuerySecuredAssetsRequest) (*QuerySecuredAssetsResponse, error)
	Node(context.Context, *QueryNodeRequest) (*QueryNodeResponse, error)
	Nodes(context.Context, *QueryNodesRequest) (*QueryNodesResponse, error)
	PoolSlip(context.Context, *QueryPoolSlipRequest) (*QueryPoolSlipsResponse, error)
	PoolSlips(context.Context, *QueryPoolSlipsRequest) (*QueryPoolSlipsResponse, error)
	OutboundFee(context.Context, *QueryOutboundFeeRequest) (*QueryOutboundFeesResponse, error)
	OutboundFees(context.Context, *QueryOutboundFeesRequest) (*QueryOutboundFeesResponse, error)
	StreamingSwap(context.Context, *QueryStreamingSwapRequest) (*QueryStreamingSwapResponse, error)
	StreamingSwaps(context.Context, *QueryStreamingSwapsRequest) (*QueryStreamingSwapsResponse, error)
	Ban(context.Context, *QueryBanRequest) (*BanVoter, error)
	Ragnarok(context.Context, *QueryRagnarokRequest) (*QueryRagnarokResponse, error)
	RunePool(context.Context, *QueryRunePoolRequest) (*QueryRunePoolResponse, error)
	RuneProvider(context.Context, *QueryRuneProviderRequest) (*QueryRuneProviderResponse, error)
	RuneProviders(context.Context, *QueryRuneProvidersRequest) (*QueryRuneProvidersResponse, error)
	MimirValues(context.Context, *QueryMimirValuesRequest) (*QueryMimirValuesResponse, error)
	MimirWithKey(context.Context, *QueryMimirWithKeyRequest) (*QueryMimirWithKeyResponse, error)
	MimirAdminValues(context.Context, *QueryMimirAdminValuesRequest) (*QueryMimirAdminValuesResponse, error)
	MimirNodesAllValues(context.Context, *QueryMimirNodesAllValuesRequest) (*QueryMimirNodesAllValuesResponse, error)
	MimirNodesValues(context.Context, *QueryMimirNodesValuesRequest) (*QueryMimirNodesValuesResponse, error)
	MimirNodeValues(context.Context, *QueryMimirNodeValuesRequest) (*QueryMimirNodeValuesResponse, error)
	InboundAddresses(context.Context, *QueryInboundAddressesRequest) (*QueryInboundAddressesResponse, error)
	Version(context.Context, *QueryVersionRequest) (*QueryVersionResponse, error)
	Thorname(context.Context, *QueryThornameRequest) (*QueryThornameResponse, error)
	Invariant(context.Context, *QueryInvariantRequest) (*QueryInvariantResponse, error)
	Invariants(context.Context, *QueryInvariantsRequest) (*QueryInvariantsResponse, error)
	Network(context.Context, *QueryNetworkRequest) (*QueryNetworkResponse, error)
	BalanceModule(context.Context, *QueryBalanceModuleRequest) (*QueryBalanceModuleResponse, error)
	QuoteSwap(context.Context, *QueryQuoteSwapRequest) (*QueryQuoteSwapResponse, error)
	QuoteSaverDeposit(context.Context, *QueryQuoteSaverDepositRequest) (*QueryQuoteSaverDepositResponse, error)
	QuoteSaverWithdraw(context.Context, *QueryQuoteSaverWithdrawRequest) (*QueryQuoteSaverWithdrawResponse, error)
	QuoteLoanOpen(context.Context, *QueryQuoteLoanOpenRequest) (*QueryQuoteLoanOpenResponse, error)
	QuoteLoanClose(context.Context, *QueryQuoteLoanCloseRequest) (*QueryQuoteLoanCloseResponse, error)
	ConstantValues(context.Context, *QueryConstantValuesRequest) (*QueryConstantValuesResponse, error)
	SwapQueue(context.Context, *QuerySwapQueueRequest) (*QuerySwapQueueResponse, error)
	LastBlocks(context.Context, *QueryLastBlocksRequest) (*QueryLastBlocksResponse, error)
	ChainsLastBlock(context.Context, *QueryChainsLastBlockRequest) (*QueryLastBlocksResponse, error)
	Vault(context.Context, *QueryVaultRequest) (*QueryVaultResponse, error)
	AsgardVaults(context.Context, *QueryAsgardVaultsRequest) (*QueryAsgardVaultsResponse, error)
	VaultsPubkeys(context.Context, *QueryVaultsPubkeysRequest) (*QueryVaultsPubkeysResponse, error)
	TxStages(context.Context, *QueryTxStagesRequest) (*QueryTxStagesResponse, error)
	TxStatus(context.Context, *QueryTxStatusRequest) (*QueryTxStatusResponse, error)
	Tx(context.Context, *QueryTxRequest) (*QueryTxResponse, error)
	TxVoters(context.Context, *QueryTxVotersRequest) (*QueryObservedTxVoter, error)
	TxVotersOld(context.Context, *QueryTxVotersRequest) (*QueryObservedTxVoter, error)
	Clout(context.Context, *QuerySwapperCloutRequest) (*SwapperClout, error)
	Queue(context.Context, *QueryQueueRequest) (*QueryQueueResponse, error)
	ScheduledOutbound(context.Context, *QueryScheduledOutboundRequest) (*QueryOutboundResponse, error)
	PendingOutbound(context.Context, *QueryPendingOutboundRequest) (*QueryOutboundResponse, error)
	Block(context.Context, *QueryBlockRequest) (*QueryBlockResponse, error)
	TssKeygenMetric(context.Context, *QueryTssKeygenMetricRequest) (*QueryTssKeygenMetricResponse, error)
	TssMetric(context.Context, *QueryTssMetricRequest) (*QueryTssMetricResponse, error)
	Keysign(context.Context, *QueryKeysignRequest) (*QueryKeysignResponse, error)
	KeysignPubkey(context.Context, *QueryKeysignPubkeyRequest) (*QueryKeysignResponse, error)
	Keygen(context.Context, *QueryKeygenRequest) (*QueryKeygenResponse, error)
	UpgradeProposals(context.Context, *QueryUpgradeProposalsRequest) (*QueryUpgradeProposalsResponse, error)
	UpgradeProposal(context.Context, *QueryUpgradeProposalRequest) (*QueryUpgradeProposalResponse, error)
	UpgradeVotes(context.Context, *QueryUpgradeVotesRequest) (*QueryUpgradeVotesResponse, error)
	TCYStaker(context.Context, *QueryTCYStakerRequest) (*QueryTCYStakerResponse, error)
	TCYStakers(context.Context, *QueryTCYStakersRequest) (*QueryTCYStakersResponse, error)
	TCYClaimer(context.Context, *QueryTCYClaimerRequest) (*QueryTCYClaimerResponse, error)
	TCYClaimers(context.Context, *QueryTCYClaimersRequest) (*QueryTCYClaimersResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Account(context.Context, *QueryAccountRequest) (*QueryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (UnimplementedQueryServer) Balances(context.Context, *QueryBalancesRequest) (*QueryBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balances not implemented")
}
func (UnimplementedQueryServer) Export(context.Context, *QueryExportRequest) (*QueryExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedQueryServer) Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (UnimplementedQueryServer) Pools(context.Context, *QueryPoolsRequest) (*QueryPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (UnimplementedQueryServer) DerivedPool(context.Context, *QueryDerivedPoolRequest) (*QueryDerivedPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivedPool not implemented")
}
func (UnimplementedQueryServer) DerivedPools(context.Context, *QueryDerivedPoolsRequest) (*QueryDerivedPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivedPools not implemented")
}
func (UnimplementedQueryServer) LiquidityProvider(context.Context, *QueryLiquidityProviderRequest) (*QueryLiquidityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProvider not implemented")
}
func (UnimplementedQueryServer) LiquidityProviders(context.Context, *QueryLiquidityProvidersRequest) (*QueryLiquidityProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityProviders not implemented")
}
func (UnimplementedQueryServer) Saver(context.Context, *QuerySaverRequest) (*QuerySaverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Saver not implemented")
}
func (UnimplementedQueryServer) Savers(context.Context, *QuerySaversRequest) (*QuerySaversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Savers not implemented")
}
func (UnimplementedQueryServer) Borrower(context.Context, *QueryBorrowerRequest) (*QueryBorrowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Borrower not implemented")
}
func (UnimplementedQueryServer) Borrowers(context.Context, *QueryBorrowersRequest) (*QueryBorrowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Borrowers not implemented")
}
func (UnimplementedQueryServer) TradeUnit(context.Context, *QueryTradeUnitRequest) (*QueryTradeUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeUnit not implemented")
}
func (UnimplementedQueryServer) TradeUnits(context.Context, *QueryTradeUnitsRequest) (*QueryTradeUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeUnits not implemented")
}
func (UnimplementedQueryServer) TradeAccount(context.Context, *QueryTradeAccountRequest) (*QueryTradeAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeAccount not implemented")
}
func (UnimplementedQueryServer) TradeAccounts(context.Context, *QueryTradeAccountsRequest) (*QueryTradeAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeAccounts not implemented")
}
func (UnimplementedQueryServer) SecuredAsset(context.Context, *QuerySecuredAssetRequest) (*QuerySecuredAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecuredAsset not implemented")
}
func (UnimplementedQueryServer) SecuredAssets(context.Context, *QuerySecuredAssetsRequest) (*QuerySecuredAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecuredAssets not implemented")
}
func (UnimplementedQueryServer) Node(context.Context, *QueryNodeRequest) (*QueryNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node not implemented")
}
func (UnimplementedQueryServer) Nodes(context.Context, *QueryNodesRequest) (*QueryNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nodes not implemented")
}
func (UnimplementedQueryServer) PoolSlip(context.Context, *QueryPoolSlipRequest) (*QueryPoolSlipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolSlip not implemented")
}
func (UnimplementedQueryServer) PoolSlips(context.Context, *QueryPoolSlipsRequest) (*QueryPoolSlipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolSlips not implemented")
}
func (UnimplementedQueryServer) OutboundFee(context.Context, *QueryOutboundFeeRequest) (*QueryOutboundFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundFee not implemented")
}
func (UnimplementedQueryServer) OutboundFees(context.Context, *QueryOutboundFeesRequest) (*QueryOutboundFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundFees not implemented")
}
func (UnimplementedQueryServer) StreamingSwap(context.Context, *QueryStreamingSwapRequest) (*QueryStreamingSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamingSwap not implemented")
}
func (UnimplementedQueryServer) StreamingSwaps(context.Context, *QueryStreamingSwapsRequest) (*QueryStreamingSwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamingSwaps not implemented")
}
func (UnimplementedQueryServer) Ban(context.Context, *QueryBanRequest) (*BanVoter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (UnimplementedQueryServer) Ragnarok(context.Context, *QueryRagnarokRequest) (*QueryRagnarokResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ragnarok not implemented")
}
func (UnimplementedQueryServer) RunePool(context.Context, *QueryRunePoolRequest) (*QueryRunePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunePool not implemented")
}
func (UnimplementedQueryServer) RuneProvider(context.Context, *QueryRuneProviderRequest) (*QueryRuneProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuneProvider not implemented")
}
func (UnimplementedQueryServer) RuneProviders(context.Context, *QueryRuneProvidersRequest) (*QueryRuneProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuneProviders not implemented")
}
func (UnimplementedQueryServer) MimirValues(context.Context, *QueryMimirValuesRequest) (*QueryMimirValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirValues not implemented")
}
func (UnimplementedQueryServer) MimirWithKey(context.Context, *QueryMimirWithKeyRequest) (*QueryMimirWithKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirWithKey not implemented")
}
func (UnimplementedQueryServer) MimirAdminValues(context.Context, *QueryMimirAdminValuesRequest) (*QueryMimirAdminValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirAdminValues not implemented")
}
func (UnimplementedQueryServer) MimirNodesAllValues(context.Context, *QueryMimirNodesAllValuesRequest) (*QueryMimirNodesAllValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirNodesAllValues not implemented")
}
func (UnimplementedQueryServer) MimirNodesValues(context.Context, *QueryMimirNodesValuesRequest) (*QueryMimirNodesValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirNodesValues not implemented")
}
func (UnimplementedQueryServer) MimirNodeValues(context.Context, *QueryMimirNodeValuesRequest) (*QueryMimirNodeValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MimirNodeValues not implemented")
}
func (UnimplementedQueryServer) InboundAddresses(context.Context, *QueryInboundAddressesRequest) (*QueryInboundAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboundAddresses not implemented")
}
func (UnimplementedQueryServer) Version(context.Context, *QueryVersionRequest) (*QueryVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedQueryServer) Thorname(context.Context, *QueryThornameRequest) (*QueryThornameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thorname not implemented")
}
func (UnimplementedQueryServer) Invariant(context.Context, *QueryInvariantRequest) (*QueryInvariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invariant not implemented")
}
func (UnimplementedQueryServer) Invariants(context.Context, *QueryInvariantsRequest) (*QueryInvariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invariants not implemented")
}
func (UnimplementedQueryServer) Network(context.Context, *QueryNetworkRequest) (*QueryNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Network not implemented")
}
func (UnimplementedQueryServer) BalanceModule(context.Context, *QueryBalanceModuleRequest) (*QueryBalanceModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceModule not implemented")
}
func (UnimplementedQueryServer) QuoteSwap(context.Context, *QueryQuoteSwapRequest) (*QueryQuoteSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteSwap not implemented")
}
func (UnimplementedQueryServer) QuoteSaverDeposit(context.Context, *QueryQuoteSaverDepositRequest) (*QueryQuoteSaverDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteSaverDeposit not implemented")
}
func (UnimplementedQueryServer) QuoteSaverWithdraw(context.Context, *QueryQuoteSaverWithdrawRequest) (*QueryQuoteSaverWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteSaverWithdraw not implemented")
}
func (UnimplementedQueryServer) QuoteLoanOpen(context.Context, *QueryQuoteLoanOpenRequest) (*QueryQuoteLoanOpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteLoanOpen not implemented")
}
func (UnimplementedQueryServer) QuoteLoanClose(context.Context, *QueryQuoteLoanCloseRequest) (*QueryQuoteLoanCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteLoanClose not implemented")
}
func (UnimplementedQueryServer) ConstantValues(context.Context, *QueryConstantValuesRequest) (*QueryConstantValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConstantValues not implemented")
}
func (UnimplementedQueryServer) SwapQueue(context.Context, *QuerySwapQueueRequest) (*QuerySwapQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapQueue not implemented")
}
func (UnimplementedQueryServer) LastBlocks(context.Context, *QueryLastBlocksRequest) (*QueryLastBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlocks not implemented")
}
func (UnimplementedQueryServer) ChainsLastBlock(context.Context, *QueryChainsLastBlockRequest) (*QueryLastBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainsLastBlock not implemented")
}
func (UnimplementedQueryServer) Vault(context.Context, *QueryVaultRequest) (*QueryVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vault not implemented")
}
func (UnimplementedQueryServer) AsgardVaults(context.Context, *QueryAsgardVaultsRequest) (*QueryAsgardVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsgardVaults not implemented")
}
func (UnimplementedQueryServer) VaultsPubkeys(context.Context, *QueryVaultsPubkeysRequest) (*QueryVaultsPubkeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultsPubkeys not implemented")
}
func (UnimplementedQueryServer) TxStages(context.Context, *QueryTxStagesRequest) (*QueryTxStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxStages not implemented")
}
func (UnimplementedQueryServer) TxStatus(context.Context, *QueryTxStatusRequest) (*QueryTxStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxStatus not implemented")
}
func (UnimplementedQueryServer) Tx(context.Context, *QueryTxRequest) (*QueryTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tx not implemented")
}
func (UnimplementedQueryServer) TxVoters(context.Context, *QueryTxVotersRequest) (*QueryObservedTxVoter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxVoters not implemented")
}
func (UnimplementedQueryServer) TxVotersOld(context.Context, *QueryTxVotersRequest) (*QueryObservedTxVoter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxVotersOld not implemented")
}
func (UnimplementedQueryServer) Clout(context.Context, *QuerySwapperCloutRequest) (*SwapperClout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clout not implemented")
}
func (UnimplementedQueryServer) Queue(context.Context, *QueryQueueRequest) (*QueryQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Queue not implemented")
}
func (UnimplementedQueryServer) ScheduledOutbound(context.Context, *QueryScheduledOutboundRequest) (*QueryOutboundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduledOutbound not implemented")
}
func (UnimplementedQueryServer) PendingOutbound(context.Context, *QueryPendingOutboundRequest) (*QueryOutboundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingOutbound not implemented")
}
func (UnimplementedQueryServer) Block(context.Context, *QueryBlockRequest) (*QueryBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (UnimplementedQueryServer) TssKeygenMetric(context.Context, *QueryTssKeygenMetricRequest) (*QueryTssKeygenMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssKeygenMetric not implemented")
}
func (UnimplementedQueryServer) TssMetric(context.Context, *QueryTssMetricRequest) (*QueryTssMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TssMetric not implemented")
}
func (UnimplementedQueryServer) Keysign(context.Context, *QueryKeysignRequest) (*QueryKeysignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keysign not implemented")
}
func (UnimplementedQueryServer) KeysignPubkey(context.Context, *QueryKeysignPubkeyRequest) (*QueryKeysignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeysignPubkey not implemented")
}
func (UnimplementedQueryServer) Keygen(context.Context, *QueryKeygenRequest) (*QueryKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keygen not implemented")
}
func (UnimplementedQueryServer) UpgradeProposals(context.Context, *QueryUpgradeProposalsRequest) (*QueryUpgradeProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeProposals not implemented")
}
func (UnimplementedQueryServer) UpgradeProposal(context.Context, *QueryUpgradeProposalRequest) (*QueryUpgradeProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeProposal not implemented")
}
func (UnimplementedQueryServer) UpgradeVotes(context.Context, *QueryUpgradeVotesRequest) (*QueryUpgradeVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeVotes not implemented")
}
func (UnimplementedQueryServer) TCYStaker(context.Context, *QueryTCYStakerRequest) (*QueryTCYStakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TCYStaker not implemented")
}
func (UnimplementedQueryServer) TCYStakers(context.Context, *QueryTCYStakersRequest) (*QueryTCYStakersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TCYStakers not implemented")
}
func (UnimplementedQueryServer) TCYClaimer(context.Context, *QueryTCYClaimerRequest) (*QueryTCYClaimerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TCYClaimer not implemented")
}
func (UnimplementedQueryServer) TCYClaimers(context.Context, *QueryTCYClaimersRequest) (*QueryTCYClaimersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TCYClaimers not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Account_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Account(ctx, req.(*QueryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Balances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Balances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Balances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Balances(ctx, req.(*QueryBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Export_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Export(ctx, req.(*QueryExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Pool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Pools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*QueryPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivedPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivedPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivedPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DerivedPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivedPool(ctx, req.(*QueryDerivedPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivedPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivedPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivedPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DerivedPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivedPools(ctx, req.(*QueryDerivedPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LiquidityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityProvider(ctx, req.(*QueryLiquidityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LiquidityProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityProviders(ctx, req.(*QueryLiquidityProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Saver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySaverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Saver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Saver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Saver(ctx, req.(*QuerySaverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Savers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySaversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Savers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Savers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Savers(ctx, req.(*QuerySaversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Borrower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBorrowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Borrower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Borrower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Borrower(ctx, req.(*QueryBorrowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Borrowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBorrowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Borrowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Borrowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Borrowers(ctx, req.(*QueryBorrowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TradeUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeUnit(ctx, req.(*QueryTradeUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TradeUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeUnits(ctx, req.(*QueryTradeUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TradeAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeAccount(ctx, req.(*QueryTradeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TradeAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeAccounts(ctx, req.(*QueryTradeAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SecuredAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySecuredAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SecuredAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SecuredAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SecuredAsset(ctx, req.(*QuerySecuredAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SecuredAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySecuredAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SecuredAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SecuredAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SecuredAssets(ctx, req.(*QuerySecuredAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Node_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Node(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Node_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Node(ctx, req.(*QueryNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Nodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Nodes(ctx, req.(*QueryNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolSlip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolSlipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolSlip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolSlip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolSlip(ctx, req.(*QueryPoolSlipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolSlips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolSlipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolSlips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolSlips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolSlips(ctx, req.(*QueryPoolSlipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutboundFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutboundFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OutboundFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundFee(ctx, req.(*QueryOutboundFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutboundFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutboundFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OutboundFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundFees(ctx, req.(*QueryOutboundFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamingSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStreamingSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamingSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StreamingSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamingSwap(ctx, req.(*QueryStreamingSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamingSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStreamingSwapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamingSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StreamingSwaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamingSwaps(ctx, req.(*QueryStreamingSwapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Ban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ban(ctx, req.(*QueryBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Ragnarok_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRagnarokRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Ragnarok(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Ragnarok_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Ragnarok(ctx, req.(*QueryRagnarokRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RunePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRunePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RunePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RunePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RunePool(ctx, req.(*QueryRunePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RuneProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRuneProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RuneProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RuneProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RuneProvider(ctx, req.(*QueryRuneProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RuneProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRuneProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RuneProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RuneProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RuneProviders(ctx, req.(*QueryRuneProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MimirValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirValues(ctx, req.(*QueryMimirValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirWithKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirWithKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirWithKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MimirWithKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirWithKey(ctx, req.(*QueryMimirWithKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirAdminValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirAdminValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirAdminValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MimirAdminValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirAdminValues(ctx, req.(*QueryMimirAdminValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirNodesAllValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirNodesAllValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirNodesAllValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MimirNodesAllValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirNodesAllValues(ctx, req.(*QueryMimirNodesAllValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirNodesValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirNodesValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirNodesValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MimirNodesValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirNodesValues(ctx, req.(*QueryMimirNodesValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MimirNodeValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMimirNodeValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MimirNodeValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MimirNodeValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MimirNodeValues(ctx, req.(*QueryMimirNodeValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InboundAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInboundAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InboundAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InboundAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InboundAddresses(ctx, req.(*QueryInboundAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Version(ctx, req.(*QueryVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Thorname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThornameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Thorname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Thorname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Thorname(ctx, req.(*QueryThornameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Invariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Invariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Invariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Invariant(ctx, req.(*QueryInvariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Invariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Invariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Invariants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Invariants(ctx, req.(*QueryInvariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Network_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Network(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Network_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Network(ctx, req.(*QueryNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BalanceModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceModule(ctx, req.(*QueryBalanceModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuoteSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuoteSwap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteSwap(ctx, req.(*QueryQuoteSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteSaverDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuoteSaverDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteSaverDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuoteSaverDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteSaverDeposit(ctx, req.(*QueryQuoteSaverDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteSaverWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuoteSaverWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteSaverWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuoteSaverWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteSaverWithdraw(ctx, req.(*QueryQuoteSaverWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteLoanOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuoteLoanOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteLoanOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuoteLoanOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteLoanOpen(ctx, req.(*QueryQuoteLoanOpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteLoanClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQuoteLoanCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteLoanClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuoteLoanClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteLoanClose(ctx, req.(*QueryQuoteLoanCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConstantValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConstantValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConstantValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ConstantValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConstantValues(ctx, req.(*QueryConstantValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SwapQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SwapQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SwapQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SwapQueue(ctx, req.(*QuerySwapQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBlocks(ctx, req.(*QueryLastBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainsLastBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainsLastBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainsLastBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ChainsLastBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainsLastBlock(ctx, req.(*QueryChainsLastBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Vault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vault(ctx, req.(*QueryVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AsgardVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAsgardVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AsgardVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AsgardVaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AsgardVaults(ctx, req.(*QueryAsgardVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VaultsPubkeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultsPubkeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultsPubkeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VaultsPubkeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultsPubkeys(ctx, req.(*QueryVaultsPubkeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TxStages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxStages(ctx, req.(*QueryTxStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TxStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxStatus(ctx, req.(*QueryTxStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Tx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Tx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tx(ctx, req.(*QueryTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxVoters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxVotersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxVoters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TxVoters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxVoters(ctx, req.(*QueryTxVotersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxVotersOld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxVotersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxVotersOld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TxVotersOld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxVotersOld(ctx, req.(*QueryTxVotersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Clout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapperCloutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Clout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Clout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Clout(ctx, req.(*QuerySwapperCloutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Queue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Queue(ctx, req.(*QueryQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ScheduledOutbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryScheduledOutboundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ScheduledOutbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ScheduledOutbound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ScheduledOutbound(ctx, req.(*QueryScheduledOutboundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingOutbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingOutboundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingOutbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PendingOutbound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingOutbound(ctx, req.(*QueryPendingOutboundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Block_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Block(ctx, req.(*QueryBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TssKeygenMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTssKeygenMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TssKeygenMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TssKeygenMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TssKeygenMetric(ctx, req.(*QueryTssKeygenMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TssMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTssMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TssMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TssMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TssMetric(ctx, req.(*QueryTssMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keysign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeysignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keysign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Keysign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keysign(ctx, req.(*QueryKeysignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeysignPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeysignPubkeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeysignPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_KeysignPubkey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeysignPubkey(ctx, req.(*QueryKeysignPubkeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Keygen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keygen(ctx, req.(*QueryKeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UpgradeProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUpgradeProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UpgradeProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UpgradeProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UpgradeProposals(ctx, req.(*QueryUpgradeProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UpgradeProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUpgradeProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UpgradeProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UpgradeProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UpgradeProposal(ctx, req.(*QueryUpgradeProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UpgradeVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUpgradeVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UpgradeVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UpgradeVotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UpgradeVotes(ctx, req.(*QueryUpgradeVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TCYStaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTCYStakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TCYStaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TCYStaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TCYStaker(ctx, req.(*QueryTCYStakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TCYStakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTCYStakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TCYStakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TCYStakers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TCYStakers(ctx, req.(*QueryTCYStakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TCYClaimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTCYClaimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TCYClaimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TCYClaimer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TCYClaimer(ctx, req.(*QueryTCYClaimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TCYClaimers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTCYClaimersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TCYClaimers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TCYClaimers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TCYClaimers(ctx, req.(*QueryTCYClaimersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Account",
			Handler:    _Query_Account_Handler,
		},
		{
			MethodName: "Balances",
			Handler:    _Query_Balances_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _Query_Export_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "DerivedPool",
			Handler:    _Query_DerivedPool_Handler,
		},
		{
			MethodName: "DerivedPools",
			Handler:    _Query_DerivedPools_Handler,
		},
		{
			MethodName: "LiquidityProvider",
			Handler:    _Query_LiquidityProvider_Handler,
		},
		{
			MethodName: "LiquidityProviders",
			Handler:    _Query_LiquidityProviders_Handler,
		},
		{
			MethodName: "Saver",
			Handler:    _Query_Saver_Handler,
		},
		{
			MethodName: "Savers",
			Handler:    _Query_Savers_Handler,
		},
		{
			MethodName: "Borrower",
			Handler:    _Query_Borrower_Handler,
		},
		{
			MethodName: "Borrowers",
			Handler:    _Query_Borrowers_Handler,
		},
		{
			MethodName: "TradeUnit",
			Handler:    _Query_TradeUnit_Handler,
		},
		{
			MethodName: "TradeUnits",
			Handler:    _Query_TradeUnits_Handler,
		},
		{
			MethodName: "TradeAccount",
			Handler:    _Query_TradeAccount_Handler,
		},
		{
			MethodName: "TradeAccounts",
			Handler:    _Query_TradeAccounts_Handler,
		},
		{
			MethodName: "SecuredAsset",
			Handler:    _Query_SecuredAsset_Handler,
		},
		{
			MethodName: "SecuredAssets",
			Handler:    _Query_SecuredAssets_Handler,
		},
		{
			MethodName: "Node",
			Handler:    _Query_Node_Handler,
		},
		{
			MethodName: "Nodes",
			Handler:    _Query_Nodes_Handler,
		},
		{
			MethodName: "PoolSlip",
			Handler:    _Query_PoolSlip_Handler,
		},
		{
			MethodName: "PoolSlips",
			Handler:    _Query_PoolSlips_Handler,
		},
		{
			MethodName: "OutboundFee",
			Handler:    _Query_OutboundFee_Handler,
		},
		{
			MethodName: "OutboundFees",
			Handler:    _Query_OutboundFees_Handler,
		},
		{
			MethodName: "StreamingSwap",
			Handler:    _Query_StreamingSwap_Handler,
		},
		{
			MethodName: "StreamingSwaps",
			Handler:    _Query_StreamingSwaps_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _Query_Ban_Handler,
		},
		{
			MethodName: "Ragnarok",
			Handler:    _Query_Ragnarok_Handler,
		},
		{
			MethodName: "RunePool",
			Handler:    _Query_RunePool_Handler,
		},
		{
			MethodName: "RuneProvider",
			Handler:    _Query_RuneProvider_Handler,
		},
		{
			MethodName: "RuneProviders",
			Handler:    _Query_RuneProviders_Handler,
		},
		{
			MethodName: "MimirValues",
			Handler:    _Query_MimirValues_Handler,
		},
		{
			MethodName: "MimirWithKey",
			Handler:    _Query_MimirWithKey_Handler,
		},
		{
			MethodName: "MimirAdminValues",
			Handler:    _Query_MimirAdminValues_Handler,
		},
		{
			MethodName: "MimirNodesAllValues",
			Handler:    _Query_MimirNodesAllValues_Handler,
		},
		{
			MethodName: "MimirNodesValues",
			Handler:    _Query_MimirNodesValues_Handler,
		},
		{
			MethodName: "MimirNodeValues",
			Handler:    _Query_MimirNodeValues_Handler,
		},
		{
			MethodName: "InboundAddresses",
			Handler:    _Query_InboundAddresses_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Query_Version_Handler,
		},
		{
			MethodName: "Thorname",
			Handler:    _Query_Thorname_Handler,
		},
		{
			MethodName: "Invariant",
			Handler:    _Query_Invariant_Handler,
		},
		{
			MethodName: "Invariants",
			Handler:    _Query_Invariants_Handler,
		},
		{
			MethodName: "Network",
			Handler:    _Query_Network_Handler,
		},
		{
			MethodName: "BalanceModule",
			Handler:    _Query_BalanceModule_Handler,
		},
		{
			MethodName: "QuoteSwap",
			Handler:    _Query_QuoteSwap_Handler,
		},
		{
			MethodName: "QuoteSaverDeposit",
			Handler:    _Query_QuoteSaverDeposit_Handler,
		},
		{
			MethodName: "QuoteSaverWithdraw",
			Handler:    _Query_QuoteSaverWithdraw_Handler,
		},
		{
			MethodName: "QuoteLoanOpen",
			Handler:    _Query_QuoteLoanOpen_Handler,
		},
		{
			MethodName: "QuoteLoanClose",
			Handler:    _Query_QuoteLoanClose_Handler,
		},
		{
			MethodName: "ConstantValues",
			Handler:    _Query_ConstantValues_Handler,
		},
		{
			MethodName: "SwapQueue",
			Handler:    _Query_SwapQueue_Handler,
		},
		{
			MethodName: "LastBlocks",
			Handler:    _Query_LastBlocks_Handler,
		},
		{
			MethodName: "ChainsLastBlock",
			Handler:    _Query_ChainsLastBlock_Handler,
		},
		{
			MethodName: "Vault",
			Handler:    _Query_Vault_Handler,
		},
		{
			MethodName: "AsgardVaults",
			Handler:    _Query_AsgardVaults_Handler,
		},
		{
			MethodName: "VaultsPubkeys",
			Handler:    _Query_VaultsPubkeys_Handler,
		},
		{
			MethodName: "TxStages",
			Handler:    _Query_TxStages_Handler,
		},
		{
			MethodName: "TxStatus",
			Handler:    _Query_TxStatus_Handler,
		},
		{
			MethodName: "Tx",
			Handler:    _Query_Tx_Handler,
		},
		{
			MethodName: "TxVoters",
			Handler:    _Query_TxVoters_Handler,
		},
		{
			MethodName: "TxVotersOld",
			Handler:    _Query_TxVotersOld_Handler,
		},
		{
			MethodName: "Clout",
			Handler:    _Query_Clout_Handler,
		},
		{
			MethodName: "Queue",
			Handler:    _Query_Queue_Handler,
		},
		{
			MethodName: "ScheduledOutbound",
			Handler:    _Query_ScheduledOutbound_Handler,
		},
		{
			MethodName: "PendingOutbound",
			Handler:    _Query_PendingOutbound_Handler,
		},
		{
			MethodName: "Block",
			Handler:    _Query_Block_Handler,
		},
		{
			MethodName: "TssKeygenMetric",
			Handler:    _Query_TssKeygenMetric_Handler,
		},
		{
			MethodName: "TssMetric",
			Handler:    _Query_TssMetric_Handler,
		},
		{
			MethodName: "Keysign",
			Handler:    _Query_Keysign_Handler,
		},
		{
			MethodName: "KeysignPubkey",
			Handler:    _Query_KeysignPubkey_Handler,
		},
		{
			MethodName: "Keygen",
			Handler:    _Query_Keygen_Handler,
		},
		{
			MethodName: "UpgradeProposals",
			Handler:    _Query_UpgradeProposals_Handler,
		},
		{
			MethodName: "UpgradeProposal",
			Handler:    _Query_UpgradeProposal_Handler,
		},
		{
			MethodName: "UpgradeVotes",
			Handler:    _Query_UpgradeVotes_Handler,
		},
		{
			MethodName: "TCYStaker",
			Handler:    _Query_TCYStaker_Handler,
		},
		{
			MethodName: "TCYStakers",
			Handler:    _Query_TCYStakers_Handler,
		},
		{
			MethodName: "TCYClaimer",
			Handler:    _Query_TCYClaimer_Handler,
		},
		{
			MethodName: "TCYClaimers",
			Handler:    _Query_TCYClaimers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/query.proto",
}
