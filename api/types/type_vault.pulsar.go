// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package types

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	common "github.com/mapprotocol/compass-tss/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Vault_3_list)(nil)

type _Vault_3_list struct {
	list *[]*common.Coin
}

func (x *_Vault_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Vault_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Vault_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Vault_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*common.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Vault_3_list) AppendMutable() protoreflect.Value {
	v := new(common.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Vault_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Vault_3_list) NewElement() protoreflect.Value {
	v := new(common.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Vault_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Vault_7_list)(nil)

type _Vault_7_list struct {
	list *[]string
}

func (x *_Vault_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Vault_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Vault_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Vault_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Vault_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Vault at list field Membership as it is not of Message kind"))
}

func (x *_Vault_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Vault_7_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Vault_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Vault_8_list)(nil)

type _Vault_8_list struct {
	list *[]string
}

func (x *_Vault_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Vault_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Vault_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Vault_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Vault_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Vault at list field Chains as it is not of Message kind"))
}

func (x *_Vault_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Vault_8_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Vault_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Vault_11_list)(nil)

type _Vault_11_list struct {
	list *[]int64
}

func (x *_Vault_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Vault_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfInt64((*x.list)[i])
}

func (x *_Vault_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Vault_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Vault_11_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Vault at list field PendingTxBlockHeights as it is not of Message kind"))
}

func (x *_Vault_11_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Vault_11_list) NewElement() protoreflect.Value {
	v := int64(0)
	return protoreflect.ValueOfInt64(v)
}

func (x *_Vault_11_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Vault_22_list)(nil)

type _Vault_22_list struct {
	list *[]*ChainContract
}

func (x *_Vault_22_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Vault_22_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Vault_22_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ChainContract)
	(*x.list)[i] = concreteValue
}

func (x *_Vault_22_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ChainContract)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Vault_22_list) AppendMutable() protoreflect.Value {
	v := new(ChainContract)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Vault_22_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Vault_22_list) NewElement() protoreflect.Value {
	v := new(ChainContract)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Vault_22_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Vault_23_list)(nil)

type _Vault_23_list struct {
	list *[]string
}

func (x *_Vault_23_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Vault_23_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Vault_23_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Vault_23_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Vault_23_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Vault at list field Frozen as it is not of Message kind"))
}

func (x *_Vault_23_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Vault_23_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Vault_23_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Vault                          protoreflect.MessageDescriptor
	fd_Vault_block_height             protoreflect.FieldDescriptor
	fd_Vault_pub_key                  protoreflect.FieldDescriptor
	fd_Vault_coins                    protoreflect.FieldDescriptor
	fd_Vault_type                     protoreflect.FieldDescriptor
	fd_Vault_status                   protoreflect.FieldDescriptor
	fd_Vault_status_since             protoreflect.FieldDescriptor
	fd_Vault_membership               protoreflect.FieldDescriptor
	fd_Vault_chains                   protoreflect.FieldDescriptor
	fd_Vault_inbound_tx_count         protoreflect.FieldDescriptor
	fd_Vault_outbound_tx_count        protoreflect.FieldDescriptor
	fd_Vault_pending_tx_block_heights protoreflect.FieldDescriptor
	fd_Vault_routers                  protoreflect.FieldDescriptor
	fd_Vault_frozen                   protoreflect.FieldDescriptor
)

func init() {
	file_types_type_vault_proto_init()
	md_Vault = File_types_type_vault_proto.Messages().ByName("Vault")
	fd_Vault_block_height = md_Vault.Fields().ByName("block_height")
	fd_Vault_pub_key = md_Vault.Fields().ByName("pub_key")
	fd_Vault_coins = md_Vault.Fields().ByName("coins")
	fd_Vault_type = md_Vault.Fields().ByName("type")
	fd_Vault_status = md_Vault.Fields().ByName("status")
	fd_Vault_status_since = md_Vault.Fields().ByName("status_since")
	fd_Vault_membership = md_Vault.Fields().ByName("membership")
	fd_Vault_chains = md_Vault.Fields().ByName("chains")
	fd_Vault_inbound_tx_count = md_Vault.Fields().ByName("inbound_tx_count")
	fd_Vault_outbound_tx_count = md_Vault.Fields().ByName("outbound_tx_count")
	fd_Vault_pending_tx_block_heights = md_Vault.Fields().ByName("pending_tx_block_heights")
	fd_Vault_routers = md_Vault.Fields().ByName("routers")
	fd_Vault_frozen = md_Vault.Fields().ByName("frozen")
}

var _ protoreflect.Message = (*fastReflection_Vault)(nil)

type fastReflection_Vault Vault

func (x *Vault) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Vault)(x)
}

func (x *Vault) slowProtoReflect() protoreflect.Message {
	mi := &file_types_type_vault_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Vault_messageType fastReflection_Vault_messageType
var _ protoreflect.MessageType = fastReflection_Vault_messageType{}

type fastReflection_Vault_messageType struct{}

func (x fastReflection_Vault_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Vault)(nil)
}
func (x fastReflection_Vault_messageType) New() protoreflect.Message {
	return new(fastReflection_Vault)
}
func (x fastReflection_Vault_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Vault
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Vault) Descriptor() protoreflect.MessageDescriptor {
	return md_Vault
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Vault) Type() protoreflect.MessageType {
	return _fastReflection_Vault_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Vault) New() protoreflect.Message {
	return new(fastReflection_Vault)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Vault) Interface() protoreflect.ProtoMessage {
	return (*Vault)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Vault) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockHeight)
		if !f(fd_Vault_block_height, value) {
			return
		}
	}
	if x.PubKey != "" {
		value := protoreflect.ValueOfString(x.PubKey)
		if !f(fd_Vault_pub_key, value) {
			return
		}
	}
	if len(x.Coins) != 0 {
		value := protoreflect.ValueOfList(&_Vault_3_list{list: &x.Coins})
		if !f(fd_Vault_coins, value) {
			return
		}
	}
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_Vault_type, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Vault_status, value) {
			return
		}
	}
	if x.StatusSince != int64(0) {
		value := protoreflect.ValueOfInt64(x.StatusSince)
		if !f(fd_Vault_status_since, value) {
			return
		}
	}
	if len(x.Membership) != 0 {
		value := protoreflect.ValueOfList(&_Vault_7_list{list: &x.Membership})
		if !f(fd_Vault_membership, value) {
			return
		}
	}
	if len(x.Chains) != 0 {
		value := protoreflect.ValueOfList(&_Vault_8_list{list: &x.Chains})
		if !f(fd_Vault_chains, value) {
			return
		}
	}
	if x.InboundTxCount != int64(0) {
		value := protoreflect.ValueOfInt64(x.InboundTxCount)
		if !f(fd_Vault_inbound_tx_count, value) {
			return
		}
	}
	if x.OutboundTxCount != int64(0) {
		value := protoreflect.ValueOfInt64(x.OutboundTxCount)
		if !f(fd_Vault_outbound_tx_count, value) {
			return
		}
	}
	if len(x.PendingTxBlockHeights) != 0 {
		value := protoreflect.ValueOfList(&_Vault_11_list{list: &x.PendingTxBlockHeights})
		if !f(fd_Vault_pending_tx_block_heights, value) {
			return
		}
	}
	if len(x.Routers) != 0 {
		value := protoreflect.ValueOfList(&_Vault_22_list{list: &x.Routers})
		if !f(fd_Vault_routers, value) {
			return
		}
	}
	if len(x.Frozen) != 0 {
		value := protoreflect.ValueOfList(&_Vault_23_list{list: &x.Frozen})
		if !f(fd_Vault_frozen, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Vault) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "types.Vault.block_height":
		return x.BlockHeight != int64(0)
	case "types.Vault.pub_key":
		return x.PubKey != ""
	case "types.Vault.coins":
		return len(x.Coins) != 0
	case "types.Vault.type":
		return x.Type_ != 0
	case "types.Vault.status":
		return x.Status != 0
	case "types.Vault.status_since":
		return x.StatusSince != int64(0)
	case "types.Vault.membership":
		return len(x.Membership) != 0
	case "types.Vault.chains":
		return len(x.Chains) != 0
	case "types.Vault.inbound_tx_count":
		return x.InboundTxCount != int64(0)
	case "types.Vault.outbound_tx_count":
		return x.OutboundTxCount != int64(0)
	case "types.Vault.pending_tx_block_heights":
		return len(x.PendingTxBlockHeights) != 0
	case "types.Vault.routers":
		return len(x.Routers) != 0
	case "types.Vault.frozen":
		return len(x.Frozen) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.Vault"))
		}
		panic(fmt.Errorf("message types.Vault does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Vault) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "types.Vault.block_height":
		x.BlockHeight = int64(0)
	case "types.Vault.pub_key":
		x.PubKey = ""
	case "types.Vault.coins":
		x.Coins = nil
	case "types.Vault.type":
		x.Type_ = 0
	case "types.Vault.status":
		x.Status = 0
	case "types.Vault.status_since":
		x.StatusSince = int64(0)
	case "types.Vault.membership":
		x.Membership = nil
	case "types.Vault.chains":
		x.Chains = nil
	case "types.Vault.inbound_tx_count":
		x.InboundTxCount = int64(0)
	case "types.Vault.outbound_tx_count":
		x.OutboundTxCount = int64(0)
	case "types.Vault.pending_tx_block_heights":
		x.PendingTxBlockHeights = nil
	case "types.Vault.routers":
		x.Routers = nil
	case "types.Vault.frozen":
		x.Frozen = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.Vault"))
		}
		panic(fmt.Errorf("message types.Vault does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Vault) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "types.Vault.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfInt64(value)
	case "types.Vault.pub_key":
		value := x.PubKey
		return protoreflect.ValueOfString(value)
	case "types.Vault.coins":
		if len(x.Coins) == 0 {
			return protoreflect.ValueOfList(&_Vault_3_list{})
		}
		listValue := &_Vault_3_list{list: &x.Coins}
		return protoreflect.ValueOfList(listValue)
	case "types.Vault.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "types.Vault.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "types.Vault.status_since":
		value := x.StatusSince
		return protoreflect.ValueOfInt64(value)
	case "types.Vault.membership":
		if len(x.Membership) == 0 {
			return protoreflect.ValueOfList(&_Vault_7_list{})
		}
		listValue := &_Vault_7_list{list: &x.Membership}
		return protoreflect.ValueOfList(listValue)
	case "types.Vault.chains":
		if len(x.Chains) == 0 {
			return protoreflect.ValueOfList(&_Vault_8_list{})
		}
		listValue := &_Vault_8_list{list: &x.Chains}
		return protoreflect.ValueOfList(listValue)
	case "types.Vault.inbound_tx_count":
		value := x.InboundTxCount
		return protoreflect.ValueOfInt64(value)
	case "types.Vault.outbound_tx_count":
		value := x.OutboundTxCount
		return protoreflect.ValueOfInt64(value)
	case "types.Vault.pending_tx_block_heights":
		if len(x.PendingTxBlockHeights) == 0 {
			return protoreflect.ValueOfList(&_Vault_11_list{})
		}
		listValue := &_Vault_11_list{list: &x.PendingTxBlockHeights}
		return protoreflect.ValueOfList(listValue)
	case "types.Vault.routers":
		if len(x.Routers) == 0 {
			return protoreflect.ValueOfList(&_Vault_22_list{})
		}
		listValue := &_Vault_22_list{list: &x.Routers}
		return protoreflect.ValueOfList(listValue)
	case "types.Vault.frozen":
		if len(x.Frozen) == 0 {
			return protoreflect.ValueOfList(&_Vault_23_list{})
		}
		listValue := &_Vault_23_list{list: &x.Frozen}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.Vault"))
		}
		panic(fmt.Errorf("message types.Vault does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Vault) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "types.Vault.block_height":
		x.BlockHeight = value.Int()
	case "types.Vault.pub_key":
		x.PubKey = value.Interface().(string)
	case "types.Vault.coins":
		lv := value.List()
		clv := lv.(*_Vault_3_list)
		x.Coins = *clv.list
	case "types.Vault.type":
		x.Type_ = (VaultType)(value.Enum())
	case "types.Vault.status":
		x.Status = (VaultStatus)(value.Enum())
	case "types.Vault.status_since":
		x.StatusSince = value.Int()
	case "types.Vault.membership":
		lv := value.List()
		clv := lv.(*_Vault_7_list)
		x.Membership = *clv.list
	case "types.Vault.chains":
		lv := value.List()
		clv := lv.(*_Vault_8_list)
		x.Chains = *clv.list
	case "types.Vault.inbound_tx_count":
		x.InboundTxCount = value.Int()
	case "types.Vault.outbound_tx_count":
		x.OutboundTxCount = value.Int()
	case "types.Vault.pending_tx_block_heights":
		lv := value.List()
		clv := lv.(*_Vault_11_list)
		x.PendingTxBlockHeights = *clv.list
	case "types.Vault.routers":
		lv := value.List()
		clv := lv.(*_Vault_22_list)
		x.Routers = *clv.list
	case "types.Vault.frozen":
		lv := value.List()
		clv := lv.(*_Vault_23_list)
		x.Frozen = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.Vault"))
		}
		panic(fmt.Errorf("message types.Vault does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Vault) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "types.Vault.coins":
		if x.Coins == nil {
			x.Coins = []*common.Coin{}
		}
		value := &_Vault_3_list{list: &x.Coins}
		return protoreflect.ValueOfList(value)
	case "types.Vault.membership":
		if x.Membership == nil {
			x.Membership = []string{}
		}
		value := &_Vault_7_list{list: &x.Membership}
		return protoreflect.ValueOfList(value)
	case "types.Vault.chains":
		if x.Chains == nil {
			x.Chains = []string{}
		}
		value := &_Vault_8_list{list: &x.Chains}
		return protoreflect.ValueOfList(value)
	case "types.Vault.pending_tx_block_heights":
		if x.PendingTxBlockHeights == nil {
			x.PendingTxBlockHeights = []int64{}
		}
		value := &_Vault_11_list{list: &x.PendingTxBlockHeights}
		return protoreflect.ValueOfList(value)
	case "types.Vault.routers":
		if x.Routers == nil {
			x.Routers = []*ChainContract{}
		}
		value := &_Vault_22_list{list: &x.Routers}
		return protoreflect.ValueOfList(value)
	case "types.Vault.frozen":
		if x.Frozen == nil {
			x.Frozen = []string{}
		}
		value := &_Vault_23_list{list: &x.Frozen}
		return protoreflect.ValueOfList(value)
	case "types.Vault.block_height":
		panic(fmt.Errorf("field block_height of message types.Vault is not mutable"))
	case "types.Vault.pub_key":
		panic(fmt.Errorf("field pub_key of message types.Vault is not mutable"))
	case "types.Vault.type":
		panic(fmt.Errorf("field type of message types.Vault is not mutable"))
	case "types.Vault.status":
		panic(fmt.Errorf("field status of message types.Vault is not mutable"))
	case "types.Vault.status_since":
		panic(fmt.Errorf("field status_since of message types.Vault is not mutable"))
	case "types.Vault.inbound_tx_count":
		panic(fmt.Errorf("field inbound_tx_count of message types.Vault is not mutable"))
	case "types.Vault.outbound_tx_count":
		panic(fmt.Errorf("field outbound_tx_count of message types.Vault is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.Vault"))
		}
		panic(fmt.Errorf("message types.Vault does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Vault) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "types.Vault.block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "types.Vault.pub_key":
		return protoreflect.ValueOfString("")
	case "types.Vault.coins":
		list := []*common.Coin{}
		return protoreflect.ValueOfList(&_Vault_3_list{list: &list})
	case "types.Vault.type":
		return protoreflect.ValueOfEnum(0)
	case "types.Vault.status":
		return protoreflect.ValueOfEnum(0)
	case "types.Vault.status_since":
		return protoreflect.ValueOfInt64(int64(0))
	case "types.Vault.membership":
		list := []string{}
		return protoreflect.ValueOfList(&_Vault_7_list{list: &list})
	case "types.Vault.chains":
		list := []string{}
		return protoreflect.ValueOfList(&_Vault_8_list{list: &list})
	case "types.Vault.inbound_tx_count":
		return protoreflect.ValueOfInt64(int64(0))
	case "types.Vault.outbound_tx_count":
		return protoreflect.ValueOfInt64(int64(0))
	case "types.Vault.pending_tx_block_heights":
		list := []int64{}
		return protoreflect.ValueOfList(&_Vault_11_list{list: &list})
	case "types.Vault.routers":
		list := []*ChainContract{}
		return protoreflect.ValueOfList(&_Vault_22_list{list: &list})
	case "types.Vault.frozen":
		list := []string{}
		return protoreflect.ValueOfList(&_Vault_23_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: types.Vault"))
		}
		panic(fmt.Errorf("message types.Vault does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Vault) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in types.Vault", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Vault) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Vault) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Vault) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Vault) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Vault)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		l = len(x.PubKey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Coins) > 0 {
			for _, e := range x.Coins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.StatusSince != 0 {
			n += 1 + runtime.Sov(uint64(x.StatusSince))
		}
		if len(x.Membership) > 0 {
			for _, s := range x.Membership {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Chains) > 0 {
			for _, s := range x.Chains {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.InboundTxCount != 0 {
			n += 1 + runtime.Sov(uint64(x.InboundTxCount))
		}
		if x.OutboundTxCount != 0 {
			n += 1 + runtime.Sov(uint64(x.OutboundTxCount))
		}
		if len(x.PendingTxBlockHeights) > 0 {
			l = 0
			for _, e := range x.PendingTxBlockHeights {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if len(x.Routers) > 0 {
			for _, e := range x.Routers {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Frozen) > 0 {
			for _, s := range x.Frozen {
				l = len(s)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Vault)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Frozen) > 0 {
			for iNdEx := len(x.Frozen) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Frozen[iNdEx])
				copy(dAtA[i:], x.Frozen[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Frozen[iNdEx])))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xba
			}
		}
		if len(x.Routers) > 0 {
			for iNdEx := len(x.Routers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Routers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0xb2
			}
		}
		if len(x.PendingTxBlockHeights) > 0 {
			var pksize2 int
			for _, num := range x.PendingTxBlockHeights {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num1 := range x.PendingTxBlockHeights {
				num := uint64(num1)
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x5a
		}
		if x.OutboundTxCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OutboundTxCount))
			i--
			dAtA[i] = 0x50
		}
		if x.InboundTxCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InboundTxCount))
			i--
			dAtA[i] = 0x48
		}
		if len(x.Chains) > 0 {
			for iNdEx := len(x.Chains) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Chains[iNdEx])
				copy(dAtA[i:], x.Chains[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Chains[iNdEx])))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.Membership) > 0 {
			for iNdEx := len(x.Membership) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Membership[iNdEx])
				copy(dAtA[i:], x.Membership[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Membership[iNdEx])))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.StatusSince != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StatusSince))
			i--
			dAtA[i] = 0x30
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x28
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Coins) > 0 {
			for iNdEx := len(x.Coins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Coins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.PubKey) > 0 {
			i -= len(x.PubKey)
			copy(dAtA[i:], x.PubKey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PubKey)))
			i--
			dAtA[i] = 0x12
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Vault)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Vault: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PubKey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Coins = append(x.Coins, &common.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Coins[len(x.Coins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= VaultType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= VaultStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StatusSince", wireType)
				}
				x.StatusSince = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StatusSince |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Membership", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Membership = append(x.Membership, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Chains = append(x.Chains, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InboundTxCount", wireType)
				}
				x.InboundTxCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InboundTxCount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutboundTxCount", wireType)
				}
				x.OutboundTxCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OutboundTxCount |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType == 0 {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.PendingTxBlockHeights = append(x.PendingTxBlockHeights, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.PendingTxBlockHeights) == 0 {
						x.PendingTxBlockHeights = make([]int64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.PendingTxBlockHeights = append(x.PendingTxBlockHeights, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PendingTxBlockHeights", wireType)
				}
			case 22:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Routers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Routers = append(x.Routers, &ChainContract{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Routers[len(x.Routers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 23:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Frozen", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Frozen = append(x.Frozen, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: types/type_vault.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VaultType int32

const (
	VaultType_UnknownVault VaultType = 0
	VaultType_AsgardVault  VaultType = 1
)

// Enum value maps for VaultType.
var (
	VaultType_name = map[int32]string{
		0: "UnknownVault",
		1: "AsgardVault",
	}
	VaultType_value = map[string]int32{
		"UnknownVault": 0,
		"AsgardVault":  1,
	}
)

func (x VaultType) Enum() *VaultType {
	p := new(VaultType)
	*p = x
	return p
}

func (x VaultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VaultType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_type_vault_proto_enumTypes[0].Descriptor()
}

func (VaultType) Type() protoreflect.EnumType {
	return &file_types_type_vault_proto_enumTypes[0]
}

func (x VaultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VaultType.Descriptor instead.
func (VaultType) EnumDescriptor() ([]byte, []int) {
	return file_types_type_vault_proto_rawDescGZIP(), []int{0}
}

type VaultStatus int32

const (
	VaultStatus_InactiveVault VaultStatus = 0
	VaultStatus_ActiveVault   VaultStatus = 1
	VaultStatus_RetiringVault VaultStatus = 2
	VaultStatus_InitVault     VaultStatus = 3
)

// Enum value maps for VaultStatus.
var (
	VaultStatus_name = map[int32]string{
		0: "InactiveVault",
		1: "ActiveVault",
		2: "RetiringVault",
		3: "InitVault",
	}
	VaultStatus_value = map[string]int32{
		"InactiveVault": 0,
		"ActiveVault":   1,
		"RetiringVault": 2,
		"InitVault":     3,
	}
)

func (x VaultStatus) Enum() *VaultStatus {
	p := new(VaultStatus)
	*p = x
	return p
}

func (x VaultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VaultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_types_type_vault_proto_enumTypes[1].Descriptor()
}

func (VaultStatus) Type() protoreflect.EnumType {
	return &file_types_type_vault_proto_enumTypes[1]
}

func (x VaultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VaultStatus.Descriptor instead.
func (VaultStatus) EnumDescriptor() ([]byte, []int) {
	return file_types_type_vault_proto_rawDescGZIP(), []int{1}
}

type Vault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight           int64            `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	PubKey                string           `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Coins                 []*common.Coin   `protobuf:"bytes,3,rep,name=coins,proto3" json:"coins,omitempty"`
	Type_                 VaultType        `protobuf:"varint,4,opt,name=type,proto3,enum=types.VaultType" json:"type,omitempty"`
	Status                VaultStatus      `protobuf:"varint,5,opt,name=status,proto3,enum=types.VaultStatus" json:"status,omitempty"`
	StatusSince           int64            `protobuf:"varint,6,opt,name=status_since,json=statusSince,proto3" json:"status_since,omitempty"`
	Membership            []string         `protobuf:"bytes,7,rep,name=membership,proto3" json:"membership,omitempty"`
	Chains                []string         `protobuf:"bytes,8,rep,name=chains,proto3" json:"chains,omitempty"`
	InboundTxCount        int64            `protobuf:"varint,9,opt,name=inbound_tx_count,json=inboundTxCount,proto3" json:"inbound_tx_count,omitempty"`
	OutboundTxCount       int64            `protobuf:"varint,10,opt,name=outbound_tx_count,json=outboundTxCount,proto3" json:"outbound_tx_count,omitempty"`
	PendingTxBlockHeights []int64          `protobuf:"varint,11,rep,packed,name=pending_tx_block_heights,json=pendingTxBlockHeights,proto3" json:"pending_tx_block_heights,omitempty"`
	Routers               []*ChainContract `protobuf:"bytes,22,rep,name=routers,proto3" json:"routers,omitempty"`
	Frozen                []string         `protobuf:"bytes,23,rep,name=frozen,proto3" json:"frozen,omitempty"`
}

func (x *Vault) Reset() {
	*x = Vault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_type_vault_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vault) ProtoMessage() {}

// Deprecated: Use Vault.ProtoReflect.Descriptor instead.
func (*Vault) Descriptor() ([]byte, []int) {
	return file_types_type_vault_proto_rawDescGZIP(), []int{0}
}

func (x *Vault) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *Vault) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *Vault) GetCoins() []*common.Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *Vault) GetType_() VaultType {
	if x != nil {
		return x.Type_
	}
	return VaultType_UnknownVault
}

func (x *Vault) GetStatus() VaultStatus {
	if x != nil {
		return x.Status
	}
	return VaultStatus_InactiveVault
}

func (x *Vault) GetStatusSince() int64 {
	if x != nil {
		return x.StatusSince
	}
	return 0
}

func (x *Vault) GetMembership() []string {
	if x != nil {
		return x.Membership
	}
	return nil
}

func (x *Vault) GetChains() []string {
	if x != nil {
		return x.Chains
	}
	return nil
}

func (x *Vault) GetInboundTxCount() int64 {
	if x != nil {
		return x.InboundTxCount
	}
	return 0
}

func (x *Vault) GetOutboundTxCount() int64 {
	if x != nil {
		return x.OutboundTxCount
	}
	return 0
}

func (x *Vault) GetPendingTxBlockHeights() []int64 {
	if x != nil {
		return x.PendingTxBlockHeights
	}
	return nil
}

func (x *Vault) GetRouters() []*ChainContract {
	if x != nil {
		return x.Routers
	}
	return nil
}

func (x *Vault) GetFrozen() []string {
	if x != nil {
		return x.Frozen
	}
	return nil
}

var File_types_type_vault_proto protoreflect.FileDescriptor

var file_types_type_vault_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x04, 0x0a, 0x05,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xfa, 0xde, 0x1f, 0x2e, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x35, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x2d, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2f, 0x74, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x78,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x07,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x2a, 0x2e, 0x0a, 0x09, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x73, 0x67,
	0x61, 0x72, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x2a, 0x53, 0x0a, 0x0b, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x65, 0x74, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x42,
	0x7f, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0e, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x68, 0x6f, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58,
	0xaa, 0x02, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0xca, 0x02, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73,
	0xe2, 0x02, 0x11, 0x54, 0x79, 0x70, 0x65, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0xc8, 0xe1, 0x1e, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_type_vault_proto_rawDescOnce sync.Once
	file_types_type_vault_proto_rawDescData = file_types_type_vault_proto_rawDesc
)

func file_types_type_vault_proto_rawDescGZIP() []byte {
	file_types_type_vault_proto_rawDescOnce.Do(func() {
		file_types_type_vault_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_type_vault_proto_rawDescData)
	})
	return file_types_type_vault_proto_rawDescData
}

var file_types_type_vault_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_types_type_vault_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_types_type_vault_proto_goTypes = []interface{}{
	(VaultType)(0),        // 0: types.VaultType
	(VaultStatus)(0),      // 1: types.VaultStatus
	(*Vault)(nil),         // 2: types.Vault
	(*common.Coin)(nil),   // 3: common.Coin
	(*ChainContract)(nil), // 4: types.ChainContract
}
var file_types_type_vault_proto_depIdxs = []int32{
	3, // 0: types.Vault.coins:type_name -> common.Coin
	0, // 1: types.Vault.type:type_name -> types.VaultType
	1, // 2: types.Vault.status:type_name -> types.VaultStatus
	4, // 3: types.Vault.routers:type_name -> types.ChainContract
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_types_type_vault_proto_init() }
func file_types_type_vault_proto_init() {
	if File_types_type_vault_proto != nil {
		return
	}
	file_types_type_chain_contract_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_types_type_vault_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_type_vault_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_type_vault_proto_goTypes,
		DependencyIndexes: file_types_type_vault_proto_depIdxs,
		EnumInfos:         file_types_type_vault_proto_enumTypes,
		MessageInfos:      file_types_type_vault_proto_msgTypes,
	}.Build()
	File_types_type_vault_proto = out.File
	file_types_type_vault_proto_rawDesc = nil
	file_types_type_vault_proto_goTypes = nil
	file_types_type_vault_proto_depIdxs = nil
}
