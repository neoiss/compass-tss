// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: types/server_bifrost_localhost.proto

package types

import (
	context "context"
	common "github.com/mapprotocol/compass-tss/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocalhostBifrost_SendQuorumTx_FullMethodName         = "/types.LocalhostBifrost/SendQuorumTx"
	LocalhostBifrost_SendQuorumNetworkFee_FullMethodName = "/types.LocalhostBifrost/SendQuorumNetworkFee"
	LocalhostBifrost_SendQuorumSolvency_FullMethodName   = "/types.LocalhostBifrost/SendQuorumSolvency"
	LocalhostBifrost_SendQuorumErrataTx_FullMethodName   = "/types.LocalhostBifrost/SendQuorumErrataTx"
	LocalhostBifrost_SubscribeToEvents_FullMethodName    = "/types.LocalhostBifrost/SubscribeToEvents"
)

// LocalhostBifrostClient is the client API for LocalhostBifrost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalhostBifrostClient interface {
	SendQuorumTx(ctx context.Context, in *common.QuorumTx, opts ...grpc.CallOption) (*SendQuorumTxResult, error)
	SendQuorumNetworkFee(ctx context.Context, in *common.QuorumNetworkFee, opts ...grpc.CallOption) (*SendQuorumNetworkFeeResult, error)
	SendQuorumSolvency(ctx context.Context, in *common.QuorumSolvency, opts ...grpc.CallOption) (*SendQuorumSolvencyResult, error)
	SendQuorumErrataTx(ctx context.Context, in *common.QuorumErrataTx, opts ...grpc.CallOption) (*SendQuorumErrataTxResult, error)
	// Server streaming for notifications
	SubscribeToEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LocalhostBifrost_SubscribeToEventsClient, error)
}

type localhostBifrostClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalhostBifrostClient(cc grpc.ClientConnInterface) LocalhostBifrostClient {
	return &localhostBifrostClient{cc}
}

func (c *localhostBifrostClient) SendQuorumTx(ctx context.Context, in *common.QuorumTx, opts ...grpc.CallOption) (*SendQuorumTxResult, error) {
	out := new(SendQuorumTxResult)
	err := c.cc.Invoke(ctx, LocalhostBifrost_SendQuorumTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localhostBifrostClient) SendQuorumNetworkFee(ctx context.Context, in *common.QuorumNetworkFee, opts ...grpc.CallOption) (*SendQuorumNetworkFeeResult, error) {
	out := new(SendQuorumNetworkFeeResult)
	err := c.cc.Invoke(ctx, LocalhostBifrost_SendQuorumNetworkFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localhostBifrostClient) SendQuorumSolvency(ctx context.Context, in *common.QuorumSolvency, opts ...grpc.CallOption) (*SendQuorumSolvencyResult, error) {
	out := new(SendQuorumSolvencyResult)
	err := c.cc.Invoke(ctx, LocalhostBifrost_SendQuorumSolvency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localhostBifrostClient) SendQuorumErrataTx(ctx context.Context, in *common.QuorumErrataTx, opts ...grpc.CallOption) (*SendQuorumErrataTxResult, error) {
	out := new(SendQuorumErrataTxResult)
	err := c.cc.Invoke(ctx, LocalhostBifrost_SendQuorumErrataTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localhostBifrostClient) SubscribeToEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LocalhostBifrost_SubscribeToEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LocalhostBifrost_ServiceDesc.Streams[0], LocalhostBifrost_SubscribeToEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &localhostBifrostSubscribeToEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalhostBifrost_SubscribeToEventsClient interface {
	Recv() (*EventNotification, error)
	grpc.ClientStream
}

type localhostBifrostSubscribeToEventsClient struct {
	grpc.ClientStream
}

func (x *localhostBifrostSubscribeToEventsClient) Recv() (*EventNotification, error) {
	m := new(EventNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocalhostBifrostServer is the server API for LocalhostBifrost service.
// All implementations must embed UnimplementedLocalhostBifrostServer
// for forward compatibility
type LocalhostBifrostServer interface {
	SendQuorumTx(context.Context, *common.QuorumTx) (*SendQuorumTxResult, error)
	SendQuorumNetworkFee(context.Context, *common.QuorumNetworkFee) (*SendQuorumNetworkFeeResult, error)
	SendQuorumSolvency(context.Context, *common.QuorumSolvency) (*SendQuorumSolvencyResult, error)
	SendQuorumErrataTx(context.Context, *common.QuorumErrataTx) (*SendQuorumErrataTxResult, error)
	// Server streaming for notifications
	SubscribeToEvents(*SubscribeRequest, LocalhostBifrost_SubscribeToEventsServer) error
	mustEmbedUnimplementedLocalhostBifrostServer()
}

// UnimplementedLocalhostBifrostServer must be embedded to have forward compatible implementations.
type UnimplementedLocalhostBifrostServer struct {
}

func (UnimplementedLocalhostBifrostServer) SendQuorumTx(context.Context, *common.QuorumTx) (*SendQuorumTxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQuorumTx not implemented")
}
func (UnimplementedLocalhostBifrostServer) SendQuorumNetworkFee(context.Context, *common.QuorumNetworkFee) (*SendQuorumNetworkFeeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQuorumNetworkFee not implemented")
}
func (UnimplementedLocalhostBifrostServer) SendQuorumSolvency(context.Context, *common.QuorumSolvency) (*SendQuorumSolvencyResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQuorumSolvency not implemented")
}
func (UnimplementedLocalhostBifrostServer) SendQuorumErrataTx(context.Context, *common.QuorumErrataTx) (*SendQuorumErrataTxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQuorumErrataTx not implemented")
}
func (UnimplementedLocalhostBifrostServer) SubscribeToEvents(*SubscribeRequest, LocalhostBifrost_SubscribeToEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}
func (UnimplementedLocalhostBifrostServer) mustEmbedUnimplementedLocalhostBifrostServer() {}

// UnsafeLocalhostBifrostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalhostBifrostServer will
// result in compilation errors.
type UnsafeLocalhostBifrostServer interface {
	mustEmbedUnimplementedLocalhostBifrostServer()
}

func RegisterLocalhostBifrostServer(s grpc.ServiceRegistrar, srv LocalhostBifrostServer) {
	s.RegisterService(&LocalhostBifrost_ServiceDesc, srv)
}

func _LocalhostBifrost_SendQuorumTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.QuorumTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostBifrostServer).SendQuorumTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalhostBifrost_SendQuorumTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostBifrostServer).SendQuorumTx(ctx, req.(*common.QuorumTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalhostBifrost_SendQuorumNetworkFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.QuorumNetworkFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostBifrostServer).SendQuorumNetworkFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalhostBifrost_SendQuorumNetworkFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostBifrostServer).SendQuorumNetworkFee(ctx, req.(*common.QuorumNetworkFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalhostBifrost_SendQuorumSolvency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.QuorumSolvency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostBifrostServer).SendQuorumSolvency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalhostBifrost_SendQuorumSolvency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostBifrostServer).SendQuorumSolvency(ctx, req.(*common.QuorumSolvency))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalhostBifrost_SendQuorumErrataTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.QuorumErrataTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalhostBifrostServer).SendQuorumErrataTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalhostBifrost_SendQuorumErrataTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalhostBifrostServer).SendQuorumErrataTx(ctx, req.(*common.QuorumErrataTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalhostBifrost_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalhostBifrostServer).SubscribeToEvents(m, &localhostBifrostSubscribeToEventsServer{stream})
}

type LocalhostBifrost_SubscribeToEventsServer interface {
	Send(*EventNotification) error
	grpc.ServerStream
}

type localhostBifrostSubscribeToEventsServer struct {
	grpc.ServerStream
}

func (x *localhostBifrostSubscribeToEventsServer) Send(m *EventNotification) error {
	return x.ServerStream.SendMsg(m)
}

// LocalhostBifrost_ServiceDesc is the grpc.ServiceDesc for LocalhostBifrost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalhostBifrost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "types.LocalhostBifrost",
	HandlerType: (*LocalhostBifrostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendQuorumTx",
			Handler:    _LocalhostBifrost_SendQuorumTx_Handler,
		},
		{
			MethodName: "SendQuorumNetworkFee",
			Handler:    _LocalhostBifrost_SendQuorumNetworkFee_Handler,
		},
		{
			MethodName: "SendQuorumSolvency",
			Handler:    _LocalhostBifrost_SendQuorumSolvency_Handler,
		},
		{
			MethodName: "SendQuorumErrataTx",
			Handler:    _LocalhostBifrost_SendQuorumErrataTx_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _LocalhostBifrost_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types/server_bifrost_localhost.proto",
}
